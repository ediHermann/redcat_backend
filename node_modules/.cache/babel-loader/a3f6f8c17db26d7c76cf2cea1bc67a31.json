{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _styles = require(\"@buffetjs/styles\");\n\nvar _MediaPreviewList = _interopRequireDefault(require(\"../../MediaPreviewList\"));\n\nvar _RelationPreviewList = _interopRequireDefault(require(\"../../RelationPreviewList\"));\n\nvar _Truncate = _interopRequireDefault(require(\"../../Truncate\"));\n\nvar _Truncated = _interopRequireDefault(require(\"../../Truncated\"));\n\nvar Cell = function Cell(_ref) {\n  var options = _ref.options;\n\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      tooltipIsDisplayed = _useState2[0],\n      setDisplayTooltip = _useState2[1];\n\n  var handleTooltipToggle = function handleTooltipToggle() {\n    setDisplayTooltip(function (prev) {\n      return !prev;\n    });\n  };\n\n  var type = options.type,\n      cellId = options.cellId,\n      value = options.value;\n\n  if (type === 'media') {\n    return /*#__PURE__*/_react[\"default\"].createElement(_MediaPreviewList[\"default\"], {\n      files: value\n    });\n  }\n\n  if (type === 'relation') {\n    return /*#__PURE__*/_react[\"default\"].createElement(_RelationPreviewList[\"default\"], {\n      options: options\n    });\n  }\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_Truncate[\"default\"], {\n    onMouseEnter: handleTooltipToggle,\n    onMouseLeave: handleTooltipToggle\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Truncated[\"default\"], null, /*#__PURE__*/_react[\"default\"].createElement(\"span\", {\n    \"data-for\": cellId,\n    \"data-tip\": value\n  }, value)), tooltipIsDisplayed && /*#__PURE__*/_react[\"default\"].createElement(_styles.Tooltip, {\n    id: cellId\n  }));\n};\n\nCell.propTypes = {\n  options: _propTypes[\"default\"].shape({\n    cellId: _propTypes[\"default\"].string.isRequired,\n    metadatas: _propTypes[\"default\"].shape({\n      mainField: _propTypes[\"default\"].object\n    }).isRequired,\n    name: _propTypes[\"default\"].string.isRequired,\n    relationType: _propTypes[\"default\"].string,\n    rowId: _propTypes[\"default\"].oneOfType([_propTypes[\"default\"].string, _propTypes[\"default\"].number]).isRequired,\n    type: _propTypes[\"default\"].string,\n    queryInfos: _propTypes[\"default\"].shape({\n      endPoint: _propTypes[\"default\"].string.isRequired\n    }),\n    value: _propTypes[\"default\"].any\n  }).isRequired\n};\n\nvar _default = /*#__PURE__*/(0, _react.memo)(Cell);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["D:/webstorm_projects/redcat_backend/.cache/plugins/strapi-plugin-content-manager/admin/src/components/CustomTable/Row/Cell.js"],"names":["Cell","options","tooltipIsDisplayed","setDisplayTooltip","handleTooltipToggle","prev","type","cellId","value","propTypes","PropTypes","shape","string","isRequired","metadatas","mainField","object","name","relationType","rowId","oneOfType","number","queryInfos","endPoint","any"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,IAAI,GAAG,SAAPA,IAAO,OAAiB;AAAA,MAAdC,OAAc,QAAdA,OAAc;;AAAA,kBACoB,qBAAS,KAAT,CADpB;AAAA;AAAA,MACrBC,kBADqB;AAAA,MACDC,iBADC;;AAG5B,MAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChCD,IAAAA,iBAAiB,CAAC,UAAAE,IAAI;AAAA,aAAI,CAACA,IAAL;AAAA,KAAL,CAAjB;AACD,GAFD;;AAH4B,MAOpBC,IAPoB,GAOIL,OAPJ,CAOpBK,IAPoB;AAAA,MAOdC,MAPc,GAOIN,OAPJ,CAOdM,MAPc;AAAA,MAONC,KAPM,GAOIP,OAPJ,CAONO,KAPM;;AAS5B,MAAIF,IAAI,KAAK,OAAb,EAAsB;AACpB,wBAAO,gCAAC,4BAAD;AAAkB,MAAA,KAAK,EAAEE;AAAzB,MAAP;AACD;;AAED,MAAIF,IAAI,KAAK,UAAb,EAAyB;AACvB,wBAAO,gCAAC,+BAAD;AAAqB,MAAA,OAAO,EAAEL;AAA9B,MAAP;AACD;;AAED,sBACE,gCAAC,oBAAD;AAAU,IAAA,YAAY,EAAEG,mBAAxB;AAA6C,IAAA,YAAY,EAAEA;AAA3D,kBACE,gCAAC,qBAAD,qBACE;AAAM,gBAAUG,MAAhB;AAAwB,gBAAUC;AAAlC,KACGA,KADH,CADF,CADF,EAMGN,kBAAkB,iBAAI,gCAAC,eAAD;AAAS,IAAA,EAAE,EAAEK;AAAb,IANzB,CADF;AAUD,CA3BD;;AA6BAP,IAAI,CAACS,SAAL,GAAiB;AACfR,EAAAA,OAAO,EAAES,sBAAUC,KAAV,CAAgB;AACvBJ,IAAAA,MAAM,EAAEG,sBAAUE,MAAV,CAAiBC,UADF;AAEvBC,IAAAA,SAAS,EAAEJ,sBAAUC,KAAV,CAAgB;AACzBI,MAAAA,SAAS,EAAEL,sBAAUM;AADI,KAAhB,EAERH,UAJoB;AAKvBI,IAAAA,IAAI,EAAEP,sBAAUE,MAAV,CAAiBC,UALA;AAMvBK,IAAAA,YAAY,EAAER,sBAAUE,MAND;AAOvBO,IAAAA,KAAK,EAAET,sBAAUU,SAAV,CAAoB,CAACV,sBAAUE,MAAX,EAAmBF,sBAAUW,MAA7B,CAApB,EAA0DR,UAP1C;AAQvBP,IAAAA,IAAI,EAAEI,sBAAUE,MARO;AASvBU,IAAAA,UAAU,EAAEZ,sBAAUC,KAAV,CAAgB;AAC1BY,MAAAA,QAAQ,EAAEb,sBAAUE,MAAV,CAAiBC;AADD,KAAhB,CATW;AAYvBL,IAAAA,KAAK,EAAEE,sBAAUc;AAZM,GAAhB,EAaNX;AAdY,CAAjB;;4BAiBe,iBAAKb,IAAL,C","sourcesContent":["import React, { memo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip } from '@buffetjs/styles';\nimport MediaPreviewList from '../../MediaPreviewList';\nimport RelationPreviewList from '../../RelationPreviewList';\nimport Truncate from '../../Truncate';\nimport Truncated from '../../Truncated';\n\nconst Cell = ({ options }) => {\n  const [tooltipIsDisplayed, setDisplayTooltip] = useState(false);\n\n  const handleTooltipToggle = () => {\n    setDisplayTooltip(prev => !prev);\n  };\n\n  const { type, cellId, value } = options;\n\n  if (type === 'media') {\n    return <MediaPreviewList files={value} />;\n  }\n\n  if (type === 'relation') {\n    return <RelationPreviewList options={options} />;\n  }\n\n  return (\n    <Truncate onMouseEnter={handleTooltipToggle} onMouseLeave={handleTooltipToggle}>\n      <Truncated>\n        <span data-for={cellId} data-tip={value}>\n          {value}\n        </span>\n      </Truncated>\n      {tooltipIsDisplayed && <Tooltip id={cellId} />}\n    </Truncate>\n  );\n};\n\nCell.propTypes = {\n  options: PropTypes.shape({\n    cellId: PropTypes.string.isRequired,\n    metadatas: PropTypes.shape({\n      mainField: PropTypes.object,\n    }).isRequired,\n    name: PropTypes.string.isRequired,\n    relationType: PropTypes.string,\n    rowId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    type: PropTypes.string,\n    queryInfos: PropTypes.shape({\n      endPoint: PropTypes.string.isRequired,\n    }),\n    value: PropTypes.any,\n  }).isRequired,\n};\n\nexport default memo(Cell);\n"]},"metadata":{},"sourceType":"script"}