{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dispatch = void 0;\n\nrequire(\"@babel/polyfill\");\n\nrequire(\"sanitize.css/sanitize.css\");\n\nrequire(\"bootstrap/dist/css/bootstrap.css\");\n\nrequire(\"font-awesome/css/font-awesome.min.css\");\n\nrequire(\"@fortawesome/fontawesome-free/css/all.css\");\n\nrequire(\"@fortawesome/fontawesome-free/js/all.min.js\");\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _reactRouterDom = require(\"react-router-dom\");\n\nvar _strapiHelperPlugin = require(\"strapi-helper-plugin\");\n\nvar _lodash = require(\"lodash\");\n\nvar _Fonts = _interopRequireDefault(require(\"./components/Fonts\"));\n\nvar _actions = require(\"./containers/App/actions\");\n\nvar _actions2 = require(\"./containers/NotificationProvider/actions\");\n\nvar _actions3 = require(\"./containers/NewNotification/actions\");\n\nvar _basename = _interopRequireDefault(require(\"./utils/basename\"));\n\nvar _reducerInjectors = _interopRequireDefault(require(\"./utils/reducerInjectors\"));\n\nvar _injectReducer = _interopRequireDefault(require(\"./utils/injectReducer\"));\n\nvar _injectSaga = _interopRequireDefault(require(\"./utils/injectSaga\"));\n\nvar _Strapi = _interopRequireDefault(require(\"./utils/Strapi\"));\n\nvar _App = _interopRequireDefault(require(\"./containers/App\"));\n\nvar _LanguageProvider = _interopRequireDefault(require(\"./containers/LanguageProvider\"));\n\nvar _configureStore = _interopRequireDefault(require(\"./configureStore\"));\n\nvar _config = require(\"./config\");\n\nvar _i18n = require(\"./i18n\");\n\nvar _history = _interopRequireDefault(require(\"./utils/history\"));\n\nvar _plugins = _interopRequireDefault(require(\"./plugins\"));\n\n/**\n *\n * app.js\n *\n * Entry point of the application\n */\n// NOTE TO PLUGINS DEVELOPERS:\n// If you modify this file by adding new options to a plugin entry point\n// Here's the file: strapi/docs/3.0.0-beta.x/plugin-development/frontend-field-api.md\n// Here's the file: strapi/docs/3.0.0-beta.x/guides/registering-a-field-in-admin.md\n// Also the strapi-generate-plugins/files/admin/src/index.js needs to be updated\n// IF THE DOC IS NOT UPDATED THE PULL REQUEST WILL NOT BE MERGED\n\n/* eslint-disable */\n// Third party css library needed\n// Strapi provider with the internal APIs\n// Import root component\n// Import Language provider\n// Import i18n messages\n// Create redux store with history\nvar strapi = (0, _Strapi[\"default\"])();\nvar initialState = {};\nvar store = (0, _configureStore[\"default\"])(initialState, _history[\"default\"]);\nvar dispatch = store.dispatch;\nexports.dispatch = dispatch;\nvar MOUNT_NODE = document.getElementById('app') || document.createElement('div');\nObject.keys(_plugins[\"default\"]).forEach(function (current) {\n  var registerPlugin = function registerPlugin(plugin) {\n    return plugin;\n  };\n\n  var currentPluginFn = _plugins[\"default\"][current]; // By updating this by adding required methods\n  // to load a plugin you need to update this file\n  // strapi-generate-plugins/files/admin/src/index.js needs to be updated\n\n  var plugin = currentPluginFn({\n    registerComponent: strapi.componentApi.registerComponent,\n    registerField: strapi.fieldApi.registerField,\n    registerPlugin: registerPlugin,\n    settingsBaseURL: _config.SETTINGS_BASE_URL || '/settings'\n  });\n\n  var pluginTradsPrefixed = _i18n.languages.reduce(function (acc, lang) {\n    var currentLocale = plugin.trads[lang];\n\n    if (currentLocale) {\n      var localeprefixedWithPluginId = Object.keys(currentLocale).reduce(function (acc2, current) {\n        acc2[\"\".concat(plugin.id, \".\").concat(current)] = currentLocale[current];\n        return acc2;\n      }, {});\n      acc[lang] = localeprefixedWithPluginId;\n    }\n\n    return acc;\n  }, {}); // Inject plugins reducers\n\n\n  var pluginReducers = plugin.reducers || {};\n  Object.keys(pluginReducers).forEach(function (reducerName) {\n    (0, _reducerInjectors[\"default\"])(store).injectReducer(reducerName, pluginReducers[reducerName]);\n  });\n\n  try {\n    (0, _lodash.merge)(_i18n.translationMessages, pluginTradsPrefixed);\n    dispatch((0, _actions.pluginLoaded)(plugin));\n  } catch (err) {\n    console.log({\n      err: err\n    });\n  }\n}); // TODO\n\nvar remoteURL = function () {\n  // Relative URL (ex: /dashboard)\n  if (REMOTE_URL[0] === '/') {\n    return (window.location.origin + REMOTE_URL).replace(/\\/$/, '');\n  }\n\n  return REMOTE_URL.replace(/\\/$/, '');\n}();\n\nvar displayNotification = function displayNotification(message, status) {\n  console.warn( // Validate the text\n  'Deprecated: Will be deleted.\\nPlease use strapi.notification.toggle(config).\\nDocs : https://strapi.io/documentation/developer-docs/latest/development/local-plugins-customization.html#strapi-notification');\n  dispatch((0, _actions2.showNotification)(message, status));\n};\n\nvar displayNewNotification = function displayNewNotification(config) {\n  dispatch((0, _actions3.showNotification)(config));\n};\n\nvar lockApp = function lockApp(data) {\n  dispatch((0, _actions.freezeApp)(data));\n};\n\nvar unlockApp = function unlockApp() {\n  dispatch((0, _actions.unfreezeApp)());\n};\n\nvar lockAppWithOverlay = function lockAppWithOverlay() {\n  var overlayblockerParams = {\n    children: /*#__PURE__*/_react[\"default\"].createElement(\"div\", null),\n    noGradient: true\n  };\n  lockApp(overlayblockerParams);\n};\n\nwindow.strapi = Object.assign(window.strapi || {}, {\n  node: MODE || 'host',\n  env: NODE_ENV,\n  remoteURL: remoteURL,\n  backendURL: BACKEND_URL === '/' ? window.location.origin : BACKEND_URL,\n  notification: {\n    // New notification api\n    toggle: function toggle(config) {\n      displayNewNotification(config);\n    },\n    success: function success(message) {\n      displayNotification(message, 'success');\n    },\n    warning: function warning(message) {\n      displayNotification(message, 'warning');\n    },\n    error: function error(message) {\n      displayNotification(message, 'error');\n    },\n    info: function info(message) {\n      displayNotification(message, 'info');\n    }\n  },\n  refresh: function refresh(pluginId) {\n    return {\n      translationMessages: function translationMessages(translationMessagesUpdated) {\n        render((0, _lodash.merge)({}, _i18n.translationMessages, translationMessagesUpdated));\n      },\n      leftMenuSections: function leftMenuSections(leftMenuSectionsUpdated) {\n        store.dispatch((0, _actions.updatePlugin)(pluginId, 'leftMenuSections', leftMenuSectionsUpdated));\n      }\n    };\n  },\n  router: _history[\"default\"],\n  languages: _i18n.languages,\n  currentLanguage: window.localStorage.getItem('strapi-admin-language') || window.navigator.language || window.navigator.userLanguage || 'en',\n  lockApp: lockApp,\n  lockAppWithOverlay: lockAppWithOverlay,\n  unlockApp: unlockApp,\n  injectReducer: _injectReducer[\"default\"],\n  injectSaga: _injectSaga[\"default\"],\n  store: store\n});\n\nvar render = function render(messages) {\n  _reactDom[\"default\"].render( /*#__PURE__*/_react[\"default\"].createElement(_reactRedux.Provider, {\n    store: store\n  }, /*#__PURE__*/_react[\"default\"].createElement(_strapiHelperPlugin.StrapiProvider, {\n    strapi: strapi\n  }, /*#__PURE__*/_react[\"default\"].createElement(_Fonts[\"default\"], null), /*#__PURE__*/_react[\"default\"].createElement(_LanguageProvider[\"default\"], {\n    messages: messages\n  }, /*#__PURE__*/_react[\"default\"].createElement(_reactRouterDom.BrowserRouter, {\n    basename: _basename[\"default\"]\n  }, /*#__PURE__*/_react[\"default\"].createElement(_App[\"default\"], {\n    store: store\n  }))))), MOUNT_NODE);\n};\n\nif (module.hot) {\n  module.hot.accept(['./i18n', './containers/App'], function () {\n    _reactDom[\"default\"].unmountComponentAtNode(MOUNT_NODE);\n\n    render(_i18n.translationMessages);\n  });\n}\n\nif (NODE_ENV !== 'test') {\n  render(_i18n.translationMessages);\n} // @Pierre Burgy exporting dispatch for the notifications...\n\n\n// TODO remove this for the new Cypress tests\nif (window.Cypress) {\n  window.__store__ = Object.assign(window.__store__ || {}, {\n    store: store\n  });\n}","map":{"version":3,"sources":["D:/webstorm_projects/redcat_backend/.cache/admin/src/app.js"],"names":["strapi","initialState","store","history","dispatch","MOUNT_NODE","document","getElementById","createElement","Object","keys","plugins","forEach","current","registerPlugin","plugin","currentPluginFn","registerComponent","componentApi","registerField","fieldApi","settingsBaseURL","SETTINGS_BASE_URL","pluginTradsPrefixed","languages","reduce","acc","lang","currentLocale","trads","localeprefixedWithPluginId","acc2","id","pluginReducers","reducers","reducerName","injectReducer","translationMessages","err","console","log","remoteURL","REMOTE_URL","window","location","origin","replace","displayNotification","message","status","warn","displayNewNotification","config","lockApp","data","unlockApp","lockAppWithOverlay","overlayblockerParams","children","noGradient","assign","node","MODE","env","NODE_ENV","backendURL","BACKEND_URL","notification","toggle","success","warning","error","info","refresh","pluginId","translationMessagesUpdated","render","leftMenuSections","leftMenuSectionsUpdated","router","currentLanguage","localStorage","getItem","navigator","language","userLanguage","injectSaga","messages","ReactDOM","basename","module","hot","accept","unmountComponentAtNode","Cypress","__store__"],"mappings":"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","sourcesContent":["/**\n *\n * app.js\n *\n * Entry point of the application\n */\n\n// NOTE TO PLUGINS DEVELOPERS:\n// If you modify this file by adding new options to a plugin entry point\n// Here's the file: strapi/docs/3.0.0-beta.x/plugin-development/frontend-field-api.md\n// Here's the file: strapi/docs/3.0.0-beta.x/guides/registering-a-field-in-admin.md\n// Also the strapi-generate-plugins/files/admin/src/index.js needs to be updated\n// IF THE DOC IS NOT UPDATED THE PULL REQUEST WILL NOT BE MERGED\n\n/* eslint-disable */\n\nimport '@babel/polyfill';\nimport 'sanitize.css/sanitize.css';\n\n// Third party css library needed\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport '@fortawesome/fontawesome-free/js/all.min.js';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n// Strapi provider with the internal APIs\nimport { StrapiProvider } from 'strapi-helper-plugin';\nimport { merge } from 'lodash';\nimport Fonts from './components/Fonts';\nimport { freezeApp, pluginLoaded, unfreezeApp, updatePlugin } from './containers/App/actions';\nimport { showNotification } from './containers/NotificationProvider/actions';\nimport { showNotification as showNewNotification } from './containers/NewNotification/actions';\n\nimport basename from './utils/basename';\nimport getInjectors from './utils/reducerInjectors';\nimport injectReducer from './utils/injectReducer';\nimport injectSaga from './utils/injectSaga';\nimport Strapi from './utils/Strapi';\n\n// Import root component\nimport App from './containers/App';\n// Import Language provider\nimport LanguageProvider from './containers/LanguageProvider';\n\nimport configureStore from './configureStore';\nimport { SETTINGS_BASE_URL } from './config';\n\n// Import i18n messages\nimport { translationMessages, languages } from './i18n';\n\n// Create redux store with history\nimport history from './utils/history';\n\nimport plugins from './plugins';\n\nconst strapi = Strapi();\n\nconst initialState = {};\nconst store = configureStore(initialState, history);\nconst { dispatch } = store;\nconst MOUNT_NODE = document.getElementById('app') || document.createElement('div');\n\nObject.keys(plugins).forEach(current => {\n  const registerPlugin = plugin => {\n    return plugin;\n  };\n  const currentPluginFn = plugins[current];\n\n  // By updating this by adding required methods\n  // to load a plugin you need to update this file\n  // strapi-generate-plugins/files/admin/src/index.js needs to be updated\n  const plugin = currentPluginFn({\n    registerComponent: strapi.componentApi.registerComponent,\n    registerField: strapi.fieldApi.registerField,\n    registerPlugin,\n    settingsBaseURL: SETTINGS_BASE_URL || '/settings',\n  });\n\n  const pluginTradsPrefixed = languages.reduce((acc, lang) => {\n    const currentLocale = plugin.trads[lang];\n\n    if (currentLocale) {\n      const localeprefixedWithPluginId = Object.keys(currentLocale).reduce((acc2, current) => {\n        acc2[`${plugin.id}.${current}`] = currentLocale[current];\n\n        return acc2;\n      }, {});\n\n      acc[lang] = localeprefixedWithPluginId;\n    }\n\n    return acc;\n  }, {});\n\n  // Inject plugins reducers\n  const pluginReducers = plugin.reducers || {};\n\n  Object.keys(pluginReducers).forEach(reducerName => {\n    getInjectors(store).injectReducer(reducerName, pluginReducers[reducerName]);\n  });\n\n  try {\n    merge(translationMessages, pluginTradsPrefixed);\n    dispatch(pluginLoaded(plugin));\n  } catch (err) {\n    console.log({ err });\n  }\n});\n\n// TODO\nconst remoteURL = (() => {\n  // Relative URL (ex: /dashboard)\n  if (REMOTE_URL[0] === '/') {\n    return (window.location.origin + REMOTE_URL).replace(/\\/$/, '');\n  }\n\n  return REMOTE_URL.replace(/\\/$/, '');\n})();\n\nconst displayNotification = (message, status) => {\n  console.warn(\n    // Validate the text\n    'Deprecated: Will be deleted.\\nPlease use strapi.notification.toggle(config).\\nDocs : https://strapi.io/documentation/developer-docs/latest/development/local-plugins-customization.html#strapi-notification'\n  );\n  dispatch(showNotification(message, status));\n};\nconst displayNewNotification = config => {\n  dispatch(showNewNotification(config));\n};\nconst lockApp = data => {\n  dispatch(freezeApp(data));\n};\nconst unlockApp = () => {\n  dispatch(unfreezeApp());\n};\n\nconst lockAppWithOverlay = () => {\n  const overlayblockerParams = {\n    children: <div />,\n    noGradient: true,\n  };\n\n  lockApp(overlayblockerParams);\n};\n\nwindow.strapi = Object.assign(window.strapi || {}, {\n  node: MODE || 'host',\n  env: NODE_ENV,\n  remoteURL,\n  backendURL: BACKEND_URL === '/' ? window.location.origin : BACKEND_URL,\n  notification: {\n    // New notification api\n    toggle: config => {\n      displayNewNotification(config);\n    },\n    success: message => {\n      displayNotification(message, 'success');\n    },\n    warning: message => {\n      displayNotification(message, 'warning');\n    },\n    error: message => {\n      displayNotification(message, 'error');\n    },\n    info: message => {\n      displayNotification(message, 'info');\n    },\n  },\n  refresh: pluginId => ({\n    translationMessages: translationMessagesUpdated => {\n      render(merge({}, translationMessages, translationMessagesUpdated));\n    },\n    leftMenuSections: leftMenuSectionsUpdated => {\n      store.dispatch(updatePlugin(pluginId, 'leftMenuSections', leftMenuSectionsUpdated));\n    },\n  }),\n  router: history,\n  languages,\n  currentLanguage:\n    window.localStorage.getItem('strapi-admin-language') ||\n    window.navigator.language ||\n    window.navigator.userLanguage ||\n    'en',\n  lockApp,\n  lockAppWithOverlay,\n  unlockApp,\n  injectReducer,\n  injectSaga,\n  store,\n});\n\nconst render = messages => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <StrapiProvider strapi={strapi}>\n        <Fonts />\n        <LanguageProvider messages={messages}>\n          <BrowserRouter basename={basename}>\n            <App store={store} />\n          </BrowserRouter>\n        </LanguageProvider>\n      </StrapiProvider>\n    </Provider>,\n    MOUNT_NODE\n  );\n};\n\nif (module.hot) {\n  module.hot.accept(['./i18n', './containers/App'], () => {\n    ReactDOM.unmountComponentAtNode(MOUNT_NODE);\n\n    render(translationMessages);\n  });\n}\n\nif (NODE_ENV !== 'test') {\n  render(translationMessages);\n}\n\n// @Pierre Burgy exporting dispatch for the notifications...\nexport { dispatch };\n\n// TODO remove this for the new Cypress tests\nif (window.Cypress) {\n  window.__store__ = Object.assign(window.__store__ || {}, { store });\n}\n"]},"metadata":{},"sourceType":"script"}