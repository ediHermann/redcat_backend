{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = require(\"react\");\n\nvar _reactRouterDom = require(\"react-router-dom\");\n\nvar _qs = require(\"qs\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar useQueryParams = function useQueryParams(initialParams) {\n  var _useLocation = (0, _reactRouterDom.useLocation)(),\n      search = _useLocation.search;\n\n  var _useHistory = (0, _reactRouterDom.useHistory)(),\n      push = _useHistory.push;\n\n  var query = (0, _react.useMemo)(function () {\n    var searchQuery = search.substring(1);\n\n    if (!search) {\n      return initialParams;\n    }\n\n    return (0, _qs.parse)(searchQuery);\n  }, [search, initialParams]);\n  var setQuery = (0, _react.useCallback)(function (nextParams) {\n    var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'push';\n\n    var nextQuery = _objectSpread({}, query);\n\n    if (method === 'remove') {\n      Object.keys(nextParams).forEach(function (key) {\n        delete nextQuery[key];\n      });\n    } else {\n      nextQuery = _objectSpread(_objectSpread({}, query), nextParams);\n    }\n\n    push({\n      search: (0, _qs.stringify)(nextQuery, {\n        encode: false\n      })\n    });\n  }, [push, query]);\n  return [{\n    query: query,\n    rawQuery: search\n  }, setQuery];\n};\n\nvar _default = useQueryParams;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["D:/webstorm_projects/redcat_backend/.cache/plugins/strapi-plugin-content-manager/admin/src/hooks/useQueryParams/index.js"],"names":["useQueryParams","initialParams","search","push","query","searchQuery","substring","setQuery","nextParams","method","nextQuery","Object","keys","forEach","key","encode","rawQuery"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;AAEA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,aAAa,EAAI;AAAA,qBACnB,kCADmB;AAAA,MAC9BC,MAD8B,gBAC9BA,MAD8B;;AAAA,oBAErB,iCAFqB;AAAA,MAE9BC,IAF8B,eAE9BA,IAF8B;;AAItC,MAAMC,KAAK,GAAG,oBAAQ,YAAM;AAC1B,QAAMC,WAAW,GAAGH,MAAM,CAACI,SAAP,CAAiB,CAAjB,CAApB;;AAEA,QAAI,CAACJ,MAAL,EAAa;AACX,aAAOD,aAAP;AACD;;AAED,WAAO,eAAMI,WAAN,CAAP;AACD,GARa,EAQX,CAACH,MAAD,EAASD,aAAT,CARW,CAAd;AAUA,MAAMM,QAAQ,GAAG,wBACf,UAACC,UAAD,EAAiC;AAAA,QAApBC,MAAoB,uEAAX,MAAW;;AAC/B,QAAIC,SAAS,qBAAQN,KAAR,CAAb;;AAEA,QAAIK,MAAM,KAAK,QAAf,EAAyB;AACvBE,MAAAA,MAAM,CAACC,IAAP,CAAYJ,UAAZ,EAAwBK,OAAxB,CAAgC,UAAAC,GAAG,EAAI;AACrC,eAAOJ,SAAS,CAACI,GAAD,CAAhB;AACD,OAFD;AAGD,KAJD,MAIO;AACLJ,MAAAA,SAAS,mCAAQN,KAAR,GAAkBI,UAAlB,CAAT;AACD;;AAEDL,IAAAA,IAAI,CAAC;AAAED,MAAAA,MAAM,EAAE,mBAAUQ,SAAV,EAAqB;AAAEK,QAAAA,MAAM,EAAE;AAAV,OAArB;AAAV,KAAD,CAAJ;AACD,GAbc,EAcf,CAACZ,IAAD,EAAOC,KAAP,CAde,CAAjB;AAiBA,SAAO,CAAC;AAAEA,IAAAA,KAAK,EAALA,KAAF;AAASY,IAAAA,QAAQ,EAAEd;AAAnB,GAAD,EAA8BK,QAA9B,CAAP;AACD,CAhCD;;eAkCeP,c","sourcesContent":["import { useCallback, useMemo } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { parse, stringify } from 'qs';\n\nconst useQueryParams = initialParams => {\n  const { search } = useLocation();\n  const { push } = useHistory();\n\n  const query = useMemo(() => {\n    const searchQuery = search.substring(1);\n\n    if (!search) {\n      return initialParams;\n    }\n\n    return parse(searchQuery);\n  }, [search, initialParams]);\n\n  const setQuery = useCallback(\n    (nextParams, method = 'push') => {\n      let nextQuery = { ...query };\n\n      if (method === 'remove') {\n        Object.keys(nextParams).forEach(key => {\n          delete nextQuery[key];\n        });\n      } else {\n        nextQuery = { ...query, ...nextParams };\n      }\n\n      push({ search: stringify(nextQuery, { encode: false }) });\n    },\n    [push, query]\n  );\n\n  return [{ query, rawQuery: search }, setQuery];\n};\n\nexport default useQueryParams;\n"]},"metadata":{},"sourceType":"script"}