{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar yup = _interopRequireWildcard(require(\"yup\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _strapiHelperPlugin = require(\"strapi-helper-plugin\");\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _pluginId = _interopRequireDefault(require(\"../../../pluginId\"));\n\nvar _getTrad = _interopRequireDefault(require(\"../../../utils/getTrad\"));\n\nvar _createUid = require(\"./createUid\");\n\nvar _componentForm = _interopRequireDefault(require(\"./componentForm\"));\n\nvar _staticFields = _interopRequireDefault(require(\"./staticFields\"));\n\nvar _attributesRegexes = require(\"./attributesRegexes\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable indent */\n\n/* eslint-disable prefer-arrow-callback */\nyup.addMethod(yup.mixed, 'defined', function () {\n  return this.test('defined', _strapiHelperPlugin.translatedErrors.required, function (value) {\n    return value !== undefined;\n  });\n});\nyup.addMethod(yup.string, 'unique', function (message, alreadyTakenAttributes, validator) {\n  var category = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  return this.test('unique', message, function (string) {\n    if (!string) {\n      return false;\n    }\n\n    return !alreadyTakenAttributes.includes(typeof validator === 'function' ? validator(string, category) : string.toLowerCase());\n  });\n});\nyup.addMethod(yup.array, 'hasNotEmptyValues', function (message) {\n  return this.test('hasNotEmptyValues', message, function (array) {\n    return !array.some(function (value) {\n      return (0, _lodash.isEmpty)(value);\n    });\n  });\n});\nyup.addMethod(yup.string, 'isAllowed', function (message, reservedNames) {\n  return this.test('isAllowed', message, function (string) {\n    if (!string) {\n      return false;\n    }\n\n    return !reservedNames.includes((0, _lodash.toLower)((0, _lodash.trim)(string)));\n  });\n});\nyup.addMethod(yup.string, 'isInferior', function (message, max) {\n  return this.test('isInferior', message, function (min) {\n    if (!min) {\n      return false;\n    }\n\n    if (Number.isNaN((0, _lodash.toNumber)(min))) {\n      return true;\n    }\n\n    return (0, _lodash.toNumber)(max) >= (0, _lodash.toNumber)(min);\n  });\n});\nyup.addMethod(yup.array, 'matchesEnumRegex', function (message) {\n  return this.test('matchesEnumRegex', message, function (array) {\n    return array.every(function (value) {\n      return _attributesRegexes.ENUM_REGEX.test(value);\n    });\n  });\n});\nyup.addMethod(yup.string, 'isValidRegExpPattern', function (message) {\n  return this.test('isValidRegExpPattern', message, function (string) {\n    return new RegExp(string) !== null;\n  });\n});\nvar ATTRIBUTES_THAT_DONT_HAVE_MIN_MAX_SETTINGS = ['boolean', 'date', 'enumeration', 'media'];\nvar forms = {\n  attribute: {\n    schema: function schema(currentSchema, attributeType, dataToValidate, isEditing, attributeToEditName, initialData, alreadyTakenTargetContentTypeAttributes, reservedNames) {\n      var alreadyTakenAttributes = Object.keys((0, _lodash.get)(currentSchema, ['schema', 'attributes'], {})).filter(function (attribute) {\n        if (isEditing) {\n          return attribute !== attributeToEditName;\n        }\n\n        return true;\n      }); // For relations\n\n      var targetAttributeAlreadyTakenValue = dataToValidate.name ? [].concat((0, _toConsumableArray2[\"default\"])(alreadyTakenAttributes), [dataToValidate.name]) : alreadyTakenAttributes;\n\n      if (isEditing && attributeType === 'relation' && dataToValidate.target === currentSchema.uid) {\n        targetAttributeAlreadyTakenValue = targetAttributeAlreadyTakenValue.filter(function (attribute) {\n          return attribute !== initialData.targetAttribute;\n        });\n      } // Common yup shape for most attributes\n\n\n      var commonShape = {\n        name: yup.string().unique(_strapiHelperPlugin.translatedErrors.unique, alreadyTakenAttributes).matches(_attributesRegexes.NAME_REGEX, _strapiHelperPlugin.translatedErrors.regex).isAllowed((0, _getTrad[\"default\"])('error.attributeName.reserved-name'), reservedNames.attributes).required(_strapiHelperPlugin.translatedErrors.required),\n        type: yup.string().required(_strapiHelperPlugin.translatedErrors.required),\n        \"default\": yup.string().nullable(),\n        unique: yup[\"boolean\"]().nullable(),\n        required: yup[\"boolean\"]()\n      };\n      var numberTypeShape = {\n        max: yup.lazy(function () {\n          var schema = yup.number();\n\n          if (attributeType === 'integer' || attributeType === 'biginteger' || attributeType === 'dynamiczone') {\n            schema = schema.integer();\n          }\n\n          if (attributeType === 'dynamiczone') {\n            schema = schema.positive();\n          }\n\n          return schema.nullable();\n        }),\n        min: yup.lazy(function () {\n          var schema = yup.number();\n\n          if (attributeType === 'integer' || attributeType === 'biginteger' || attributeType === 'dynamiczone') {\n            schema = schema.integer();\n          }\n\n          if (attributeType === 'dynamiczone') {\n            schema = schema.positive();\n          }\n\n          return schema.nullable().when('max', function (max, schema) {\n            if (max) {\n              return schema.max(max, (0, _getTrad[\"default\"])('error.validation.minSupMax'));\n            }\n\n            return schema;\n          }).nullable();\n        })\n      };\n      var fieldsThatSupportMaxAndMinLengthShape = {\n        maxLength: yup.number().integer().nullable(),\n        minLength: yup.number().integer().when('maxLength', function (maxLength, schema) {\n          if (maxLength) {\n            return schema.max(maxLength, (0, _getTrad[\"default\"])('error.validation.minSupMax'));\n          }\n\n          return schema;\n        }).nullable()\n      };\n\n      switch (attributeType) {\n        case 'component':\n          return yup.object().shape(_objectSpread(_objectSpread({}, commonShape), {}, {\n            component: yup.string().required(_strapiHelperPlugin.translatedErrors.required)\n          }, numberTypeShape));\n\n        case 'dynamiczone':\n          return yup.object().shape(_objectSpread(_objectSpread({}, commonShape), numberTypeShape));\n\n        case 'enumeration':\n          return yup.object().shape({\n            name: yup.string().isAllowed((0, _getTrad[\"default\"])('error.attributeName.reserved-name'), reservedNames.attributes).unique(_strapiHelperPlugin.translatedErrors.unique, alreadyTakenAttributes).matches(_attributesRegexes.ENUM_REGEX, _strapiHelperPlugin.translatedErrors.regex).required(_strapiHelperPlugin.translatedErrors.required),\n            type: yup.string().required(_strapiHelperPlugin.translatedErrors.required),\n            \"default\": yup.string().nullable(),\n            unique: yup[\"boolean\"]().nullable(),\n            required: yup[\"boolean\"](),\n            \"enum\": yup.array().of(yup.string()).min(1, _strapiHelperPlugin.translatedErrors.min).test({\n              name: 'areEnumValuesUnique',\n              message: (0, _getTrad[\"default\"])('error.validation.enum-duplicate'),\n              test: function test(values) {\n                var filtered = (0, _toConsumableArray2[\"default\"])(new Set(values));\n                return filtered.length === values.length;\n              }\n            }).matchesEnumRegex(_strapiHelperPlugin.translatedErrors.regex).hasNotEmptyValues('Empty strings are not allowed', dataToValidate[\"enum\"]),\n            enumName: yup.string().nullable()\n          });\n\n        case 'text':\n          return yup.object().shape(_objectSpread(_objectSpread(_objectSpread({}, commonShape), fieldsThatSupportMaxAndMinLengthShape), {}, {\n            regex: yup.string().isValidRegExpPattern((0, _getTrad[\"default\"])('error.validation.regex')).nullable()\n          }));\n\n        case 'number':\n        case 'integer':\n        case 'biginteger':\n        case 'float':\n        case 'decimal':\n          {\n            if (dataToValidate.type === 'biginteger') {\n              return yup.object().shape(_objectSpread(_objectSpread({}, commonShape), {}, {\n                \"default\": yup.string().nullable().matches(/^\\d*$/),\n                min: yup.string().nullable().matches(/^\\d*$/).when('max', function (max, schema) {\n                  if (max) {\n                    return schema.isInferior((0, _getTrad[\"default\"])('error.validation.minSupMax'), max);\n                  }\n\n                  return schema;\n                }),\n                max: yup.string().nullable().matches(/^\\d*$/)\n              }));\n            }\n\n            var defaultType = yup.number();\n\n            if (dataToValidate.type === 'integer') {\n              defaultType = yup.number().integer('component.Input.error.validation.integer');\n            }\n\n            return yup.object().shape(_objectSpread(_objectSpread({}, commonShape), {}, {\n              \"default\": defaultType.nullable()\n            }, numberTypeShape));\n          }\n\n        case 'relation':\n          return yup.object().shape({\n            name: yup.string().isAllowed((0, _getTrad[\"default\"])('error.attributeName.reserved-name'), reservedNames.attributes).matches(_attributesRegexes.NAME_REGEX, _strapiHelperPlugin.translatedErrors.regex).unique(_strapiHelperPlugin.translatedErrors.unique, alreadyTakenAttributes).required(_strapiHelperPlugin.translatedErrors.required),\n            targetAttribute: yup.lazy(function () {\n              var schema = yup.string().isAllowed((0, _getTrad[\"default\"])('error.attributeName.reserved-name'), reservedNames.attributes);\n\n              if (!['oneWay', 'manyWay'].includes(dataToValidate.nature)) {\n                schema = schema.matches(_attributesRegexes.NAME_REGEX, _strapiHelperPlugin.translatedErrors.regex);\n              }\n\n              return schema.unique(_strapiHelperPlugin.translatedErrors.unique, targetAttributeAlreadyTakenValue).unique((0, _getTrad[\"default\"])('error.validation.relation.targetAttribute-taken'), alreadyTakenTargetContentTypeAttributes).required(_strapiHelperPlugin.translatedErrors.required);\n            }),\n            target: yup.string().required(_strapiHelperPlugin.translatedErrors.required),\n            nature: yup.string().required(),\n            dominant: yup[\"boolean\"]().nullable(),\n            unique: yup[\"boolean\"]().nullable()\n          });\n\n        default:\n          return yup.object().shape(_objectSpread(_objectSpread({}, commonShape), fieldsThatSupportMaxAndMinLengthShape));\n      }\n    },\n    form: {\n      advanced: function advanced(data, type, step) {\n        var targetAttributeValue = (0, _lodash.get)(data, 'targetAttribute', null);\n        var nameValue = (0, _lodash.get)(data, 'name', null);\n        var relationItems = [[_staticFields[\"default\"].divider], [_staticFields[\"default\"][\"private\"]], [_staticFields[\"default\"].unique], [{\n          autoFocus: false,\n          disabled: nameValue === null,\n          name: 'columnName',\n          type: 'addon',\n          addon: nameValue,\n          label: {\n            id: (0, _getTrad[\"default\"])('form.attribute.item.customColumnName')\n          },\n          inputDescription: {\n            id: (0, _getTrad[\"default\"])('form.attribute.item.customColumnName.description')\n          },\n          validations: {}\n        }, {\n          autoFocus: false,\n          disabled: targetAttributeValue === null || targetAttributeValue === '-',\n          name: 'targetColumnName',\n          label: '',\n          type: 'addon',\n          addon: targetAttributeValue,\n          validations: {}\n        }]];\n        var defaultItems = [[_objectSpread(_objectSpread({}, _staticFields[\"default\"][\"default\"]), {}, {\n          type: type === 'email' ? 'email' : 'text'\n        })], [_staticFields[\"default\"].divider], [_staticFields[\"default\"][\"private\"]], [_staticFields[\"default\"].required], [_staticFields[\"default\"].unique]];\n        var dynamiczoneItems = [[_staticFields[\"default\"].required], [_staticFields[\"default\"].divider], [_staticFields[\"default\"].max], [_staticFields[\"default\"].min]];\n\n        if (type === 'component') {\n          if (step === '1') {\n            return {\n              items: _componentForm[\"default\"].advanced('componentToCreate.')\n            };\n          }\n\n          var requiredItem = [[_staticFields[\"default\"].required]];\n          return {\n            items: data.repeatable ? [].concat(dynamiczoneItems) : requiredItem\n          };\n        }\n\n        var items = defaultItems.slice();\n\n        if (type === 'number' && data.type !== 'biginteger') {\n          var _step = data.type === 'decimal' || data.type === 'float' ? 'any' : '1';\n\n          items.splice(0, 1, [{\n            autoFocus: true,\n            name: 'default',\n            type: 'number',\n            step: _step,\n            label: {\n              id: (0, _getTrad[\"default\"])('form.attribute.settings.default')\n            },\n            validations: {}\n          }]);\n        }\n\n        if (type === 'text') {\n          items.splice(1, 0, [{\n            autoFocus: false,\n            label: {\n              id: (0, _getTrad[\"default\"])('form.attribute.item.text.regex')\n            },\n            name: 'regex',\n            type: 'text',\n            validations: {},\n            description: {\n              id: (0, _getTrad[\"default\"])('form.attribute.item.text.regex.description')\n            }\n          }]);\n        } else if (type === 'media') {\n          items.splice(0, 1);\n          items.push([{\n            label: {\n              id: (0, _getTrad[\"default\"])('form.attribute.media.allowed-types')\n            },\n            name: 'allowedTypes',\n            type: 'allowedTypesSelect',\n            value: '',\n            validations: {}\n          }]);\n        } else if (type === 'boolean') {\n          items.splice(0, 1, [_objectSpread(_objectSpread({}, _staticFields[\"default\"][\"default\"]), {}, {\n            type: 'enum',\n            options: [{\n              value: 'true',\n              label: 'TRUE'\n            }, {\n              value: '',\n              label: 'NULL'\n            }, {\n              value: 'false',\n              label: 'FALSE'\n            }],\n            validations: {}\n          })]);\n        } else if (type === 'enumeration') {\n          items.splice(0, 1, [{\n            autoFocus: false,\n            name: 'default',\n            type: 'select',\n            label: {\n              id: (0, _getTrad[\"default\"])('form.attribute.settings.default')\n            },\n            validations: {},\n            options: [/*#__PURE__*/_react[\"default\"].createElement(_reactIntl.FormattedMessage, {\n              key: \"hidden___value__placeholder\",\n              id: \"components.InputSelect.option.placeholder\"\n            }, function (msg) {\n              return /*#__PURE__*/_react[\"default\"].createElement(\"option\", {\n                value: \"\"\n              }, msg);\n            })].concat(data[\"enum\"] ? data[\"enum\"].filter(function (val, index) {\n              return data[\"enum\"].indexOf(val) === index && !(0, _lodash.isEmpty)(val);\n            }).map(function (val) {\n              return /*#__PURE__*/_react[\"default\"].createElement(\"option\", {\n                key: val,\n                value: val\n              }, val);\n            }) : [])\n          }]);\n          items.splice(1, 0, [{\n            label: {\n              id: (0, _getTrad[\"default\"])('form.attribute.item.enumeration.graphql')\n            },\n            name: 'enumName',\n            type: 'text',\n            validations: {},\n            description: {\n              id: (0, _getTrad[\"default\"])('form.attribute.item.enumeration.graphql.description')\n            }\n          }]);\n        } else if (type === 'date') {\n          items.splice(0, 1, [_objectSpread(_objectSpread({}, _staticFields[\"default\"][\"default\"]), {}, {\n            type: data.type || 'date',\n            value: null,\n            withDefaultValue: false,\n            disabled: !data.type,\n            autoFocus: false\n          })]);\n        } else if (type === 'richtext') {\n          items.splice(4, 1);\n        } else if (type === 'uid') {\n          var uidItems = [[_objectSpread(_objectSpread({}, _staticFields[\"default\"][\"default\"]), {}, {\n            disabled: Boolean(data.targetField),\n            type: 'text'\n          })], [_staticFields[\"default\"].divider], [_staticFields[\"default\"][\"private\"]], [_staticFields[\"default\"].required]];\n          items = uidItems;\n        } else if (type === 'json') {\n          items.splice(0, 1);\n        }\n\n        if (!ATTRIBUTES_THAT_DONT_HAVE_MIN_MAX_SETTINGS.includes(type)) {\n          items.push([{\n            autoFocus: false,\n            name: type === 'number' ? 'max' : 'maxLength',\n            type: 'customCheckboxWithChildren',\n            label: {\n              id: (0, _getTrad[\"default\"])(\"form.attribute.item.maximum\".concat(type === 'number' ? '' : 'Length'))\n            },\n            validations: {}\n          }], [{\n            autoFocus: false,\n            name: type === 'number' ? 'min' : 'minLength',\n            type: 'customCheckboxWithChildren',\n            label: {\n              id: (0, _getTrad[\"default\"])(\"form.attribute.item.minimum\".concat(type === 'number' ? '' : 'Length'))\n            },\n            validations: {}\n          }]);\n        }\n\n        if (type === 'dynamiczone') {\n          return {\n            items: dynamiczoneItems\n          };\n        }\n\n        if (type === 'relation') {\n          return {\n            items: relationItems\n          };\n        }\n\n        return {\n          items: items\n        };\n      },\n      base: function base(data, type, step, actionType, attributes) {\n        if (type === 'relation') {\n          return {\n            items: [[{\n              type: 'relation'\n            }]]\n          };\n        }\n\n        var items = [[_staticFields[\"default\"].name]];\n\n        if (type === 'component' && step === '1') {\n          var itemsToConcat = data.createComponent === true ? [[{\n            type: 'spacer'\n          }]].concat(_componentForm[\"default\"].base('componentToCreate.')) : [[{\n            type: 'spacer'\n          }]];\n          return {\n            items: [[_staticFields[\"default\"].createComponent]].concat((0, _toConsumableArray2[\"default\"])(itemsToConcat))\n          };\n        }\n\n        if (type === 'component' && step === '2') {\n          items[0].push({\n            name: 'component',\n            type: 'componentSelect',\n            label: {\n              id: (0, _getTrad[\"default\"])('modalForm.attributes.select-component')\n            },\n            isMultiple: false\n          });\n          items.push([{\n            label: {\n              id: (0, _getTrad[\"default\"])('modalForm.attribute.text.type-selection')\n            },\n            name: 'repeatable',\n            type: 'booleanBox',\n            size: 12,\n            options: [{\n              headerId: (0, _getTrad[\"default\"])('form.attribute.component.option.repeatable'),\n              descriptionId: (0, _getTrad[\"default\"])('form.attribute.component.option.repeatable.description'),\n              value: true\n            }, {\n              headerId: (0, _getTrad[\"default\"])('form.attribute.component.option.single'),\n              descriptionId: (0, _getTrad[\"default\"])('form.attribute.component.option.single.description'),\n              value: false\n            }],\n            validations: {}\n          }]);\n          items.push([{\n            type: 'spacer'\n          }]);\n        }\n\n        if (type === 'text' || type === 'media') {\n          items.push([{\n            label: {\n              id: (0, _getTrad[\"default\"])('modalForm.attribute.text.type-selection')\n            },\n            name: type === 'text' ? 'type' : 'multiple',\n            type: 'booleanBox',\n            size: 12,\n            options: [{\n              headerId: (0, _getTrad[\"default\"])(\"form.attribute.\".concat(type, \".option.\").concat(type === 'text' ? 'short-text' : 'multiple')),\n              descriptionId: (0, _getTrad[\"default\"])(\"form.attribute.\".concat(type, \".option.\").concat(type === 'text' ? 'short-text' : 'multiple', \".description\")),\n              value: type === 'text' ? 'string' : true\n            }, {\n              headerId: (0, _getTrad[\"default\"])(\"form.attribute.\".concat(type, \".option.\").concat(type === 'text' ? 'long-text' : 'single')),\n              descriptionId: (0, _getTrad[\"default\"])(\"form.attribute.\".concat(type, \".option.\").concat(type === 'text' ? 'long-text' : 'single', \".description\")),\n              value: type === 'text' ? 'text' : false\n            }],\n            validations: {}\n          }]);\n          items.push([{\n            type: 'spacer-medium'\n          }]);\n        }\n\n        if (type === 'number') {\n          items[0].push({\n            label: {\n              id: (0, _getTrad[\"default\"])('form.attribute.item.number.type')\n            },\n            name: 'type',\n            type: 'select',\n            options: [{\n              id: 'components.InputSelect.option.placeholder',\n              value: ''\n            }, {\n              id: 'form.attribute.item.number.type.integer',\n              value: 'integer'\n            }, {\n              id: 'form.attribute.item.number.type.biginteger',\n              value: 'biginteger'\n            }, {\n              id: 'form.attribute.item.number.type.decimal',\n              value: 'decimal'\n            }, {\n              id: 'form.attribute.item.number.type.float',\n              value: 'float'\n            }].map(function (_ref, index) {\n              var id = _ref.id,\n                  value = _ref.value;\n              var disabled = index === 0;\n              var tradId = index === 0 ? id : (0, _getTrad[\"default\"])(id);\n              return /*#__PURE__*/_react[\"default\"].createElement(_reactIntl.FormattedMessage, {\n                id: tradId,\n                key: id\n              }, function (msg) {\n                return /*#__PURE__*/_react[\"default\"].createElement(\"option\", {\n                  disabled: disabled,\n                  hidden: disabled,\n                  value: value\n                }, msg);\n              });\n            }),\n            validations: {\n              required: true\n            }\n          });\n        }\n\n        if (type === 'date') {\n          items[0].push({\n            label: {\n              id: (0, _getTrad[\"default\"])('modalForm.attribute.text.type-selection')\n            },\n            name: 'type',\n            type: 'select',\n            options: [{\n              id: 'components.InputSelect.option.placeholder',\n              value: ''\n            }, {\n              id: 'form.attribute.item.date.type.date',\n              value: 'date'\n            }, {\n              id: 'form.attribute.item.date.type.datetime',\n              value: 'datetime'\n            }, // Not sure the ctm supports that one\n            // {\n            //   id: 'form.attribute.item.date.type.timestamp',\n            //   value: 'timestamp',\n            // },\n            {\n              id: 'form.attribute.item.date.type.time',\n              value: 'time'\n            }].map(function (_ref2, index) {\n              var id = _ref2.id,\n                  value = _ref2.value;\n              var disabled = index === 0;\n              var tradId = index === 0 ? id : (0, _getTrad[\"default\"])(id);\n              return /*#__PURE__*/_react[\"default\"].createElement(_reactIntl.FormattedMessage, {\n                id: tradId,\n                key: id\n              }, function (msg) {\n                return /*#__PURE__*/_react[\"default\"].createElement(\"option\", {\n                  disabled: disabled,\n                  hidden: disabled,\n                  value: value\n                }, msg);\n              });\n            }),\n            validations: {\n              required: true\n            }\n          });\n        }\n\n        if (type === 'enumeration') {\n          items.push([{\n            autoFocus: false,\n            name: 'enum',\n            type: 'textarea',\n            size: 8,\n            label: {\n              id: (0, _getTrad[\"default\"])('form.attribute.item.enumeration.rules')\n            },\n            placeholder: {\n              id: (0, _getTrad[\"default\"])('form.attribute.item.enumeration.placeholder')\n            },\n            validations: {\n              required: true\n            }\n          }]);\n        }\n\n        if (type === 'uid') {\n          var options = Object.keys(attributes).filter(function (key) {\n            return ['string', 'text'].includes(attributes[key].type);\n          }).map(function (key) {\n            return {\n              id: key,\n              value: key\n            };\n          });\n          return {\n            items: [[_objectSpread(_objectSpread({}, _staticFields[\"default\"].name), {}, {\n              placeholder: {\n                id: (0, _getTrad[\"default\"])('modalForm.attribute.form.base.name.placeholder')\n              }\n            }), {\n              label: {\n                id: (0, _getTrad[\"default\"])('modalForm.attribute.target-field')\n              },\n              name: 'targetField',\n              type: 'select',\n              options: [{\n                id: (0, _getTrad[\"default\"])('none'),\n                value: ''\n              }].concat((0, _toConsumableArray2[\"default\"])(options)).map(function (option, index) {\n                return (\n                  /*#__PURE__*/\n                  // eslint-disable-next-line react/no-array-index-key\n                  _react[\"default\"].createElement(_react.Fragment, {\n                    key: index\n                  }, index === 0 ? /*#__PURE__*/_react[\"default\"].createElement(_reactIntl.FormattedMessage, {\n                    id: option.id\n                  }, function (msg) {\n                    return /*#__PURE__*/_react[\"default\"].createElement(\"option\", {\n                      value: option.value\n                    }, msg);\n                  }) : /*#__PURE__*/_react[\"default\"].createElement(\"option\", {\n                    value: option.value\n                  }, option.value))\n                );\n              }),\n              validations: {\n                required: true\n              }\n            }]]\n          };\n        }\n\n        return {\n          items: items\n        };\n      }\n    }\n  },\n  contentType: {\n    schema: function schema(alreadyTakenNames, isEditing, ctUid, reservedNames) {\n      var takenNames = isEditing ? alreadyTakenNames.filter(function (uid) {\n        return uid !== ctUid;\n      }) : alreadyTakenNames;\n      return yup.object().shape({\n        name: yup.string().unique(_strapiHelperPlugin.translatedErrors.unique, takenNames, _createUid.createUid).isAllowed((0, _getTrad[\"default\"])('error.contentTypeName.reserved-name'), reservedNames.models).required(_strapiHelperPlugin.translatedErrors.required),\n        collectionName: yup.string(),\n        draftAndPublish: yup[\"boolean\"](),\n        kind: yup.string().oneOf(['singleType', 'collectionType'])\n      });\n    },\n    form: {\n      base: function base() {\n        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var type = arguments.length > 1 ? arguments[1] : undefined;\n        var step = arguments.length > 2 ? arguments[2] : undefined;\n        var actionType = arguments.length > 3 ? arguments[3] : undefined;\n        var items = [[{\n          autoFocus: true,\n          name: 'name',\n          type: 'text',\n          label: {\n            id: \"\".concat(_pluginId[\"default\"], \".contentType.displayName.label\")\n          },\n          validations: {\n            required: true\n          }\n        }]];\n\n        if (actionType === 'create') {\n          items[0].push({\n            description: {\n              id: \"\".concat(_pluginId[\"default\"], \".contentType.UID.description\")\n            },\n            label: 'UID',\n            name: 'uid',\n            type: 'text',\n            readOnly: true,\n            disabled: true,\n            value: data.name ? (0, _createUid.nameToSlug)(data.name) : ''\n          });\n        }\n\n        if (actionType === 'edit') {\n          items[0].push({\n            label: {\n              id: (0, _getTrad[\"default\"])('modalForm.attribute.text.type-selection')\n            },\n            name: 'kind',\n            type: 'booleanBox',\n            size: 12,\n            onChangeCallback: function onChangeCallback() {\n              return strapi.notification.toggle({\n                type: 'info',\n                message: {\n                  id: (0, _getTrad[\"default\"])('contentType.kind.change.warning')\n                }\n              });\n            },\n            options: [{\n              headerId: (0, _getTrad[\"default\"])('menu.section.models.name.singular'),\n              descriptionId: (0, _getTrad[\"default\"])('form.button.collection-type.description'),\n              value: 'collectionType'\n            }, {\n              headerId: (0, _getTrad[\"default\"])('menu.section.single-types.name.singular'),\n              descriptionId: (0, _getTrad[\"default\"])('form.button.single-type.description'),\n              value: 'singleType'\n            }],\n            validations: {}\n          });\n        }\n\n        return {\n          items: items\n        };\n      },\n      advanced: function advanced() {\n        return {\n          items: [[{\n            type: 'dividerDraftPublish'\n          }], [{\n            label: {\n              id: \"\".concat(_pluginId[\"default\"], \".contentType.draftAndPublish.label\")\n            },\n            description: {\n              id: \"\".concat(_pluginId[\"default\"], \".contentType.draftAndPublish.description\")\n            },\n            name: 'draftAndPublish',\n            type: 'bool',\n            validations: {}\n          }], [_staticFields[\"default\"].divider], [{\n            autoFocus: true,\n            label: {\n              id: \"\".concat(_pluginId[\"default\"], \".contentType.collectionName.label\")\n            },\n            description: {\n              id: \"\".concat(_pluginId[\"default\"], \".contentType.collectionName.description\")\n            },\n            name: 'collectionName',\n            type: 'text',\n            validations: {}\n          }]]\n        };\n      }\n    }\n  },\n  component: {\n    schema: function schema(alreadyTakenAttributes, componentCategory, reservedNames) {\n      var isEditing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var compoUid = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      var takenNames = isEditing ? alreadyTakenAttributes.filter(function (uid) {\n        return uid !== compoUid;\n      }) : alreadyTakenAttributes;\n      return yup.object().shape({\n        name: yup.string().unique(_strapiHelperPlugin.translatedErrors.unique, takenNames, _createUid.createComponentUid, componentCategory).isAllowed((0, _getTrad[\"default\"])('error.contentTypeName.reserved-name'), reservedNames.models).required(_strapiHelperPlugin.translatedErrors.required),\n        category: yup.string().matches(_attributesRegexes.CATEGORY_NAME_REGEX, _strapiHelperPlugin.translatedErrors.regex).required(_strapiHelperPlugin.translatedErrors.required),\n        icon: yup.string().required(_strapiHelperPlugin.translatedErrors.required),\n        collectionName: yup.string().nullable()\n      });\n    },\n    form: {\n      advanced: function advanced() {\n        return {\n          items: _componentForm[\"default\"].advanced()\n        };\n      },\n      base: function base() {\n        return {\n          items: _componentForm[\"default\"].base()\n        };\n      }\n    }\n  },\n  addComponentToDynamicZone: {\n    form: {\n      advanced: function advanced(data, type, step) {\n        return forms.attribute.form.advanced(data, 'component', step);\n      },\n      base: function base(data) {\n        var isCreatingComponent = (0, _lodash.get)(data, 'createComponent', false);\n        var itemsToConcat = isCreatingComponent ? [[{\n          type: 'spacer'\n        }]].concat(_componentForm[\"default\"].base('componentToCreate.')) : [[{\n          type: 'spacer'\n        }], [{\n          type: 'pushRight',\n          size: 6\n        }, {\n          name: 'components',\n          type: 'componentSelect',\n          label: {\n            id: (0, _getTrad[\"default\"])('modalForm.attributes.select-components')\n          },\n          isMultiple: true\n        }], [{\n          type: 'spacer-small'\n        }]];\n        return {\n          items: [[_staticFields[\"default\"].createComponent]].concat((0, _toConsumableArray2[\"default\"])(itemsToConcat))\n        };\n      }\n    }\n  },\n  editCategory: {\n    schema: function schema(allCategories, initialData) {\n      var allowedCategories = allCategories.filter(function (cat) {\n        return cat !== initialData.name;\n      }).map(function (cat) {\n        return (0, _lodash.toLower)(cat);\n      });\n      return yup.object().shape({\n        name: yup.string().matches(_attributesRegexes.CATEGORY_NAME_REGEX, _strapiHelperPlugin.translatedErrors.regex).unique(_strapiHelperPlugin.translatedErrors.unique, allowedCategories, _lodash.toLower).required(_strapiHelperPlugin.translatedErrors.required)\n      });\n    },\n    form: {\n      base: function base() {\n        return {\n          items: [[_objectSpread(_objectSpread({}, _staticFields[\"default\"].name), {}, {\n            description: {\n              id: (0, _getTrad[\"default\"])('modalForm.editCategory.base.name.description')\n            }\n          })]]\n        };\n      }\n    }\n  }\n};\nvar _default = forms;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["D:/webstorm_projects/redcat_backend/.cache/plugins/strapi-plugin-content-type-builder/admin/src/containers/FormModal/utils/forms.js"],"names":["yup","addMethod","mixed","test","errorsTrads","required","value","undefined","string","message","alreadyTakenAttributes","validator","category","includes","toLowerCase","array","some","reservedNames","max","min","Number","isNaN","every","ENUM_REGEX","RegExp","ATTRIBUTES_THAT_DONT_HAVE_MIN_MAX_SETTINGS","forms","attribute","schema","currentSchema","attributeType","dataToValidate","isEditing","attributeToEditName","initialData","alreadyTakenTargetContentTypeAttributes","Object","keys","filter","targetAttributeAlreadyTakenValue","name","target","uid","targetAttribute","commonShape","unique","matches","NAME_REGEX","regex","isAllowed","attributes","type","nullable","numberTypeShape","lazy","number","integer","positive","when","fieldsThatSupportMaxAndMinLengthShape","maxLength","minLength","object","shape","component","of","values","filtered","Set","length","matchesEnumRegex","hasNotEmptyValues","enumName","isValidRegExpPattern","isInferior","defaultType","nature","dominant","form","advanced","data","step","targetAttributeValue","nameValue","relationItems","fields","divider","autoFocus","disabled","addon","label","id","inputDescription","validations","defaultItems","dynamiczoneItems","items","componentForm","requiredItem","repeatable","slice","splice","description","push","options","msg","concat","val","index","indexOf","map","withDefaultValue","uidItems","Boolean","targetField","base","actionType","itemsToConcat","createComponent","isMultiple","size","headerId","descriptionId","tradId","placeholder","key","option","contentType","alreadyTakenNames","ctUid","takenNames","createUid","models","collectionName","draftAndPublish","kind","oneOf","pluginId","readOnly","onChangeCallback","strapi","notification","toggle","componentCategory","compoUid","createComponentUid","CATEGORY_NAME_REGEX","icon","addComponentToDynamicZone","isCreatingComponent","editCategory","allCategories","allowedCategories","cat","toLower"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA;;AACA;AAEAA,GAAG,CAACC,SAAJ,CAAcD,GAAG,CAACE,KAAlB,EAAyB,SAAzB,EAAoC,YAAW;AAC7C,SAAO,KAAKC,IAAL,CAAU,SAAV,EAAqBC,qCAAYC,QAAjC,EAA2C,UAAAC,KAAK;AAAA,WAAIA,KAAK,KAAKC,SAAd;AAAA,GAAhD,CAAP;AACD,CAFD;AAIAP,GAAG,CAACC,SAAJ,CAAcD,GAAG,CAACQ,MAAlB,EAA0B,QAA1B,EAAoC,UAClCC,OADkC,EAElCC,sBAFkC,EAGlCC,SAHkC,EAKlC;AAAA,MADAC,QACA,uEADW,EACX;AACA,SAAO,KAAKT,IAAL,CAAU,QAAV,EAAoBM,OAApB,EAA6B,UAASD,MAAT,EAAiB;AACnD,QAAI,CAACA,MAAL,EAAa;AACX,aAAO,KAAP;AACD;;AAED,WAAO,CAACE,sBAAsB,CAACG,QAAvB,CACN,OAAOF,SAAP,KAAqB,UAArB,GAAkCA,SAAS,CAACH,MAAD,EAASI,QAAT,CAA3C,GAAgEJ,MAAM,CAACM,WAAP,EAD1D,CAAR;AAGD,GARM,CAAP;AASD,CAfD;AAiBAd,GAAG,CAACC,SAAJ,CAAcD,GAAG,CAACe,KAAlB,EAAyB,mBAAzB,EAA8C,UAASN,OAAT,EAAkB;AAC9D,SAAO,KAAKN,IAAL,CAAU,mBAAV,EAA+BM,OAA/B,EAAwC,UAASM,KAAT,EAAgB;AAC7D,WAAO,CAACA,KAAK,CAACC,IAAN,CAAW,UAAAV,KAAK,EAAI;AAC1B,aAAO,qBAAQA,KAAR,CAAP;AACD,KAFO,CAAR;AAGD,GAJM,CAAP;AAKD,CAND;AAQAN,GAAG,CAACC,SAAJ,CAAcD,GAAG,CAACQ,MAAlB,EAA0B,WAA1B,EAAuC,UAASC,OAAT,EAAkBQ,aAAlB,EAAiC;AACtE,SAAO,KAAKd,IAAL,CAAU,WAAV,EAAuBM,OAAvB,EAAgC,UAASD,MAAT,EAAiB;AACtD,QAAI,CAACA,MAAL,EAAa;AACX,aAAO,KAAP;AACD;;AAED,WAAO,CAACS,aAAa,CAACJ,QAAd,CAAuB,qBAAQ,kBAAKL,MAAL,CAAR,CAAvB,CAAR;AACD,GANM,CAAP;AAOD,CARD;AAUAR,GAAG,CAACC,SAAJ,CAAcD,GAAG,CAACQ,MAAlB,EAA0B,YAA1B,EAAwC,UAASC,OAAT,EAAkBS,GAAlB,EAAuB;AAC7D,SAAO,KAAKf,IAAL,CAAU,YAAV,EAAwBM,OAAxB,EAAiC,UAASU,GAAT,EAAc;AACpD,QAAI,CAACA,GAAL,EAAU;AACR,aAAO,KAAP;AACD;;AAED,QAAIC,MAAM,CAACC,KAAP,CAAa,sBAASF,GAAT,CAAb,CAAJ,EAAiC;AAC/B,aAAO,IAAP;AACD;;AAED,WAAO,sBAASD,GAAT,KAAiB,sBAASC,GAAT,CAAxB;AACD,GAVM,CAAP;AAWD,CAZD;AAcAnB,GAAG,CAACC,SAAJ,CAAcD,GAAG,CAACe,KAAlB,EAAyB,kBAAzB,EAA6C,UAASN,OAAT,EAAkB;AAC7D,SAAO,KAAKN,IAAL,CAAU,kBAAV,EAA8BM,OAA9B,EAAuC,UAASM,KAAT,EAAgB;AAC5D,WAAOA,KAAK,CAACO,KAAN,CAAY,UAAAhB,KAAK,EAAI;AAC1B,aAAOiB,8BAAWpB,IAAX,CAAgBG,KAAhB,CAAP;AACD,KAFM,CAAP;AAGD,GAJM,CAAP;AAKD,CAND;AAQAN,GAAG,CAACC,SAAJ,CAAcD,GAAG,CAACQ,MAAlB,EAA0B,sBAA1B,EAAkD,UAASC,OAAT,EAAkB;AAClE,SAAO,KAAKN,IAAL,CAAU,sBAAV,EAAkCM,OAAlC,EAA2C,UAASD,MAAT,EAAiB;AACjE,WAAO,IAAIgB,MAAJ,CAAWhB,MAAX,MAAuB,IAA9B;AACD,GAFM,CAAP;AAGD,CAJD;AAMA,IAAMiB,0CAA0C,GAAG,CAAC,SAAD,EAAY,MAAZ,EAAoB,aAApB,EAAmC,OAAnC,CAAnD;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,SAAS,EAAE;AACTC,IAAAA,MADS,kBAEPC,aAFO,EAGPC,aAHO,EAIPC,cAJO,EAKPC,SALO,EAMPC,mBANO,EAOPC,WAPO,EAQPC,uCARO,EASPlB,aATO,EAUP;AACA,UAAMP,sBAAsB,GAAG0B,MAAM,CAACC,IAAP,CAC7B,iBAAIR,aAAJ,EAAmB,CAAC,QAAD,EAAW,YAAX,CAAnB,EAA6C,EAA7C,CAD6B,EAE7BS,MAF6B,CAEtB,UAAAX,SAAS,EAAI;AACpB,YAAIK,SAAJ,EAAe;AACb,iBAAOL,SAAS,KAAKM,mBAArB;AACD;;AAED,eAAO,IAAP;AACD,OAR8B,CAA/B,CADA,CAWA;;AACA,UAAIM,gCAAgC,GAAGR,cAAc,CAACS,IAAf,iDAC/B9B,sBAD+B,IACPqB,cAAc,CAACS,IADR,KAEnC9B,sBAFJ;;AAIA,UACEsB,SAAS,IACTF,aAAa,KAAK,UADlB,IAEAC,cAAc,CAACU,MAAf,KAA0BZ,aAAa,CAACa,GAH1C,EAIE;AACAH,QAAAA,gCAAgC,GAAGA,gCAAgC,CAACD,MAAjC,CACjC,UAAAX,SAAS;AAAA,iBAAIA,SAAS,KAAKO,WAAW,CAACS,eAA9B;AAAA,SADwB,CAAnC;AAGD,OAxBD,CA0BA;;;AACA,UAAMC,WAAW,GAAG;AAClBJ,QAAAA,IAAI,EAAExC,GAAG,CACNQ,MADG,GAEHqC,MAFG,CAEIzC,qCAAYyC,MAFhB,EAEwBnC,sBAFxB,EAGHoC,OAHG,CAGKC,6BAHL,EAGiB3C,qCAAY4C,KAH7B,EAIHC,SAJG,CAIO,yBAAQ,mCAAR,CAJP,EAIqDhC,aAAa,CAACiC,UAJnE,EAKH7C,QALG,CAKMD,qCAAYC,QALlB,CADY;AAOlB8C,QAAAA,IAAI,EAAEnD,GAAG,CAACQ,MAAJ,GAAaH,QAAb,CAAsBD,qCAAYC,QAAlC,CAPY;AAQlB,mBAASL,GAAG,CAACQ,MAAJ,GAAa4C,QAAb,EARS;AASlBP,QAAAA,MAAM,EAAE7C,GAAG,WAAH,GAAcoD,QAAd,EATU;AAUlB/C,QAAAA,QAAQ,EAAEL,GAAG,WAAH;AAVQ,OAApB;AAYA,UAAMqD,eAAe,GAAG;AACtBnC,QAAAA,GAAG,EAAElB,GAAG,CAACsD,IAAJ,CAAS,YAAM;AAClB,cAAI1B,MAAM,GAAG5B,GAAG,CAACuD,MAAJ,EAAb;;AAEA,cACEzB,aAAa,KAAK,SAAlB,IACAA,aAAa,KAAK,YADlB,IAEAA,aAAa,KAAK,aAHpB,EAIE;AACAF,YAAAA,MAAM,GAAGA,MAAM,CAAC4B,OAAP,EAAT;AACD;;AAED,cAAI1B,aAAa,KAAK,aAAtB,EAAqC;AACnCF,YAAAA,MAAM,GAAGA,MAAM,CAAC6B,QAAP,EAAT;AACD;;AAED,iBAAO7B,MAAM,CAACwB,QAAP,EAAP;AACD,SAhBI,CADiB;AAkBtBjC,QAAAA,GAAG,EAAEnB,GAAG,CAACsD,IAAJ,CAAS,YAAM;AAClB,cAAI1B,MAAM,GAAG5B,GAAG,CAACuD,MAAJ,EAAb;;AAEA,cACEzB,aAAa,KAAK,SAAlB,IACAA,aAAa,KAAK,YADlB,IAEAA,aAAa,KAAK,aAHpB,EAIE;AACAF,YAAAA,MAAM,GAAGA,MAAM,CAAC4B,OAAP,EAAT;AACD;;AAED,cAAI1B,aAAa,KAAK,aAAtB,EAAqC;AACnCF,YAAAA,MAAM,GAAGA,MAAM,CAAC6B,QAAP,EAAT;AACD;;AAED,iBAAO7B,MAAM,CACVwB,QADI,GAEJM,IAFI,CAEC,KAFD,EAEQ,UAACxC,GAAD,EAAMU,MAAN,EAAiB;AAC5B,gBAAIV,GAAJ,EAAS;AACP,qBAAOU,MAAM,CAACV,GAAP,CAAWA,GAAX,EAAgB,yBAAQ,4BAAR,CAAhB,CAAP;AACD;;AAED,mBAAOU,MAAP;AACD,WARI,EASJwB,QATI,EAAP;AAUD,SAzBI;AAlBiB,OAAxB;AA6CA,UAAMO,qCAAqC,GAAG;AAC5CC,QAAAA,SAAS,EAAE5D,GAAG,CACXuD,MADQ,GAERC,OAFQ,GAGRJ,QAHQ,EADiC;AAK5CS,QAAAA,SAAS,EAAE7D,GAAG,CACXuD,MADQ,GAERC,OAFQ,GAGRE,IAHQ,CAGH,WAHG,EAGU,UAACE,SAAD,EAAYhC,MAAZ,EAAuB;AACxC,cAAIgC,SAAJ,EAAe;AACb,mBAAOhC,MAAM,CAACV,GAAP,CAAW0C,SAAX,EAAsB,yBAAQ,4BAAR,CAAtB,CAAP;AACD;;AAED,iBAAOhC,MAAP;AACD,SATQ,EAURwB,QAVQ;AALiC,OAA9C;;AAkBA,cAAQtB,aAAR;AACE,aAAK,WAAL;AACE,iBAAO9B,GAAG,CAAC8D,MAAJ,GAAaC,KAAb,iCACFnB,WADE;AAELoB,YAAAA,SAAS,EAAEhE,GAAG,CAACQ,MAAJ,GAAaH,QAAb,CAAsBD,qCAAYC,QAAlC;AAFN,aAGFgD,eAHE,EAAP;;AAKF,aAAK,aAAL;AACE,iBAAOrD,GAAG,CAAC8D,MAAJ,GAAaC,KAAb,iCACFnB,WADE,GAEFS,eAFE,EAAP;;AAIF,aAAK,aAAL;AACE,iBAAOrD,GAAG,CAAC8D,MAAJ,GAAaC,KAAb,CAAmB;AACxBvB,YAAAA,IAAI,EAAExC,GAAG,CACNQ,MADG,GAEHyC,SAFG,CAEO,yBAAQ,mCAAR,CAFP,EAEqDhC,aAAa,CAACiC,UAFnE,EAGHL,MAHG,CAGIzC,qCAAYyC,MAHhB,EAGwBnC,sBAHxB,EAIHoC,OAJG,CAIKvB,6BAJL,EAIiBnB,qCAAY4C,KAJ7B,EAKH3C,QALG,CAKMD,qCAAYC,QALlB,CADkB;AAOxB8C,YAAAA,IAAI,EAAEnD,GAAG,CAACQ,MAAJ,GAAaH,QAAb,CAAsBD,qCAAYC,QAAlC,CAPkB;AAQxB,uBAASL,GAAG,CAACQ,MAAJ,GAAa4C,QAAb,EARe;AASxBP,YAAAA,MAAM,EAAE7C,GAAG,WAAH,GAAcoD,QAAd,EATgB;AAUxB/C,YAAAA,QAAQ,EAAEL,GAAG,WAAH,EAVc;AAWxB,oBAAMA,GAAG,CACNe,KADG,GAEHkD,EAFG,CAEAjE,GAAG,CAACQ,MAAJ,EAFA,EAGHW,GAHG,CAGC,CAHD,EAGIf,qCAAYe,GAHhB,EAIHhB,IAJG,CAIE;AACJqC,cAAAA,IAAI,EAAE,qBADF;AAEJ/B,cAAAA,OAAO,EAAE,yBAAQ,iCAAR,CAFL;AAGJN,cAAAA,IAAI,EAAE,cAAA+D,MAAM,EAAI;AACd,oBAAMC,QAAQ,uCAAO,IAAIC,GAAJ,CAAQF,MAAR,CAAP,CAAd;AAEA,uBAAOC,QAAQ,CAACE,MAAT,KAAoBH,MAAM,CAACG,MAAlC;AACD;AAPG,aAJF,EAaHC,gBAbG,CAaclE,qCAAY4C,KAb1B,EAcHuB,iBAdG,CAce,+BAdf,EAcgDxC,cAAc,QAd9D,CAXkB;AA0BxByC,YAAAA,QAAQ,EAAExE,GAAG,CAACQ,MAAJ,GAAa4C,QAAb;AA1Bc,WAAnB,CAAP;;AA4BF,aAAK,MAAL;AACE,iBAAOpD,GAAG,CAAC8D,MAAJ,GAAaC,KAAb,+CACFnB,WADE,GAEFe,qCAFE;AAGLX,YAAAA,KAAK,EAAEhD,GAAG,CACPQ,MADI,GAEJiE,oBAFI,CAEiB,yBAAQ,wBAAR,CAFjB,EAGJrB,QAHI;AAHF,aAAP;;AAQF,aAAK,QAAL;AACA,aAAK,SAAL;AACA,aAAK,YAAL;AACA,aAAK,OAAL;AACA,aAAK,SAAL;AAAgB;AACd,gBAAIrB,cAAc,CAACoB,IAAf,KAAwB,YAA5B,EAA0C;AACxC,qBAAOnD,GAAG,CAAC8D,MAAJ,GAAaC,KAAb,iCACFnB,WADE;AAEL,2BAAS5C,GAAG,CACTQ,MADM,GAEN4C,QAFM,GAGNN,OAHM,CAGE,OAHF,CAFJ;AAML3B,gBAAAA,GAAG,EAAEnB,GAAG,CACLQ,MADE,GAEF4C,QAFE,GAGFN,OAHE,CAGM,OAHN,EAIFY,IAJE,CAIG,KAJH,EAIU,UAACxC,GAAD,EAAMU,MAAN,EAAiB;AAC5B,sBAAIV,GAAJ,EAAS;AACP,2BAAOU,MAAM,CAAC8C,UAAP,CAAkB,yBAAQ,4BAAR,CAAlB,EAAyDxD,GAAzD,CAAP;AACD;;AAED,yBAAOU,MAAP;AACD,iBAVE,CANA;AAkBLV,gBAAAA,GAAG,EAAElB,GAAG,CACLQ,MADE,GAEF4C,QAFE,GAGFN,OAHE,CAGM,OAHN;AAlBA,iBAAP;AAuBD;;AAED,gBAAI6B,WAAW,GAAG3E,GAAG,CAACuD,MAAJ,EAAlB;;AAEA,gBAAIxB,cAAc,CAACoB,IAAf,KAAwB,SAA5B,EAAuC;AACrCwB,cAAAA,WAAW,GAAG3E,GAAG,CAACuD,MAAJ,GAAaC,OAAb,CAAqB,0CAArB,CAAd;AACD;;AAED,mBAAOxD,GAAG,CAAC8D,MAAJ,GAAaC,KAAb,iCACFnB,WADE;AAEL,yBAAS+B,WAAW,CAACvB,QAAZ;AAFJ,eAGFC,eAHE,EAAP;AAKD;;AACD,aAAK,UAAL;AACE,iBAAOrD,GAAG,CAAC8D,MAAJ,GAAaC,KAAb,CAAmB;AACxBvB,YAAAA,IAAI,EAAExC,GAAG,CACNQ,MADG,GAEHyC,SAFG,CAEO,yBAAQ,mCAAR,CAFP,EAEqDhC,aAAa,CAACiC,UAFnE,EAGHJ,OAHG,CAGKC,6BAHL,EAGiB3C,qCAAY4C,KAH7B,EAIHH,MAJG,CAIIzC,qCAAYyC,MAJhB,EAIwBnC,sBAJxB,EAKHL,QALG,CAKMD,qCAAYC,QALlB,CADkB;AAOxBsC,YAAAA,eAAe,EAAE3C,GAAG,CAACsD,IAAJ,CAAS,YAAM;AAC9B,kBAAI1B,MAAM,GAAG5B,GAAG,CACbQ,MADU,GAEVyC,SAFU,CAEA,yBAAQ,mCAAR,CAFA,EAE8ChC,aAAa,CAACiC,UAF5D,CAAb;;AAIA,kBAAI,CAAC,CAAC,QAAD,EAAW,SAAX,EAAsBrC,QAAtB,CAA+BkB,cAAc,CAAC6C,MAA9C,CAAL,EAA4D;AAC1DhD,gBAAAA,MAAM,GAAGA,MAAM,CAACkB,OAAP,CAAeC,6BAAf,EAA2B3C,qCAAY4C,KAAvC,CAAT;AACD;;AAED,qBAAOpB,MAAM,CACViB,MADI,CACGzC,qCAAYyC,MADf,EACuBN,gCADvB,EAEJM,MAFI,CAGH,yBAAQ,iDAAR,CAHG,EAIHV,uCAJG,EAMJ9B,QANI,CAMKD,qCAAYC,QANjB,CAAP;AAOD,aAhBgB,CAPO;AAwBxBoC,YAAAA,MAAM,EAAEzC,GAAG,CAACQ,MAAJ,GAAaH,QAAb,CAAsBD,qCAAYC,QAAlC,CAxBgB;AAyBxBuE,YAAAA,MAAM,EAAE5E,GAAG,CAACQ,MAAJ,GAAaH,QAAb,EAzBgB;AA0BxBwE,YAAAA,QAAQ,EAAE7E,GAAG,WAAH,GAAcoD,QAAd,EA1Bc;AA2BxBP,YAAAA,MAAM,EAAE7C,GAAG,WAAH,GAAcoD,QAAd;AA3BgB,WAAnB,CAAP;;AA6BF;AACE,iBAAOpD,GAAG,CAAC8D,MAAJ,GAAaC,KAAb,iCACFnB,WADE,GAEFe,qCAFE,EAAP;AA5HJ;AAiID,KAjPQ;AAkPTmB,IAAAA,IAAI,EAAE;AACJC,MAAAA,QADI,oBACKC,IADL,EACW7B,IADX,EACiB8B,IADjB,EACuB;AACzB,YAAMC,oBAAoB,GAAG,iBAAIF,IAAJ,EAAU,iBAAV,EAA6B,IAA7B,CAA7B;AACA,YAAMG,SAAS,GAAG,iBAAIH,IAAJ,EAAU,MAAV,EAAkB,IAAlB,CAAlB;AACA,YAAMI,aAAa,GAAG,CACpB,CAACC,yBAAOC,OAAR,CADoB,EAEpB,CAACD,mCAAD,CAFoB,EAGpB,CAACA,yBAAOxC,MAAR,CAHoB,EAIpB,CACE;AACE0C,UAAAA,SAAS,EAAE,KADb;AAEEC,UAAAA,QAAQ,EAAEL,SAAS,KAAK,IAF1B;AAGE3C,UAAAA,IAAI,EAAE,YAHR;AAIEW,UAAAA,IAAI,EAAE,OAJR;AAKEsC,UAAAA,KAAK,EAAEN,SALT;AAMEO,UAAAA,KAAK,EAAE;AACLC,YAAAA,EAAE,EAAE,yBAAQ,sCAAR;AADC,WANT;AASEC,UAAAA,gBAAgB,EAAE;AAChBD,YAAAA,EAAE,EAAE,yBAAQ,kDAAR;AADY,WATpB;AAYEE,UAAAA,WAAW,EAAE;AAZf,SADF,EAeE;AACEN,UAAAA,SAAS,EAAE,KADb;AAEEC,UAAAA,QAAQ,EAAEN,oBAAoB,KAAK,IAAzB,IAAiCA,oBAAoB,KAAK,GAFtE;AAGE1C,UAAAA,IAAI,EAAE,kBAHR;AAIEkD,UAAAA,KAAK,EAAE,EAJT;AAKEvC,UAAAA,IAAI,EAAE,OALR;AAMEsC,UAAAA,KAAK,EAAEP,oBANT;AAOEW,UAAAA,WAAW,EAAE;AAPf,SAfF,CAJoB,CAAtB;AA8BA,YAAMC,YAAY,GAAG,CACnB,iCAEOT,mCAFP;AAGIlC,UAAAA,IAAI,EAAEA,IAAI,KAAK,OAAT,GAAmB,OAAnB,GAA6B;AAHvC,WADmB,EAOnB,CAACkC,yBAAOC,OAAR,CAPmB,EAQnB,CAACD,mCAAD,CARmB,EASnB,CAACA,yBAAOhF,QAAR,CATmB,EAUnB,CAACgF,yBAAOxC,MAAR,CAVmB,CAArB;AAYA,YAAMkD,gBAAgB,GAAG,CAAC,CAACV,yBAAOhF,QAAR,CAAD,EAAoB,CAACgF,yBAAOC,OAAR,CAApB,EAAsC,CAACD,yBAAOnE,GAAR,CAAtC,EAAoD,CAACmE,yBAAOlE,GAAR,CAApD,CAAzB;;AAEA,YAAIgC,IAAI,KAAK,WAAb,EAA0B;AACxB,cAAI8B,IAAI,KAAK,GAAb,EAAkB;AAChB,mBAAO;AACLe,cAAAA,KAAK,EAAEC,0BAAclB,QAAd,CAAuB,oBAAvB;AADF,aAAP;AAGD;;AACD,cAAMmB,YAAY,GAAG,CAAC,CAACb,yBAAOhF,QAAR,CAAD,CAArB;AAEA,iBAAO;AACL2F,YAAAA,KAAK,EAAEhB,IAAI,CAACmB,UAAL,aAAsBJ,gBAAtB,IAA0CG;AAD5C,WAAP;AAGD;;AAED,YAAIF,KAAK,GAAGF,YAAY,CAACM,KAAb,EAAZ;;AAEA,YAAIjD,IAAI,KAAK,QAAT,IAAqB6B,IAAI,CAAC7B,IAAL,KAAc,YAAvC,EAAqD;AACnD,cAAM8B,KAAI,GAAGD,IAAI,CAAC7B,IAAL,KAAc,SAAd,IAA2B6B,IAAI,CAAC7B,IAAL,KAAc,OAAzC,GAAmD,KAAnD,GAA2D,GAAxE;;AAEA6C,UAAAA,KAAK,CAACK,MAAN,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CACjB;AACEd,YAAAA,SAAS,EAAE,IADb;AAEE/C,YAAAA,IAAI,EAAE,SAFR;AAGEW,YAAAA,IAAI,EAAE,QAHR;AAIE8B,YAAAA,IAAI,EAAJA,KAJF;AAKES,YAAAA,KAAK,EAAE;AACLC,cAAAA,EAAE,EAAE,yBAAQ,iCAAR;AADC,aALT;AAQEE,YAAAA,WAAW,EAAE;AARf,WADiB,CAAnB;AAYD;;AAED,YAAI1C,IAAI,KAAK,MAAb,EAAqB;AACnB6C,UAAAA,KAAK,CAACK,MAAN,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CACjB;AACEd,YAAAA,SAAS,EAAE,KADb;AAEEG,YAAAA,KAAK,EAAE;AACLC,cAAAA,EAAE,EAAE,yBAAQ,gCAAR;AADC,aAFT;AAKEnD,YAAAA,IAAI,EAAE,OALR;AAMEW,YAAAA,IAAI,EAAE,MANR;AAOE0C,YAAAA,WAAW,EAAE,EAPf;AAQES,YAAAA,WAAW,EAAE;AACXX,cAAAA,EAAE,EAAE,yBAAQ,4CAAR;AADO;AARf,WADiB,CAAnB;AAcD,SAfD,MAeO,IAAIxC,IAAI,KAAK,OAAb,EAAsB;AAC3B6C,UAAAA,KAAK,CAACK,MAAN,CAAa,CAAb,EAAgB,CAAhB;AACAL,UAAAA,KAAK,CAACO,IAAN,CAAW,CACT;AACEb,YAAAA,KAAK,EAAE;AACLC,cAAAA,EAAE,EAAE,yBAAQ,oCAAR;AADC,aADT;AAIEnD,YAAAA,IAAI,EAAE,cAJR;AAKEW,YAAAA,IAAI,EAAE,oBALR;AAME7C,YAAAA,KAAK,EAAE,EANT;AAOEuF,YAAAA,WAAW,EAAE;AAPf,WADS,CAAX;AAWD,SAbM,MAaA,IAAI1C,IAAI,KAAK,SAAb,EAAwB;AAC7B6C,UAAAA,KAAK,CAACK,MAAN,CAAa,CAAb,EAAgB,CAAhB,EAAmB,iCAEZhB,mCAFY;AAGflC,YAAAA,IAAI,EAAE,MAHS;AAIfqD,YAAAA,OAAO,EAAE,CACP;AAAElG,cAAAA,KAAK,EAAE,MAAT;AAAiBoF,cAAAA,KAAK,EAAE;AAAxB,aADO,EAEP;AAAEpF,cAAAA,KAAK,EAAE,EAAT;AAAaoF,cAAAA,KAAK,EAAE;AAApB,aAFO,EAGP;AAAEpF,cAAAA,KAAK,EAAE,OAAT;AAAkBoF,cAAAA,KAAK,EAAE;AAAzB,aAHO,CAJM;AASfG,YAAAA,WAAW,EAAE;AATE,aAAnB;AAYD,SAbM,MAaA,IAAI1C,IAAI,KAAK,aAAb,EAA4B;AACjC6C,UAAAA,KAAK,CAACK,MAAN,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CACjB;AACEd,YAAAA,SAAS,EAAE,KADb;AAEE/C,YAAAA,IAAI,EAAE,SAFR;AAGEW,YAAAA,IAAI,EAAE,QAHR;AAIEuC,YAAAA,KAAK,EAAE;AACLC,cAAAA,EAAE,EAAE,yBAAQ,iCAAR;AADC,aAJT;AAOEE,YAAAA,WAAW,EAAE,EAPf;AAQEW,YAAAA,OAAO,EAAE,cACP,gCAAC,2BAAD;AACE,cAAA,GAAG,EAAC,6BADN;AAEE,cAAA,EAAE,EAAC;AAFL,eAIG,UAAAC,GAAG;AAAA,kCAAI;AAAQ,gBAAA,KAAK,EAAC;AAAd,iBAAkBA,GAAlB,CAAJ;AAAA,aAJN,CADO,EAOPC,MAPO,CAQP1B,IAAI,QAAJ,GACIA,IAAI,QAAJ,CACG1C,MADH,CACU,UAACqE,GAAD,EAAMC,KAAN;AAAA,qBAAgB5B,IAAI,QAAJ,CAAU6B,OAAV,CAAkBF,GAAlB,MAA2BC,KAA3B,IAAoC,CAAC,qBAAQD,GAAR,CAArD;AAAA,aADV,EAEGG,GAFH,CAEO,UAAAH,GAAG;AAAA,kCACN;AAAQ,gBAAA,GAAG,EAAEA,GAAb;AAAkB,gBAAA,KAAK,EAAEA;AAAzB,iBACGA,GADH,CADM;AAAA,aAFV,CADJ,GAQI,EAhBG;AARX,WADiB,CAAnB;AA6BAX,UAAAA,KAAK,CAACK,MAAN,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CACjB;AACEX,YAAAA,KAAK,EAAE;AACLC,cAAAA,EAAE,EAAE,yBAAQ,yCAAR;AADC,aADT;AAIEnD,YAAAA,IAAI,EAAE,UAJR;AAKEW,YAAAA,IAAI,EAAE,MALR;AAME0C,YAAAA,WAAW,EAAE,EANf;AAOES,YAAAA,WAAW,EAAE;AACXX,cAAAA,EAAE,EAAE,yBAAQ,qDAAR;AADO;AAPf,WADiB,CAAnB;AAaD,SA3CM,MA2CA,IAAIxC,IAAI,KAAK,MAAb,EAAqB;AAC1B6C,UAAAA,KAAK,CAACK,MAAN,CAAa,CAAb,EAAgB,CAAhB,EAAmB,iCAEZhB,mCAFY;AAGflC,YAAAA,IAAI,EAAE6B,IAAI,CAAC7B,IAAL,IAAa,MAHJ;AAIf7C,YAAAA,KAAK,EAAE,IAJQ;AAKfyG,YAAAA,gBAAgB,EAAE,KALH;AAMfvB,YAAAA,QAAQ,EAAE,CAACR,IAAI,CAAC7B,IAND;AAOfoC,YAAAA,SAAS,EAAE;AAPI,aAAnB;AAUD,SAXM,MAWA,IAAIpC,IAAI,KAAK,UAAb,EAAyB;AAC9B6C,UAAAA,KAAK,CAACK,MAAN,CAAa,CAAb,EAAgB,CAAhB;AACD,SAFM,MAEA,IAAIlD,IAAI,KAAK,KAAb,EAAoB;AACzB,cAAM6D,QAAQ,GAAG,CACf,iCAAM3B,mCAAN;AAAsBG,YAAAA,QAAQ,EAAEyB,OAAO,CAACjC,IAAI,CAACkC,WAAN,CAAvC;AAA2D/D,YAAAA,IAAI,EAAE;AAAjE,aADe,EAEf,CAACkC,yBAAOC,OAAR,CAFe,EAGf,CAACD,mCAAD,CAHe,EAIf,CAACA,yBAAOhF,QAAR,CAJe,CAAjB;AAOA2F,UAAAA,KAAK,GAAGgB,QAAR;AACD,SATM,MASA,IAAI7D,IAAI,KAAK,MAAb,EAAqB;AAC1B6C,UAAAA,KAAK,CAACK,MAAN,CAAa,CAAb,EAAgB,CAAhB;AACD;;AAED,YAAI,CAAC5E,0CAA0C,CAACZ,QAA3C,CAAoDsC,IAApD,CAAL,EAAgE;AAC9D6C,UAAAA,KAAK,CAACO,IAAN,CACE,CACE;AACEhB,YAAAA,SAAS,EAAE,KADb;AAEE/C,YAAAA,IAAI,EAAEW,IAAI,KAAK,QAAT,GAAoB,KAApB,GAA4B,WAFpC;AAGEA,YAAAA,IAAI,EAAE,4BAHR;AAIEuC,YAAAA,KAAK,EAAE;AACLC,cAAAA,EAAE,EAAE,8DAAsCxC,IAAI,KAAK,QAAT,GAAoB,EAApB,GAAyB,QAA/D;AADC,aAJT;AAQE0C,YAAAA,WAAW,EAAE;AARf,WADF,CADF,EAaE,CACE;AACEN,YAAAA,SAAS,EAAE,KADb;AAEE/C,YAAAA,IAAI,EAAEW,IAAI,KAAK,QAAT,GAAoB,KAApB,GAA4B,WAFpC;AAGEA,YAAAA,IAAI,EAAE,4BAHR;AAIEuC,YAAAA,KAAK,EAAE;AACLC,cAAAA,EAAE,EAAE,8DAAsCxC,IAAI,KAAK,QAAT,GAAoB,EAApB,GAAyB,QAA/D;AADC,aAJT;AAOE0C,YAAAA,WAAW,EAAE;AAPf,WADF,CAbF;AAyBD;;AAED,YAAI1C,IAAI,KAAK,aAAb,EAA4B;AAC1B,iBAAO;AACL6C,YAAAA,KAAK,EAAED;AADF,WAAP;AAGD;;AAED,YAAI5C,IAAI,KAAK,UAAb,EAAyB;AACvB,iBAAO;AACL6C,YAAAA,KAAK,EAAEZ;AADF,WAAP;AAGD;;AAED,eAAO;AACLY,UAAAA,KAAK,EAALA;AADK,SAAP;AAGD,OAzOG;AA0OJmB,MAAAA,IA1OI,gBA0OCnC,IA1OD,EA0OO7B,IA1OP,EA0Oa8B,IA1Ob,EA0OmBmC,UA1OnB,EA0O+BlE,UA1O/B,EA0O2C;AAC7C,YAAIC,IAAI,KAAK,UAAb,EAAyB;AACvB,iBAAO;AACL6C,YAAAA,KAAK,EAAE,CACL,CACE;AACE7C,cAAAA,IAAI,EAAE;AADR,aADF,CADK;AADF,WAAP;AASD;;AAED,YAAM6C,KAAK,GAAG,CAAC,CAACX,yBAAO7C,IAAR,CAAD,CAAd;;AAEA,YAAIW,IAAI,KAAK,WAAT,IAAwB8B,IAAI,KAAK,GAArC,EAA0C;AACxC,cAAMoC,aAAa,GACjBrC,IAAI,CAACsC,eAAL,KAAyB,IAAzB,GACI,CAAC,CAAC;AAAEnE,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAD,EAAuBuD,MAAvB,CAA8BT,0BAAckB,IAAd,CAAmB,oBAAnB,CAA9B,CADJ,GAEI,CAAC,CAAC;AAAEhE,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAD,CAHN;AAKA,iBAAO;AACL6C,YAAAA,KAAK,GAAG,CAACX,yBAAOiC,eAAR,CAAH,6CAAgCD,aAAhC;AADA,WAAP;AAGD;;AAED,YAAIlE,IAAI,KAAK,WAAT,IAAwB8B,IAAI,KAAK,GAArC,EAA0C;AACxCe,UAAAA,KAAK,CAAC,CAAD,CAAL,CAASO,IAAT,CAAc;AACZ/D,YAAAA,IAAI,EAAE,WADM;AAEZW,YAAAA,IAAI,EAAE,iBAFM;AAGZuC,YAAAA,KAAK,EAAE;AACLC,cAAAA,EAAE,EAAE,yBAAQ,uCAAR;AADC,aAHK;AAMZ4B,YAAAA,UAAU,EAAE;AANA,WAAd;AAQAvB,UAAAA,KAAK,CAACO,IAAN,CAAW,CACT;AACEb,YAAAA,KAAK,EAAE;AACLC,cAAAA,EAAE,EAAE,yBAAQ,yCAAR;AADC,aADT;AAIEnD,YAAAA,IAAI,EAAE,YAJR;AAKEW,YAAAA,IAAI,EAAE,YALR;AAMEqE,YAAAA,IAAI,EAAE,EANR;AAOEhB,YAAAA,OAAO,EAAE,CACP;AACEiB,cAAAA,QAAQ,EAAE,yBAAQ,4CAAR,CADZ;AAEEC,cAAAA,aAAa,EAAE,yBAAQ,wDAAR,CAFjB;AAGEpH,cAAAA,KAAK,EAAE;AAHT,aADO,EAMP;AACEmH,cAAAA,QAAQ,EAAE,yBAAQ,wCAAR,CADZ;AAEEC,cAAAA,aAAa,EAAE,yBAAQ,oDAAR,CAFjB;AAGEpH,cAAAA,KAAK,EAAE;AAHT,aANO,CAPX;AAmBEuF,YAAAA,WAAW,EAAE;AAnBf,WADS,CAAX;AAuBAG,UAAAA,KAAK,CAACO,IAAN,CAAW,CAAC;AAAEpD,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAX;AACD;;AAED,YAAIA,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,OAAhC,EAAyC;AACvC6C,UAAAA,KAAK,CAACO,IAAN,CAAW,CACT;AACEb,YAAAA,KAAK,EAAE;AACLC,cAAAA,EAAE,EAAE,yBAAQ,yCAAR;AADC,aADT;AAIEnD,YAAAA,IAAI,EAAEW,IAAI,KAAK,MAAT,GAAkB,MAAlB,GAA2B,UAJnC;AAKEA,YAAAA,IAAI,EAAE,YALR;AAMEqE,YAAAA,IAAI,EAAE,EANR;AAOEhB,YAAAA,OAAO,EAAE,CACP;AACEiB,cAAAA,QAAQ,EAAE,kDACUtE,IADV,qBACyBA,IAAI,KAAK,MAAT,GAAkB,YAAlB,GAAiC,UAD1D,EADZ;AAIEuE,cAAAA,aAAa,EAAE,kDACKvE,IADL,qBAEXA,IAAI,KAAK,MAAT,GAAkB,YAAlB,GAAiC,UAFtB,kBAJjB;AASE7C,cAAAA,KAAK,EAAE6C,IAAI,KAAK,MAAT,GAAkB,QAAlB,GAA6B;AATtC,aADO,EAYP;AACEsE,cAAAA,QAAQ,EAAE,kDACUtE,IADV,qBACyBA,IAAI,KAAK,MAAT,GAAkB,WAAlB,GAAgC,QADzD,EADZ;AAIEuE,cAAAA,aAAa,EAAE,kDACKvE,IADL,qBAEXA,IAAI,KAAK,MAAT,GAAkB,WAAlB,GAAgC,QAFrB,kBAJjB;AASE7C,cAAAA,KAAK,EAAE6C,IAAI,KAAK,MAAT,GAAkB,MAAlB,GAA2B;AATpC,aAZO,CAPX;AA+BE0C,YAAAA,WAAW,EAAE;AA/Bf,WADS,CAAX;AAmCAG,UAAAA,KAAK,CAACO,IAAN,CAAW,CAAC;AAAEpD,YAAAA,IAAI,EAAE;AAAR,WAAD,CAAX;AACD;;AAED,YAAIA,IAAI,KAAK,QAAb,EAAuB;AACrB6C,UAAAA,KAAK,CAAC,CAAD,CAAL,CAASO,IAAT,CAAc;AACZb,YAAAA,KAAK,EAAE;AACLC,cAAAA,EAAE,EAAE,yBAAQ,iCAAR;AADC,aADK;AAIZnD,YAAAA,IAAI,EAAE,MAJM;AAKZW,YAAAA,IAAI,EAAE,QALM;AAMZqD,YAAAA,OAAO,EAAE,CACP;AAAEb,cAAAA,EAAE,EAAE,2CAAN;AAAmDrF,cAAAA,KAAK,EAAE;AAA1D,aADO,EAEP;AACEqF,cAAAA,EAAE,EAAE,yCADN;AAEErF,cAAAA,KAAK,EAAE;AAFT,aAFO,EAMP;AACEqF,cAAAA,EAAE,EAAE,4CADN;AAEErF,cAAAA,KAAK,EAAE;AAFT,aANO,EAUP;AACEqF,cAAAA,EAAE,EAAE,yCADN;AAEErF,cAAAA,KAAK,EAAE;AAFT,aAVO,EAcP;AAAEqF,cAAAA,EAAE,EAAE,uCAAN;AAA+CrF,cAAAA,KAAK,EAAE;AAAtD,aAdO,EAePwG,GAfO,CAeH,gBAAgBF,KAAhB,EAA0B;AAAA,kBAAvBjB,EAAuB,QAAvBA,EAAuB;AAAA,kBAAnBrF,KAAmB,QAAnBA,KAAmB;AAC9B,kBAAMkF,QAAQ,GAAGoB,KAAK,KAAK,CAA3B;AACA,kBAAMe,MAAM,GAAGf,KAAK,KAAK,CAAV,GAAcjB,EAAd,GAAmB,yBAAQA,EAAR,CAAlC;AAEA,kCACE,gCAAC,2BAAD;AAAkB,gBAAA,EAAE,EAAEgC,MAAtB;AAA8B,gBAAA,GAAG,EAAEhC;AAAnC,iBACG,UAAAc,GAAG;AAAA,oCACF;AAAQ,kBAAA,QAAQ,EAAEjB,QAAlB;AAA4B,kBAAA,MAAM,EAAEA,QAApC;AAA8C,kBAAA,KAAK,EAAElF;AAArD,mBACGmG,GADH,CADE;AAAA,eADN,CADF;AASD,aA5BQ,CANG;AAmCZZ,YAAAA,WAAW,EAAE;AACXxF,cAAAA,QAAQ,EAAE;AADC;AAnCD,WAAd;AAuCD;;AAED,YAAI8C,IAAI,KAAK,MAAb,EAAqB;AACnB6C,UAAAA,KAAK,CAAC,CAAD,CAAL,CAASO,IAAT,CAAc;AACZb,YAAAA,KAAK,EAAE;AACLC,cAAAA,EAAE,EAAE,yBAAQ,yCAAR;AADC,aADK;AAIZnD,YAAAA,IAAI,EAAE,MAJM;AAKZW,YAAAA,IAAI,EAAE,QALM;AAMZqD,YAAAA,OAAO,EAAE,CACP;AAAEb,cAAAA,EAAE,EAAE,2CAAN;AAAmDrF,cAAAA,KAAK,EAAE;AAA1D,aADO,EAEP;AACEqF,cAAAA,EAAE,EAAE,oCADN;AAEErF,cAAAA,KAAK,EAAE;AAFT,aAFO,EAMP;AACEqF,cAAAA,EAAE,EAAE,wCADN;AAEErF,cAAAA,KAAK,EAAE;AAFT,aANO,EAUP;AACA;AACA;AACA;AACA;AACA;AAAEqF,cAAAA,EAAE,EAAE,oCAAN;AAA4CrF,cAAAA,KAAK,EAAE;AAAnD,aAfO,EAgBPwG,GAhBO,CAgBH,iBAAgBF,KAAhB,EAA0B;AAAA,kBAAvBjB,EAAuB,SAAvBA,EAAuB;AAAA,kBAAnBrF,KAAmB,SAAnBA,KAAmB;AAC9B,kBAAMkF,QAAQ,GAAGoB,KAAK,KAAK,CAA3B;AACA,kBAAMe,MAAM,GAAGf,KAAK,KAAK,CAAV,GAAcjB,EAAd,GAAmB,yBAAQA,EAAR,CAAlC;AAEA,kCACE,gCAAC,2BAAD;AAAkB,gBAAA,EAAE,EAAEgC,MAAtB;AAA8B,gBAAA,GAAG,EAAEhC;AAAnC,iBACG,UAAAc,GAAG;AAAA,oCACF;AAAQ,kBAAA,QAAQ,EAAEjB,QAAlB;AAA4B,kBAAA,MAAM,EAAEA,QAApC;AAA8C,kBAAA,KAAK,EAAElF;AAArD,mBACGmG,GADH,CADE;AAAA,eADN,CADF;AASD,aA7BQ,CANG;AAoCZZ,YAAAA,WAAW,EAAE;AACXxF,cAAAA,QAAQ,EAAE;AADC;AApCD,WAAd;AAwCD;;AAED,YAAI8C,IAAI,KAAK,aAAb,EAA4B;AAC1B6C,UAAAA,KAAK,CAACO,IAAN,CAAW,CACT;AACEhB,YAAAA,SAAS,EAAE,KADb;AAEE/C,YAAAA,IAAI,EAAE,MAFR;AAGEW,YAAAA,IAAI,EAAE,UAHR;AAIEqE,YAAAA,IAAI,EAAE,CAJR;AAKE9B,YAAAA,KAAK,EAAE;AACLC,cAAAA,EAAE,EAAE,yBAAQ,uCAAR;AADC,aALT;AAQEiC,YAAAA,WAAW,EAAE;AACXjC,cAAAA,EAAE,EAAE,yBAAQ,6CAAR;AADO,aARf;AAWEE,YAAAA,WAAW,EAAE;AACXxF,cAAAA,QAAQ,EAAE;AADC;AAXf,WADS,CAAX;AAiBD;;AAED,YAAI8C,IAAI,KAAK,KAAb,EAAoB;AAClB,cAAMqD,OAAO,GAAGpE,MAAM,CAACC,IAAP,CAAYa,UAAZ,EACbZ,MADa,CACN,UAAAuF,GAAG;AAAA,mBAAI,CAAC,QAAD,EAAW,MAAX,EAAmBhH,QAAnB,CAA4BqC,UAAU,CAAC2E,GAAD,CAAV,CAAgB1E,IAA5C,CAAJ;AAAA,WADG,EAEb2D,GAFa,CAET,UAAAe,GAAG;AAAA,mBAAK;AAAElC,cAAAA,EAAE,EAAEkC,GAAN;AAAWvH,cAAAA,KAAK,EAAEuH;AAAlB,aAAL;AAAA,WAFM,CAAhB;AAIA,iBAAO;AACL7B,YAAAA,KAAK,EAAE,CACL,iCAEOX,yBAAO7C,IAFd;AAGIoF,cAAAA,WAAW,EAAE;AACXjC,gBAAAA,EAAE,EAAE,yBAAQ,gDAAR;AADO;AAHjB,gBAOE;AACED,cAAAA,KAAK,EAAE;AACLC,gBAAAA,EAAE,EAAE,yBAAQ,kCAAR;AADC,eADT;AAIEnD,cAAAA,IAAI,EAAE,aAJR;AAKEW,cAAAA,IAAI,EAAE,QALR;AAMEqD,cAAAA,OAAO,EAAE,CAAC;AAAEb,gBAAAA,EAAE,EAAE,yBAAQ,MAAR,CAAN;AAAuBrF,gBAAAA,KAAK,EAAE;AAA9B,eAAD,6CAAwCkG,OAAxC,GAAiDM,GAAjD,CAAqD,UAACgB,MAAD,EAASlB,KAAT;AAAA;AAAA;AAC5D;AACA,kDAAC,eAAD;AAAU,oBAAA,GAAG,EAAEA;AAAf,qBACGA,KAAK,KAAK,CAAV,gBACC,gCAAC,2BAAD;AAAkB,oBAAA,EAAE,EAAEkB,MAAM,CAACnC;AAA7B,qBACG,UAAAc,GAAG;AAAA,wCAAI;AAAQ,sBAAA,KAAK,EAAEqB,MAAM,CAACxH;AAAtB,uBAA8BmG,GAA9B,CAAJ;AAAA,mBADN,CADD,gBAKC;AAAQ,oBAAA,KAAK,EAAEqB,MAAM,CAACxH;AAAtB,qBAA8BwH,MAAM,CAACxH,KAArC,CANJ;AAF4D;AAAA,eAArD,CANX;AAkBEuF,cAAAA,WAAW,EAAE;AACXxF,gBAAAA,QAAQ,EAAE;AADC;AAlBf,aAPF,CADK;AADF,WAAP;AAkCD;;AAED,eAAO;AACL2F,UAAAA,KAAK,EAALA;AADK,SAAP;AAGD;AAneG;AAlPG,GADC;AAytBZ+B,EAAAA,WAAW,EAAE;AACXnG,IAAAA,MADW,kBACJoG,iBADI,EACehG,SADf,EAC0BiG,KAD1B,EACiChH,aADjC,EACgD;AACzD,UAAMiH,UAAU,GAAGlG,SAAS,GACxBgG,iBAAiB,CAAC1F,MAAlB,CAAyB,UAAAI,GAAG;AAAA,eAAIA,GAAG,KAAKuF,KAAZ;AAAA,OAA5B,CADwB,GAExBD,iBAFJ;AAIA,aAAOhI,GAAG,CAAC8D,MAAJ,GAAaC,KAAb,CAAmB;AACxBvB,QAAAA,IAAI,EAAExC,GAAG,CACNQ,MADG,GAEHqC,MAFG,CAEIzC,qCAAYyC,MAFhB,EAEwBqF,UAFxB,EAEoCC,oBAFpC,EAGHlF,SAHG,CAGO,yBAAQ,qCAAR,CAHP,EAGuDhC,aAAa,CAACmH,MAHrE,EAIH/H,QAJG,CAIMD,qCAAYC,QAJlB,CADkB;AAMxBgI,QAAAA,cAAc,EAAErI,GAAG,CAACQ,MAAJ,EANQ;AAOxB8H,QAAAA,eAAe,EAAEtI,GAAG,WAAH,EAPO;AAQxBuI,QAAAA,IAAI,EAAEvI,GAAG,CAACQ,MAAJ,GAAagI,KAAb,CAAmB,CAAC,YAAD,EAAe,gBAAf,CAAnB;AARkB,OAAnB,CAAP;AAUD,KAhBU;AAiBX1D,IAAAA,IAAI,EAAE;AACJqC,MAAAA,IADI,kBACoC;AAAA,YAAnCnC,IAAmC,uEAA5B,EAA4B;AAAA,YAAxB7B,IAAwB;AAAA,YAAlB8B,IAAkB;AAAA,YAAZmC,UAAY;AACtC,YAAMpB,KAAK,GAAG,CACZ,CACE;AACET,UAAAA,SAAS,EAAE,IADb;AAEE/C,UAAAA,IAAI,EAAE,MAFR;AAGEW,UAAAA,IAAI,EAAE,MAHR;AAIEuC,UAAAA,KAAK,EAAE;AACLC,YAAAA,EAAE,YAAK8C,oBAAL;AADG,WAJT;AAOE5C,UAAAA,WAAW,EAAE;AACXxF,YAAAA,QAAQ,EAAE;AADC;AAPf,SADF,CADY,CAAd;;AAgBA,YAAI+G,UAAU,KAAK,QAAnB,EAA6B;AAC3BpB,UAAAA,KAAK,CAAC,CAAD,CAAL,CAASO,IAAT,CAAc;AACZD,YAAAA,WAAW,EAAE;AACXX,cAAAA,EAAE,YAAK8C,oBAAL;AADS,aADD;AAIZ/C,YAAAA,KAAK,EAAE,KAJK;AAKZlD,YAAAA,IAAI,EAAE,KALM;AAMZW,YAAAA,IAAI,EAAE,MANM;AAOZuF,YAAAA,QAAQ,EAAE,IAPE;AAQZlD,YAAAA,QAAQ,EAAE,IARE;AASZlF,YAAAA,KAAK,EAAE0E,IAAI,CAACxC,IAAL,GAAY,2BAAWwC,IAAI,CAACxC,IAAhB,CAAZ,GAAoC;AAT/B,WAAd;AAWD;;AAED,YAAI4E,UAAU,KAAK,MAAnB,EAA2B;AACzBpB,UAAAA,KAAK,CAAC,CAAD,CAAL,CAASO,IAAT,CAAc;AACZb,YAAAA,KAAK,EAAE;AACLC,cAAAA,EAAE,EAAE,yBAAQ,yCAAR;AADC,aADK;AAIZnD,YAAAA,IAAI,EAAE,MAJM;AAKZW,YAAAA,IAAI,EAAE,YALM;AAMZqE,YAAAA,IAAI,EAAE,EANM;AAOZmB,YAAAA,gBAAgB,EAAE;AAAA,qBAChBC,MAAM,CAACC,YAAP,CAAoBC,MAApB,CAA2B;AACzB3F,gBAAAA,IAAI,EAAE,MADmB;AAEzB1C,gBAAAA,OAAO,EAAE;AAAEkF,kBAAAA,EAAE,EAAE,yBAAQ,iCAAR;AAAN;AAFgB,eAA3B,CADgB;AAAA,aAPN;AAYZa,YAAAA,OAAO,EAAE,CACP;AACEiB,cAAAA,QAAQ,EAAE,yBAAQ,mCAAR,CADZ;AAEEC,cAAAA,aAAa,EAAE,yBAAQ,yCAAR,CAFjB;AAGEpH,cAAAA,KAAK,EAAE;AAHT,aADO,EAMP;AACEmH,cAAAA,QAAQ,EAAE,yBAAQ,yCAAR,CADZ;AAEEC,cAAAA,aAAa,EAAE,yBAAQ,qCAAR,CAFjB;AAGEpH,cAAAA,KAAK,EAAE;AAHT,aANO,CAZG;AAwBZuF,YAAAA,WAAW,EAAE;AAxBD,WAAd;AA0BD;;AAED,eAAO;AAAEG,UAAAA,KAAK,EAALA;AAAF,SAAP;AACD,OA9DG;AA+DJjB,MAAAA,QA/DI,sBA+DO;AACT,eAAO;AACLiB,UAAAA,KAAK,EAAE,CACL,CACE;AACE7C,YAAAA,IAAI,EAAE;AADR,WADF,CADK,EAML,CACE;AACEuC,YAAAA,KAAK,EAAE;AACLC,cAAAA,EAAE,YAAK8C,oBAAL;AADG,aADT;AAIEnC,YAAAA,WAAW,EAAE;AACXX,cAAAA,EAAE,YAAK8C,oBAAL;AADS,aAJf;AAOEjG,YAAAA,IAAI,EAAE,iBAPR;AAQEW,YAAAA,IAAI,EAAE,MARR;AASE0C,YAAAA,WAAW,EAAE;AATf,WADF,CANK,EAmBL,CAACR,yBAAOC,OAAR,CAnBK,EAoBL,CACE;AACEC,YAAAA,SAAS,EAAE,IADb;AAEEG,YAAAA,KAAK,EAAE;AACLC,cAAAA,EAAE,YAAK8C,oBAAL;AADG,aAFT;AAKEnC,YAAAA,WAAW,EAAE;AACXX,cAAAA,EAAE,YAAK8C,oBAAL;AADS,aALf;AAQEjG,YAAAA,IAAI,EAAE,gBARR;AASEW,YAAAA,IAAI,EAAE,MATR;AAUE0C,YAAAA,WAAW,EAAE;AAVf,WADF,CApBK;AADF,SAAP;AAqCD;AArGG;AAjBK,GAztBD;AAk1BZ7B,EAAAA,SAAS,EAAE;AACTpC,IAAAA,MADS,kBAEPlB,sBAFO,EAGPqI,iBAHO,EAIP9H,aAJO,EAOP;AAAA,UAFAe,SAEA,uEAFY,KAEZ;AAAA,UADAgH,QACA,uEADW,IACX;AACA,UAAMd,UAAU,GAAGlG,SAAS,GACxBtB,sBAAsB,CAAC4B,MAAvB,CAA8B,UAAAI,GAAG;AAAA,eAAIA,GAAG,KAAKsG,QAAZ;AAAA,OAAjC,CADwB,GAExBtI,sBAFJ;AAIA,aAAOV,GAAG,CAAC8D,MAAJ,GAAaC,KAAb,CAAmB;AACxBvB,QAAAA,IAAI,EAAExC,GAAG,CACNQ,MADG,GAEHqC,MAFG,CAEIzC,qCAAYyC,MAFhB,EAEwBqF,UAFxB,EAEoCe,6BAFpC,EAEwDF,iBAFxD,EAGH9F,SAHG,CAGO,yBAAQ,qCAAR,CAHP,EAGuDhC,aAAa,CAACmH,MAHrE,EAIH/H,QAJG,CAIMD,qCAAYC,QAJlB,CADkB;AAMxBO,QAAAA,QAAQ,EAAEZ,GAAG,CACVQ,MADO,GAEPsC,OAFO,CAECoG,sCAFD,EAEsB9I,qCAAY4C,KAFlC,EAGP3C,QAHO,CAGED,qCAAYC,QAHd,CANc;AAUxB8I,QAAAA,IAAI,EAAEnJ,GAAG,CAACQ,MAAJ,GAAaH,QAAb,CAAsBD,qCAAYC,QAAlC,CAVkB;AAWxBgI,QAAAA,cAAc,EAAErI,GAAG,CAACQ,MAAJ,GAAa4C,QAAb;AAXQ,OAAnB,CAAP;AAaD,KAzBQ;AA0BT0B,IAAAA,IAAI,EAAE;AACJC,MAAAA,QADI,sBACO;AACT,eAAO;AACLiB,UAAAA,KAAK,EAAEC,0BAAclB,QAAd;AADF,SAAP;AAGD,OALG;AAMJoC,MAAAA,IANI,kBAMG;AACL,eAAO;AACLnB,UAAAA,KAAK,EAAEC,0BAAckB,IAAd;AADF,SAAP;AAGD;AAVG;AA1BG,GAl1BC;AAy3BZiC,EAAAA,yBAAyB,EAAE;AACzBtE,IAAAA,IAAI,EAAE;AACJC,MAAAA,QADI,oBACKC,IADL,EACW7B,IADX,EACiB8B,IADjB,EACuB;AACzB,eAAOvD,KAAK,CAACC,SAAN,CAAgBmD,IAAhB,CAAqBC,QAArB,CAA8BC,IAA9B,EAAoC,WAApC,EAAiDC,IAAjD,CAAP;AACD,OAHG;AAIJkC,MAAAA,IAJI,gBAICnC,IAJD,EAIO;AACT,YAAMqE,mBAAmB,GAAG,iBAAIrE,IAAJ,EAAU,iBAAV,EAA6B,KAA7B,CAA5B;AAEA,YAAMqC,aAAa,GAAGgC,mBAAmB,GACrC,CAAC,CAAC;AAAElG,UAAAA,IAAI,EAAE;AAAR,SAAD,CAAD,EAAuBuD,MAAvB,CAA8BT,0BAAckB,IAAd,CAAmB,oBAAnB,CAA9B,CADqC,GAErC,CACE,CAAC;AAAEhE,UAAAA,IAAI,EAAE;AAAR,SAAD,CADF,EAEE,CACE;AAAEA,UAAAA,IAAI,EAAE,WAAR;AAAqBqE,UAAAA,IAAI,EAAE;AAA3B,SADF,EAGE;AACEhF,UAAAA,IAAI,EAAE,YADR;AAEEW,UAAAA,IAAI,EAAE,iBAFR;AAGEuC,UAAAA,KAAK,EAAE;AACLC,YAAAA,EAAE,EAAE,yBAAQ,wCAAR;AADC,WAHT;AAME4B,UAAAA,UAAU,EAAE;AANd,SAHF,CAFF,EAcE,CAAC;AAAEpE,UAAAA,IAAI,EAAE;AAAR,SAAD,CAdF,CAFJ;AAmBA,eAAO;AACL6C,UAAAA,KAAK,GAAG,CAACX,yBAAOiC,eAAR,CAAH,6CAAgCD,aAAhC;AADA,SAAP;AAGD;AA7BG;AADmB,GAz3Bf;AA05BZiC,EAAAA,YAAY,EAAE;AACZ1H,IAAAA,MADY,kBACL2H,aADK,EACUrH,WADV,EACuB;AACjC,UAAMsH,iBAAiB,GAAGD,aAAa,CACpCjH,MADuB,CAChB,UAAAmH,GAAG;AAAA,eAAIA,GAAG,KAAKvH,WAAW,CAACM,IAAxB;AAAA,OADa,EAEvBsE,GAFuB,CAEnB,UAAA2C,GAAG;AAAA,eAAI,qBAAQA,GAAR,CAAJ;AAAA,OAFgB,CAA1B;AAIA,aAAOzJ,GAAG,CAAC8D,MAAJ,GAAaC,KAAb,CAAmB;AACxBvB,QAAAA,IAAI,EAAExC,GAAG,CACNQ,MADG,GAEHsC,OAFG,CAEKoG,sCAFL,EAE0B9I,qCAAY4C,KAFtC,EAGHH,MAHG,CAGIzC,qCAAYyC,MAHhB,EAGwB2G,iBAHxB,EAG2CE,eAH3C,EAIHrJ,QAJG,CAIMD,qCAAYC,QAJlB;AADkB,OAAnB,CAAP;AAOD,KAbW;AAcZyE,IAAAA,IAAI,EAAE;AACJqC,MAAAA,IADI,kBACG;AACL,eAAO;AACLnB,UAAAA,KAAK,EAAE,CACL,iCAEOX,yBAAO7C,IAFd;AAGI8D,YAAAA,WAAW,EAAE;AACXX,cAAAA,EAAE,EAAE,yBAAQ,8CAAR;AADO;AAHjB,aADK;AADF,SAAP;AAYD;AAdG;AAdM;AA15BF,CAAd;eA27BejE,K","sourcesContent":["import React, { Fragment } from 'react';\nimport * as yup from 'yup';\nimport { get, isEmpty, toLower, trim, toNumber } from 'lodash';\nimport { translatedErrors as errorsTrads } from 'strapi-helper-plugin';\nimport { FormattedMessage } from 'react-intl';\nimport pluginId from '../../../pluginId';\nimport getTrad from '../../../utils/getTrad';\nimport { createComponentUid, createUid, nameToSlug } from './createUid';\nimport componentForm from './componentForm';\nimport fields from './staticFields';\nimport { NAME_REGEX, ENUM_REGEX, CATEGORY_NAME_REGEX } from './attributesRegexes';\n\n/* eslint-disable indent */\n/* eslint-disable prefer-arrow-callback */\n\nyup.addMethod(yup.mixed, 'defined', function() {\n  return this.test('defined', errorsTrads.required, value => value !== undefined);\n});\n\nyup.addMethod(yup.string, 'unique', function(\n  message,\n  alreadyTakenAttributes,\n  validator,\n  category = ''\n) {\n  return this.test('unique', message, function(string) {\n    if (!string) {\n      return false;\n    }\n\n    return !alreadyTakenAttributes.includes(\n      typeof validator === 'function' ? validator(string, category) : string.toLowerCase()\n    );\n  });\n});\n\nyup.addMethod(yup.array, 'hasNotEmptyValues', function(message) {\n  return this.test('hasNotEmptyValues', message, function(array) {\n    return !array.some(value => {\n      return isEmpty(value);\n    });\n  });\n});\n\nyup.addMethod(yup.string, 'isAllowed', function(message, reservedNames) {\n  return this.test('isAllowed', message, function(string) {\n    if (!string) {\n      return false;\n    }\n\n    return !reservedNames.includes(toLower(trim(string)));\n  });\n});\n\nyup.addMethod(yup.string, 'isInferior', function(message, max) {\n  return this.test('isInferior', message, function(min) {\n    if (!min) {\n      return false;\n    }\n\n    if (Number.isNaN(toNumber(min))) {\n      return true;\n    }\n\n    return toNumber(max) >= toNumber(min);\n  });\n});\n\nyup.addMethod(yup.array, 'matchesEnumRegex', function(message) {\n  return this.test('matchesEnumRegex', message, function(array) {\n    return array.every(value => {\n      return ENUM_REGEX.test(value);\n    });\n  });\n});\n\nyup.addMethod(yup.string, 'isValidRegExpPattern', function(message) {\n  return this.test('isValidRegExpPattern', message, function(string) {\n    return new RegExp(string) !== null;\n  });\n});\n\nconst ATTRIBUTES_THAT_DONT_HAVE_MIN_MAX_SETTINGS = ['boolean', 'date', 'enumeration', 'media'];\n\nconst forms = {\n  attribute: {\n    schema(\n      currentSchema,\n      attributeType,\n      dataToValidate,\n      isEditing,\n      attributeToEditName,\n      initialData,\n      alreadyTakenTargetContentTypeAttributes,\n      reservedNames\n    ) {\n      const alreadyTakenAttributes = Object.keys(\n        get(currentSchema, ['schema', 'attributes'], {})\n      ).filter(attribute => {\n        if (isEditing) {\n          return attribute !== attributeToEditName;\n        }\n\n        return true;\n      });\n\n      // For relations\n      let targetAttributeAlreadyTakenValue = dataToValidate.name\n        ? [...alreadyTakenAttributes, dataToValidate.name]\n        : alreadyTakenAttributes;\n\n      if (\n        isEditing &&\n        attributeType === 'relation' &&\n        dataToValidate.target === currentSchema.uid\n      ) {\n        targetAttributeAlreadyTakenValue = targetAttributeAlreadyTakenValue.filter(\n          attribute => attribute !== initialData.targetAttribute\n        );\n      }\n\n      // Common yup shape for most attributes\n      const commonShape = {\n        name: yup\n          .string()\n          .unique(errorsTrads.unique, alreadyTakenAttributes)\n          .matches(NAME_REGEX, errorsTrads.regex)\n          .isAllowed(getTrad('error.attributeName.reserved-name'), reservedNames.attributes)\n          .required(errorsTrads.required),\n        type: yup.string().required(errorsTrads.required),\n        default: yup.string().nullable(),\n        unique: yup.boolean().nullable(),\n        required: yup.boolean(),\n      };\n      const numberTypeShape = {\n        max: yup.lazy(() => {\n          let schema = yup.number();\n\n          if (\n            attributeType === 'integer' ||\n            attributeType === 'biginteger' ||\n            attributeType === 'dynamiczone'\n          ) {\n            schema = schema.integer();\n          }\n\n          if (attributeType === 'dynamiczone') {\n            schema = schema.positive();\n          }\n\n          return schema.nullable();\n        }),\n        min: yup.lazy(() => {\n          let schema = yup.number();\n\n          if (\n            attributeType === 'integer' ||\n            attributeType === 'biginteger' ||\n            attributeType === 'dynamiczone'\n          ) {\n            schema = schema.integer();\n          }\n\n          if (attributeType === 'dynamiczone') {\n            schema = schema.positive();\n          }\n\n          return schema\n            .nullable()\n            .when('max', (max, schema) => {\n              if (max) {\n                return schema.max(max, getTrad('error.validation.minSupMax'));\n              }\n\n              return schema;\n            })\n            .nullable();\n        }),\n      };\n      const fieldsThatSupportMaxAndMinLengthShape = {\n        maxLength: yup\n          .number()\n          .integer()\n          .nullable(),\n        minLength: yup\n          .number()\n          .integer()\n          .when('maxLength', (maxLength, schema) => {\n            if (maxLength) {\n              return schema.max(maxLength, getTrad('error.validation.minSupMax'));\n            }\n\n            return schema;\n          })\n          .nullable(),\n      };\n\n      switch (attributeType) {\n        case 'component':\n          return yup.object().shape({\n            ...commonShape,\n            component: yup.string().required(errorsTrads.required),\n            ...numberTypeShape,\n          });\n        case 'dynamiczone':\n          return yup.object().shape({\n            ...commonShape,\n            ...numberTypeShape,\n          });\n        case 'enumeration':\n          return yup.object().shape({\n            name: yup\n              .string()\n              .isAllowed(getTrad('error.attributeName.reserved-name'), reservedNames.attributes)\n              .unique(errorsTrads.unique, alreadyTakenAttributes)\n              .matches(ENUM_REGEX, errorsTrads.regex)\n              .required(errorsTrads.required),\n            type: yup.string().required(errorsTrads.required),\n            default: yup.string().nullable(),\n            unique: yup.boolean().nullable(),\n            required: yup.boolean(),\n            enum: yup\n              .array()\n              .of(yup.string())\n              .min(1, errorsTrads.min)\n              .test({\n                name: 'areEnumValuesUnique',\n                message: getTrad('error.validation.enum-duplicate'),\n                test: values => {\n                  const filtered = [...new Set(values)];\n\n                  return filtered.length === values.length;\n                },\n              })\n              .matchesEnumRegex(errorsTrads.regex)\n              .hasNotEmptyValues('Empty strings are not allowed', dataToValidate.enum),\n            enumName: yup.string().nullable(),\n          });\n        case 'text':\n          return yup.object().shape({\n            ...commonShape,\n            ...fieldsThatSupportMaxAndMinLengthShape,\n            regex: yup\n              .string()\n              .isValidRegExpPattern(getTrad('error.validation.regex'))\n              .nullable(),\n          });\n        case 'number':\n        case 'integer':\n        case 'biginteger':\n        case 'float':\n        case 'decimal': {\n          if (dataToValidate.type === 'biginteger') {\n            return yup.object().shape({\n              ...commonShape,\n              default: yup\n                .string()\n                .nullable()\n                .matches(/^\\d*$/),\n              min: yup\n                .string()\n                .nullable()\n                .matches(/^\\d*$/)\n                .when('max', (max, schema) => {\n                  if (max) {\n                    return schema.isInferior(getTrad('error.validation.minSupMax'), max);\n                  }\n\n                  return schema;\n                }),\n\n              max: yup\n                .string()\n                .nullable()\n                .matches(/^\\d*$/),\n            });\n          }\n\n          let defaultType = yup.number();\n\n          if (dataToValidate.type === 'integer') {\n            defaultType = yup.number().integer('component.Input.error.validation.integer');\n          }\n\n          return yup.object().shape({\n            ...commonShape,\n            default: defaultType.nullable(),\n            ...numberTypeShape,\n          });\n        }\n        case 'relation':\n          return yup.object().shape({\n            name: yup\n              .string()\n              .isAllowed(getTrad('error.attributeName.reserved-name'), reservedNames.attributes)\n              .matches(NAME_REGEX, errorsTrads.regex)\n              .unique(errorsTrads.unique, alreadyTakenAttributes)\n              .required(errorsTrads.required),\n            targetAttribute: yup.lazy(() => {\n              let schema = yup\n                .string()\n                .isAllowed(getTrad('error.attributeName.reserved-name'), reservedNames.attributes);\n\n              if (!['oneWay', 'manyWay'].includes(dataToValidate.nature)) {\n                schema = schema.matches(NAME_REGEX, errorsTrads.regex);\n              }\n\n              return schema\n                .unique(errorsTrads.unique, targetAttributeAlreadyTakenValue)\n                .unique(\n                  getTrad('error.validation.relation.targetAttribute-taken'),\n                  alreadyTakenTargetContentTypeAttributes\n                )\n                .required(errorsTrads.required);\n            }),\n            target: yup.string().required(errorsTrads.required),\n            nature: yup.string().required(),\n            dominant: yup.boolean().nullable(),\n            unique: yup.boolean().nullable(),\n          });\n        default:\n          return yup.object().shape({\n            ...commonShape,\n            ...fieldsThatSupportMaxAndMinLengthShape,\n          });\n      }\n    },\n    form: {\n      advanced(data, type, step) {\n        const targetAttributeValue = get(data, 'targetAttribute', null);\n        const nameValue = get(data, 'name', null);\n        const relationItems = [\n          [fields.divider],\n          [fields.private],\n          [fields.unique],\n          [\n            {\n              autoFocus: false,\n              disabled: nameValue === null,\n              name: 'columnName',\n              type: 'addon',\n              addon: nameValue,\n              label: {\n                id: getTrad('form.attribute.item.customColumnName'),\n              },\n              inputDescription: {\n                id: getTrad('form.attribute.item.customColumnName.description'),\n              },\n              validations: {},\n            },\n            {\n              autoFocus: false,\n              disabled: targetAttributeValue === null || targetAttributeValue === '-',\n              name: 'targetColumnName',\n              label: '',\n              type: 'addon',\n              addon: targetAttributeValue,\n              validations: {},\n            },\n          ],\n        ];\n        const defaultItems = [\n          [\n            {\n              ...fields.default,\n              type: type === 'email' ? 'email' : 'text',\n            },\n          ],\n          [fields.divider],\n          [fields.private],\n          [fields.required],\n          [fields.unique],\n        ];\n        const dynamiczoneItems = [[fields.required], [fields.divider], [fields.max], [fields.min]];\n\n        if (type === 'component') {\n          if (step === '1') {\n            return {\n              items: componentForm.advanced('componentToCreate.'),\n            };\n          }\n          const requiredItem = [[fields.required]];\n\n          return {\n            items: data.repeatable ? [...dynamiczoneItems] : requiredItem,\n          };\n        }\n\n        let items = defaultItems.slice();\n\n        if (type === 'number' && data.type !== 'biginteger') {\n          const step = data.type === 'decimal' || data.type === 'float' ? 'any' : '1';\n\n          items.splice(0, 1, [\n            {\n              autoFocus: true,\n              name: 'default',\n              type: 'number',\n              step,\n              label: {\n                id: getTrad('form.attribute.settings.default'),\n              },\n              validations: {},\n            },\n          ]);\n        }\n\n        if (type === 'text') {\n          items.splice(1, 0, [\n            {\n              autoFocus: false,\n              label: {\n                id: getTrad('form.attribute.item.text.regex'),\n              },\n              name: 'regex',\n              type: 'text',\n              validations: {},\n              description: {\n                id: getTrad('form.attribute.item.text.regex.description'),\n              },\n            },\n          ]);\n        } else if (type === 'media') {\n          items.splice(0, 1);\n          items.push([\n            {\n              label: {\n                id: getTrad('form.attribute.media.allowed-types'),\n              },\n              name: 'allowedTypes',\n              type: 'allowedTypesSelect',\n              value: '',\n              validations: {},\n            },\n          ]);\n        } else if (type === 'boolean') {\n          items.splice(0, 1, [\n            {\n              ...fields.default,\n              type: 'enum',\n              options: [\n                { value: 'true', label: 'TRUE' },\n                { value: '', label: 'NULL' },\n                { value: 'false', label: 'FALSE' },\n              ],\n              validations: {},\n            },\n          ]);\n        } else if (type === 'enumeration') {\n          items.splice(0, 1, [\n            {\n              autoFocus: false,\n              name: 'default',\n              type: 'select',\n              label: {\n                id: getTrad('form.attribute.settings.default'),\n              },\n              validations: {},\n              options: [\n                <FormattedMessage\n                  key=\"hidden___value__placeholder\"\n                  id=\"components.InputSelect.option.placeholder\"\n                >\n                  {msg => <option value=\"\">{msg}</option>}\n                </FormattedMessage>,\n              ].concat(\n                data.enum\n                  ? data.enum\n                      .filter((val, index) => data.enum.indexOf(val) === index && !isEmpty(val))\n                      .map(val => (\n                        <option key={val} value={val}>\n                          {val}\n                        </option>\n                      ))\n                  : []\n              ),\n            },\n          ]);\n          items.splice(1, 0, [\n            {\n              label: {\n                id: getTrad('form.attribute.item.enumeration.graphql'),\n              },\n              name: 'enumName',\n              type: 'text',\n              validations: {},\n              description: {\n                id: getTrad('form.attribute.item.enumeration.graphql.description'),\n              },\n            },\n          ]);\n        } else if (type === 'date') {\n          items.splice(0, 1, [\n            {\n              ...fields.default,\n              type: data.type || 'date',\n              value: null,\n              withDefaultValue: false,\n              disabled: !data.type,\n              autoFocus: false,\n            },\n          ]);\n        } else if (type === 'richtext') {\n          items.splice(4, 1);\n        } else if (type === 'uid') {\n          const uidItems = [\n            [{ ...fields.default, disabled: Boolean(data.targetField), type: 'text' }],\n            [fields.divider],\n            [fields.private],\n            [fields.required],\n          ];\n\n          items = uidItems;\n        } else if (type === 'json') {\n          items.splice(0, 1);\n        }\n\n        if (!ATTRIBUTES_THAT_DONT_HAVE_MIN_MAX_SETTINGS.includes(type)) {\n          items.push(\n            [\n              {\n                autoFocus: false,\n                name: type === 'number' ? 'max' : 'maxLength',\n                type: 'customCheckboxWithChildren',\n                label: {\n                  id: getTrad(`form.attribute.item.maximum${type === 'number' ? '' : 'Length'}`),\n                },\n\n                validations: {},\n              },\n            ],\n            [\n              {\n                autoFocus: false,\n                name: type === 'number' ? 'min' : 'minLength',\n                type: 'customCheckboxWithChildren',\n                label: {\n                  id: getTrad(`form.attribute.item.minimum${type === 'number' ? '' : 'Length'}`),\n                },\n                validations: {},\n              },\n            ]\n          );\n        }\n\n        if (type === 'dynamiczone') {\n          return {\n            items: dynamiczoneItems,\n          };\n        }\n\n        if (type === 'relation') {\n          return {\n            items: relationItems,\n          };\n        }\n\n        return {\n          items,\n        };\n      },\n      base(data, type, step, actionType, attributes) {\n        if (type === 'relation') {\n          return {\n            items: [\n              [\n                {\n                  type: 'relation',\n                },\n              ],\n            ],\n          };\n        }\n\n        const items = [[fields.name]];\n\n        if (type === 'component' && step === '1') {\n          const itemsToConcat =\n            data.createComponent === true\n              ? [[{ type: 'spacer' }]].concat(componentForm.base('componentToCreate.'))\n              : [[{ type: 'spacer' }]];\n\n          return {\n            items: [[fields.createComponent], ...itemsToConcat],\n          };\n        }\n\n        if (type === 'component' && step === '2') {\n          items[0].push({\n            name: 'component',\n            type: 'componentSelect',\n            label: {\n              id: getTrad('modalForm.attributes.select-component'),\n            },\n            isMultiple: false,\n          });\n          items.push([\n            {\n              label: {\n                id: getTrad('modalForm.attribute.text.type-selection'),\n              },\n              name: 'repeatable',\n              type: 'booleanBox',\n              size: 12,\n              options: [\n                {\n                  headerId: getTrad('form.attribute.component.option.repeatable'),\n                  descriptionId: getTrad('form.attribute.component.option.repeatable.description'),\n                  value: true,\n                },\n                {\n                  headerId: getTrad('form.attribute.component.option.single'),\n                  descriptionId: getTrad('form.attribute.component.option.single.description'),\n                  value: false,\n                },\n              ],\n              validations: {},\n            },\n          ]);\n          items.push([{ type: 'spacer' }]);\n        }\n\n        if (type === 'text' || type === 'media') {\n          items.push([\n            {\n              label: {\n                id: getTrad('modalForm.attribute.text.type-selection'),\n              },\n              name: type === 'text' ? 'type' : 'multiple',\n              type: 'booleanBox',\n              size: 12,\n              options: [\n                {\n                  headerId: getTrad(\n                    `form.attribute.${type}.option.${type === 'text' ? 'short-text' : 'multiple'}`\n                  ),\n                  descriptionId: getTrad(\n                    `form.attribute.${type}.option.${\n                      type === 'text' ? 'short-text' : 'multiple'\n                    }.description`\n                  ),\n                  value: type === 'text' ? 'string' : true,\n                },\n                {\n                  headerId: getTrad(\n                    `form.attribute.${type}.option.${type === 'text' ? 'long-text' : 'single'}`\n                  ),\n                  descriptionId: getTrad(\n                    `form.attribute.${type}.option.${\n                      type === 'text' ? 'long-text' : 'single'\n                    }.description`\n                  ),\n                  value: type === 'text' ? 'text' : false,\n                },\n              ],\n              validations: {},\n            },\n          ]);\n          items.push([{ type: 'spacer-medium' }]);\n        }\n\n        if (type === 'number') {\n          items[0].push({\n            label: {\n              id: getTrad('form.attribute.item.number.type'),\n            },\n            name: 'type',\n            type: 'select',\n            options: [\n              { id: 'components.InputSelect.option.placeholder', value: '' },\n              {\n                id: 'form.attribute.item.number.type.integer',\n                value: 'integer',\n              },\n              {\n                id: 'form.attribute.item.number.type.biginteger',\n                value: 'biginteger',\n              },\n              {\n                id: 'form.attribute.item.number.type.decimal',\n                value: 'decimal',\n              },\n              { id: 'form.attribute.item.number.type.float', value: 'float' },\n            ].map(({ id, value }, index) => {\n              const disabled = index === 0;\n              const tradId = index === 0 ? id : getTrad(id);\n\n              return (\n                <FormattedMessage id={tradId} key={id}>\n                  {msg => (\n                    <option disabled={disabled} hidden={disabled} value={value}>\n                      {msg}\n                    </option>\n                  )}\n                </FormattedMessage>\n              );\n            }),\n            validations: {\n              required: true,\n            },\n          });\n        }\n\n        if (type === 'date') {\n          items[0].push({\n            label: {\n              id: getTrad('modalForm.attribute.text.type-selection'),\n            },\n            name: 'type',\n            type: 'select',\n            options: [\n              { id: 'components.InputSelect.option.placeholder', value: '' },\n              {\n                id: 'form.attribute.item.date.type.date',\n                value: 'date',\n              },\n              {\n                id: 'form.attribute.item.date.type.datetime',\n                value: 'datetime',\n              },\n              // Not sure the ctm supports that one\n              // {\n              //   id: 'form.attribute.item.date.type.timestamp',\n              //   value: 'timestamp',\n              // },\n              { id: 'form.attribute.item.date.type.time', value: 'time' },\n            ].map(({ id, value }, index) => {\n              const disabled = index === 0;\n              const tradId = index === 0 ? id : getTrad(id);\n\n              return (\n                <FormattedMessage id={tradId} key={id}>\n                  {msg => (\n                    <option disabled={disabled} hidden={disabled} value={value}>\n                      {msg}\n                    </option>\n                  )}\n                </FormattedMessage>\n              );\n            }),\n            validations: {\n              required: true,\n            },\n          });\n        }\n\n        if (type === 'enumeration') {\n          items.push([\n            {\n              autoFocus: false,\n              name: 'enum',\n              type: 'textarea',\n              size: 8,\n              label: {\n                id: getTrad('form.attribute.item.enumeration.rules'),\n              },\n              placeholder: {\n                id: getTrad('form.attribute.item.enumeration.placeholder'),\n              },\n              validations: {\n                required: true,\n              },\n            },\n          ]);\n        }\n\n        if (type === 'uid') {\n          const options = Object.keys(attributes)\n            .filter(key => ['string', 'text'].includes(attributes[key].type))\n            .map(key => ({ id: key, value: key }));\n\n          return {\n            items: [\n              [\n                {\n                  ...fields.name,\n                  placeholder: {\n                    id: getTrad('modalForm.attribute.form.base.name.placeholder'),\n                  },\n                },\n                {\n                  label: {\n                    id: getTrad('modalForm.attribute.target-field'),\n                  },\n                  name: 'targetField',\n                  type: 'select',\n                  options: [{ id: getTrad('none'), value: '' }, ...options].map((option, index) => (\n                    // eslint-disable-next-line react/no-array-index-key\n                    <Fragment key={index}>\n                      {index === 0 ? (\n                        <FormattedMessage id={option.id}>\n                          {msg => <option value={option.value}>{msg}</option>}\n                        </FormattedMessage>\n                      ) : (\n                        <option value={option.value}>{option.value}</option>\n                      )}\n                    </Fragment>\n                  )),\n                  validations: {\n                    required: true,\n                  },\n                },\n              ],\n            ],\n          };\n        }\n\n        return {\n          items,\n        };\n      },\n    },\n  },\n  contentType: {\n    schema(alreadyTakenNames, isEditing, ctUid, reservedNames) {\n      const takenNames = isEditing\n        ? alreadyTakenNames.filter(uid => uid !== ctUid)\n        : alreadyTakenNames;\n\n      return yup.object().shape({\n        name: yup\n          .string()\n          .unique(errorsTrads.unique, takenNames, createUid)\n          .isAllowed(getTrad('error.contentTypeName.reserved-name'), reservedNames.models)\n          .required(errorsTrads.required),\n        collectionName: yup.string(),\n        draftAndPublish: yup.boolean(),\n        kind: yup.string().oneOf(['singleType', 'collectionType']),\n      });\n    },\n    form: {\n      base(data = {}, type, step, actionType) {\n        const items = [\n          [\n            {\n              autoFocus: true,\n              name: 'name',\n              type: 'text',\n              label: {\n                id: `${pluginId}.contentType.displayName.label`,\n              },\n              validations: {\n                required: true,\n              },\n            },\n          ],\n        ];\n\n        if (actionType === 'create') {\n          items[0].push({\n            description: {\n              id: `${pluginId}.contentType.UID.description`,\n            },\n            label: 'UID',\n            name: 'uid',\n            type: 'text',\n            readOnly: true,\n            disabled: true,\n            value: data.name ? nameToSlug(data.name) : '',\n          });\n        }\n\n        if (actionType === 'edit') {\n          items[0].push({\n            label: {\n              id: getTrad('modalForm.attribute.text.type-selection'),\n            },\n            name: 'kind',\n            type: 'booleanBox',\n            size: 12,\n            onChangeCallback: () =>\n              strapi.notification.toggle({\n                type: 'info',\n                message: { id: getTrad('contentType.kind.change.warning') },\n              }),\n            options: [\n              {\n                headerId: getTrad('menu.section.models.name.singular'),\n                descriptionId: getTrad('form.button.collection-type.description'),\n                value: 'collectionType',\n              },\n              {\n                headerId: getTrad('menu.section.single-types.name.singular'),\n                descriptionId: getTrad('form.button.single-type.description'),\n                value: 'singleType',\n              },\n            ],\n            validations: {},\n          });\n        }\n\n        return { items };\n      },\n      advanced() {\n        return {\n          items: [\n            [\n              {\n                type: 'dividerDraftPublish',\n              },\n            ],\n            [\n              {\n                label: {\n                  id: `${pluginId}.contentType.draftAndPublish.label`,\n                },\n                description: {\n                  id: `${pluginId}.contentType.draftAndPublish.description`,\n                },\n                name: 'draftAndPublish',\n                type: 'bool',\n                validations: {},\n              },\n            ],\n            [fields.divider],\n            [\n              {\n                autoFocus: true,\n                label: {\n                  id: `${pluginId}.contentType.collectionName.label`,\n                },\n                description: {\n                  id: `${pluginId}.contentType.collectionName.description`,\n                },\n                name: 'collectionName',\n                type: 'text',\n                validations: {},\n              },\n            ],\n          ],\n        };\n      },\n    },\n  },\n  component: {\n    schema(\n      alreadyTakenAttributes,\n      componentCategory,\n      reservedNames,\n      isEditing = false,\n      compoUid = null\n    ) {\n      const takenNames = isEditing\n        ? alreadyTakenAttributes.filter(uid => uid !== compoUid)\n        : alreadyTakenAttributes;\n\n      return yup.object().shape({\n        name: yup\n          .string()\n          .unique(errorsTrads.unique, takenNames, createComponentUid, componentCategory)\n          .isAllowed(getTrad('error.contentTypeName.reserved-name'), reservedNames.models)\n          .required(errorsTrads.required),\n        category: yup\n          .string()\n          .matches(CATEGORY_NAME_REGEX, errorsTrads.regex)\n          .required(errorsTrads.required),\n        icon: yup.string().required(errorsTrads.required),\n        collectionName: yup.string().nullable(),\n      });\n    },\n    form: {\n      advanced() {\n        return {\n          items: componentForm.advanced(),\n        };\n      },\n      base() {\n        return {\n          items: componentForm.base(),\n        };\n      },\n    },\n  },\n  addComponentToDynamicZone: {\n    form: {\n      advanced(data, type, step) {\n        return forms.attribute.form.advanced(data, 'component', step);\n      },\n      base(data) {\n        const isCreatingComponent = get(data, 'createComponent', false);\n\n        const itemsToConcat = isCreatingComponent\n          ? [[{ type: 'spacer' }]].concat(componentForm.base('componentToCreate.'))\n          : [\n              [{ type: 'spacer' }],\n              [\n                { type: 'pushRight', size: 6 },\n\n                {\n                  name: 'components',\n                  type: 'componentSelect',\n                  label: {\n                    id: getTrad('modalForm.attributes.select-components'),\n                  },\n                  isMultiple: true,\n                },\n              ],\n              [{ type: 'spacer-small' }],\n            ];\n\n        return {\n          items: [[fields.createComponent], ...itemsToConcat],\n        };\n      },\n    },\n  },\n  editCategory: {\n    schema(allCategories, initialData) {\n      const allowedCategories = allCategories\n        .filter(cat => cat !== initialData.name)\n        .map(cat => toLower(cat));\n\n      return yup.object().shape({\n        name: yup\n          .string()\n          .matches(CATEGORY_NAME_REGEX, errorsTrads.regex)\n          .unique(errorsTrads.unique, allowedCategories, toLower)\n          .required(errorsTrads.required),\n      });\n    },\n    form: {\n      base() {\n        return {\n          items: [\n            [\n              {\n                ...fields.name,\n                description: {\n                  id: getTrad('modalForm.editCategory.base.name.description'),\n                },\n              },\n            ],\n          ],\n        };\n      },\n    },\n  },\n};\n\nexport default forms;\n"]},"metadata":{},"sourceType":"script"}