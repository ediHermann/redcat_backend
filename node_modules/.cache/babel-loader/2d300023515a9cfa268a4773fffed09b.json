{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactDnd = require(\"react-dnd\");\n\nvar _reactDndHtml5Backend = require(\"react-dnd-html5-backend\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _useLayoutDnd2 = _interopRequireDefault(require(\"../../hooks/useLayoutDnd\"));\n\nvar _DraggedFieldWithPreview = _interopRequireDefault(require(\"../DraggedFieldWithPreview\"));\n\nvar _ItemTypes = _interopRequireDefault(require(\"../../utils/ItemTypes\"));\n\nvar Item = function Item(_ref) {\n  var index = _ref.index,\n      move = _ref.move,\n      name = _ref.name,\n      removeItem = _ref.removeItem;\n\n  var _useLayoutDnd = (0, _useLayoutDnd2[\"default\"])(),\n      goTo = _useLayoutDnd.goTo,\n      metadatas = _useLayoutDnd.metadatas,\n      selectedItemName = _useLayoutDnd.selectedItemName,\n      setEditFieldToSelect = _useLayoutDnd.setEditFieldToSelect,\n      setIsDraggingSibling = _useLayoutDnd.setIsDraggingSibling;\n\n  var dragRef = (0, _react.useRef)(null);\n  var dropRef = (0, _react.useRef)(null); // from: https://codesandbox.io/s/github/react-dnd/react-dnd/tree/gh-pages/examples_hooks_js/04-sortable/simple?from-embed\n\n  var _useDrop = (0, _reactDnd.useDrop)({\n    accept: _ItemTypes[\"default\"].EDIT_RELATION,\n    hover: function hover(item, monitor) {\n      if (!dropRef.current) {\n        return;\n      }\n\n      var dragIndex = item.index;\n      var hoverIndex = index; // Don't replace items with themselves\n\n      if (dragIndex === hoverIndex) {\n        return;\n      } // Determine rectangle on screen\n\n\n      var hoverBoundingRect = dropRef.current.getBoundingClientRect(); // Get vertical middle\n\n      var hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2; // Determine mouse position\n\n      var clientOffset = monitor.getClientOffset(); // Get pixels to the top\n\n      var hoverClientY = clientOffset.y - hoverBoundingRect.top; // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      } // Dragging upwards\n\n\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      } // Time to actually perform the action\n\n\n      move(dragIndex, hoverIndex); // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n\n      item.index = hoverIndex;\n    }\n  }),\n      _useDrop2 = (0, _slicedToArray2[\"default\"])(_useDrop, 2),\n      drop = _useDrop2[1];\n\n  var _useDrag = (0, _reactDnd.useDrag)({\n    item: {\n      type: _ItemTypes[\"default\"].EDIT_RELATION,\n      id: name,\n      name: name,\n      index: index\n    },\n    begin: function begin() {\n      // Remove the over state from other components\n      // Since it's a dynamic list where items are replaced on the fly we need to disable all the over state\n      setIsDraggingSibling(true);\n    },\n    end: function end() {\n      setIsDraggingSibling(false);\n    },\n    collect: function collect(monitor) {\n      return {\n        isDragging: monitor.isDragging()\n      };\n    }\n  }),\n      _useDrag2 = (0, _slicedToArray2[\"default\"])(_useDrag, 3),\n      isDragging = _useDrag2[0].isDragging,\n      drag = _useDrag2[1],\n      preview = _useDrag2[2];\n\n  (0, _react.useEffect)(function () {\n    preview((0, _reactDndHtml5Backend.getEmptyImage)(), {\n      captureDraggingState: false\n    });\n  }, [preview]); // Create the refs\n  // We need 1 for the drop target\n  // 1 for the drag target\n\n  var refs = {\n    dragRef: drag(dragRef),\n    dropRef: drop(dropRef)\n  };\n  return /*#__PURE__*/_react[\"default\"].createElement(_DraggedFieldWithPreview[\"default\"], {\n    isDragging: isDragging,\n    label: (0, _lodash.get)(metadatas, [name, 'edit', 'label'], ''),\n    name: name,\n    onClickEdit: function onClickEdit() {\n      return setEditFieldToSelect(name);\n    },\n    onClickRemove: function onClickRemove(e) {\n      e.stopPropagation();\n      removeItem(index);\n    },\n    push: goTo,\n    ref: refs,\n    selectedItem: selectedItemName,\n    size: 12,\n    style: {\n      marginBottom: 6,\n      paddingLeft: 5,\n      paddingRight: 5\n    },\n    type: \"relation\",\n    i: index === 0\n  });\n};\n\nItem.defaultProps = {\n  move: function move() {}\n};\nItem.propTypes = {\n  index: _propTypes[\"default\"].number.isRequired,\n  move: _propTypes[\"default\"].func,\n  name: _propTypes[\"default\"].string.isRequired,\n  removeItem: _propTypes[\"default\"].func.isRequired\n};\nvar _default = Item;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["D:/webstorm_projects/redcat_backend/.cache/plugins/strapi-plugin-content-manager/admin/src/components/SortableList/Item.js"],"names":["Item","index","move","name","removeItem","goTo","metadatas","selectedItemName","setEditFieldToSelect","setIsDraggingSibling","dragRef","dropRef","accept","ItemTypes","EDIT_RELATION","hover","item","monitor","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","drop","type","id","begin","end","collect","isDragging","drag","preview","captureDraggingState","refs","e","stopPropagation","marginBottom","paddingLeft","paddingRight","defaultProps","propTypes","PropTypes","number","isRequired","func","string"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport PropTypes from 'prop-types';\nimport { get } from 'lodash';\nimport useLayoutDnd from '../../hooks/useLayoutDnd';\n\nimport DraggedFieldWithPreview from '../DraggedFieldWithPreview';\n\nimport ItemTypes from '../../utils/ItemTypes';\n\nconst Item = ({ index, move, name, removeItem }) => {\n  const {\n    goTo,\n    metadatas,\n    selectedItemName,\n    setEditFieldToSelect,\n    setIsDraggingSibling,\n  } = useLayoutDnd();\n  const dragRef = useRef(null);\n  const dropRef = useRef(null);\n\n  // from: https://codesandbox.io/s/github/react-dnd/react-dnd/tree/gh-pages/examples_hooks_js/04-sortable/simple?from-embed\n  const [, drop] = useDrop({\n    accept: ItemTypes.EDIT_RELATION,\n    hover(item, monitor) {\n      if (!dropRef.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = dropRef.current.getBoundingClientRect();\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the top\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n      // Time to actually perform the action\n      move(dragIndex, hoverIndex);\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex;\n    },\n  });\n  const [{ isDragging }, drag, preview] = useDrag({\n    item: { type: ItemTypes.EDIT_RELATION, id: name, name, index },\n    begin: () => {\n      // Remove the over state from other components\n      // Since it's a dynamic list where items are replaced on the fly we need to disable all the over state\n      setIsDraggingSibling(true);\n    },\n    end: () => {\n      setIsDraggingSibling(false);\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n\n  useEffect(() => {\n    preview(getEmptyImage(), { captureDraggingState: false });\n  }, [preview]);\n\n  // Create the refs\n  // We need 1 for the drop target\n  // 1 for the drag target\n  const refs = {\n    dragRef: drag(dragRef),\n    dropRef: drop(dropRef),\n  };\n\n  return (\n    <DraggedFieldWithPreview\n      isDragging={isDragging}\n      label={get(metadatas, [name, 'edit', 'label'], '')}\n      name={name}\n      onClickEdit={() => setEditFieldToSelect(name)}\n      onClickRemove={e => {\n        e.stopPropagation();\n        removeItem(index);\n      }}\n      push={goTo}\n      ref={refs}\n      selectedItem={selectedItemName}\n      size={12}\n      style={{ marginBottom: 6, paddingLeft: 5, paddingRight: 5 }}\n      type=\"relation\"\n      i={index === 0}\n    />\n  );\n};\n\nItem.defaultProps = {\n  move: () => {},\n};\n\nItem.propTypes = {\n  index: PropTypes.number.isRequired,\n  move: PropTypes.func,\n  name: PropTypes.string.isRequired,\n  removeItem: PropTypes.func.isRequired,\n};\n\nexport default Item;\n"]},"metadata":{},"sourceType":"script"}