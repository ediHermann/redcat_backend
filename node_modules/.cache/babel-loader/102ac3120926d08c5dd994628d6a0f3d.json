{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.crudInitialState = exports[\"default\"] = void 0;\n\nvar _immer = _interopRequireDefault(require(\"immer\"));\n\n/* eslint-disable consistent-return */\n// NOTE: instead of creating a shared reducer here, we could also create a hook\n// that returns the dispatch and the state, however it will mess with the linter\n// and force us to either disable the linter for the hooks dependencies array rule or\n// require us to add the dispatch to the array wich is not wanted. This refacto does not require us to\n// to do any of this.\nvar crudInitialState = {\n  componentsDataStructure: {},\n  contentTypeDataStructure: {},\n  isLoading: true,\n  data: {},\n  status: 'resolved'\n};\nexports.crudInitialState = crudInitialState;\n\nvar crudReducer = function crudReducer(state, action) {\n  return (0, _immer[\"default\"])(state, function (draftState) {\n    switch (action.type) {\n      case 'GET_DATA':\n        {\n          draftState.isLoading = true;\n          draftState.data = {};\n          break;\n        }\n\n      case 'GET_DATA_SUCCEEDED':\n        {\n          draftState.isLoading = false;\n          draftState.data = action.data;\n          break;\n        }\n\n      case 'INIT_FORM':\n        {\n          draftState.isLoading = false;\n          draftState.data = state.contentTypeDataStructure;\n          break;\n        }\n\n      case 'SET_DATA_STRUCTURES':\n        {\n          draftState.componentsDataStructure = action.componentsDataStructure;\n          draftState.contentTypeDataStructure = action.contentTypeDataStructure;\n          break;\n        }\n\n      case 'SET_STATUS':\n        {\n          draftState.status = action.status;\n          break;\n        }\n\n      case 'SUBMIT_SUCCEEDED':\n        {\n          draftState.data = action.data;\n          break;\n        }\n\n      default:\n        return draftState;\n    }\n  });\n};\n\nvar _default = crudReducer;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["D:/webstorm_projects/redcat_backend/.cache/plugins/strapi-plugin-content-manager/admin/src/sharedReducers/crudReducer.js"],"names":["crudInitialState","componentsDataStructure","contentTypeDataStructure","isLoading","data","status","crudReducer","state","action","draftState","type"],"mappings":";;;;;;;;;AACA;;AADA;AAGA;AACA;AACA;AACA;AACA;AAEA,IAAMA,gBAAgB,GAAG;AACvBC,EAAAA,uBAAuB,EAAE,EADF;AAEvBC,EAAAA,wBAAwB,EAAE,EAFH;AAGvBC,EAAAA,SAAS,EAAE,IAHY;AAIvBC,EAAAA,IAAI,EAAE,EAJiB;AAKvBC,EAAAA,MAAM,EAAE;AALe,CAAzB;;;AAQA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,MAAR;AAAA,SAClB,uBAAQD,KAAR,EAAe,UAAAE,UAAU,EAAI;AAC3B,YAAQD,MAAM,CAACE,IAAf;AACE,WAAK,UAAL;AAAiB;AACfD,UAAAA,UAAU,CAACN,SAAX,GAAuB,IAAvB;AACAM,UAAAA,UAAU,CAACL,IAAX,GAAkB,EAAlB;AACA;AACD;;AACD,WAAK,oBAAL;AAA2B;AACzBK,UAAAA,UAAU,CAACN,SAAX,GAAuB,KAAvB;AACAM,UAAAA,UAAU,CAACL,IAAX,GAAkBI,MAAM,CAACJ,IAAzB;AACA;AACD;;AACD,WAAK,WAAL;AAAkB;AAChBK,UAAAA,UAAU,CAACN,SAAX,GAAuB,KAAvB;AACAM,UAAAA,UAAU,CAACL,IAAX,GAAkBG,KAAK,CAACL,wBAAxB;AACA;AACD;;AACD,WAAK,qBAAL;AAA4B;AAC1BO,UAAAA,UAAU,CAACR,uBAAX,GAAqCO,MAAM,CAACP,uBAA5C;AACAQ,UAAAA,UAAU,CAACP,wBAAX,GAAsCM,MAAM,CAACN,wBAA7C;AACA;AACD;;AACD,WAAK,YAAL;AAAmB;AACjBO,UAAAA,UAAU,CAACJ,MAAX,GAAoBG,MAAM,CAACH,MAA3B;AACA;AACD;;AACD,WAAK,kBAAL;AAAyB;AACvBI,UAAAA,UAAU,CAACL,IAAX,GAAkBI,MAAM,CAACJ,IAAzB;AACA;AACD;;AACD;AACE,eAAOK,UAAP;AA9BJ;AAgCD,GAjCD,CADkB;AAAA,CAApB;;eAoCeH,W","sourcesContent":["/* eslint-disable consistent-return */\nimport produce from 'immer';\n\n// NOTE: instead of creating a shared reducer here, we could also create a hook\n// that returns the dispatch and the state, however it will mess with the linter\n// and force us to either disable the linter for the hooks dependencies array rule or\n// require us to add the dispatch to the array wich is not wanted. This refacto does not require us to\n// to do any of this.\n\nconst crudInitialState = {\n  componentsDataStructure: {},\n  contentTypeDataStructure: {},\n  isLoading: true,\n  data: {},\n  status: 'resolved',\n};\n\nconst crudReducer = (state, action) =>\n  produce(state, draftState => {\n    switch (action.type) {\n      case 'GET_DATA': {\n        draftState.isLoading = true;\n        draftState.data = {};\n        break;\n      }\n      case 'GET_DATA_SUCCEEDED': {\n        draftState.isLoading = false;\n        draftState.data = action.data;\n        break;\n      }\n      case 'INIT_FORM': {\n        draftState.isLoading = false;\n        draftState.data = state.contentTypeDataStructure;\n        break;\n      }\n      case 'SET_DATA_STRUCTURES': {\n        draftState.componentsDataStructure = action.componentsDataStructure;\n        draftState.contentTypeDataStructure = action.contentTypeDataStructure;\n        break;\n      }\n      case 'SET_STATUS': {\n        draftState.status = action.status;\n        break;\n      }\n      case 'SUBMIT_SUCCEEDED': {\n        draftState.data = action.data;\n        break;\n      }\n      default:\n        return draftState;\n    }\n  });\n\nexport default crudReducer;\nexport { crudInitialState };\n"]},"metadata":{},"sourceType":"script"}