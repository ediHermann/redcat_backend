{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _core = require(\"@buffetjs/core\");\n\nvar _utils = require(\"../../../../../utils\");\n\nvar _hooks = require(\"../../../../../hooks\");\n\nvar _ConditionsButton = _interopRequireDefault(require(\"../../../ConditionsButton\"));\n\nvar _ConditionsModal = _interopRequireDefault(require(\"../../../ConditionsModal\"));\n\nvar _utils2 = require(\"../../utils\");\n\nvar _Chevron = _interopRequireDefault(require(\"./Chevron\"));\n\nvar _CollapseLabel = _interopRequireDefault(require(\"../CollapseLabel\"));\n\nvar _ContentTypesAttributes = _interopRequireDefault(require(\"./ContentTypesAttributes\"));\n\nvar _PermissionCheckbox = _interopRequireDefault(require(\"../PermissionCheckbox\"));\n\nvar _PermissionName = _interopRequireDefault(require(\"./PermissionName\"));\n\nvar _PermissionWrapper = _interopRequireDefault(require(\"./PermissionWrapper\"));\n\nvar _RowWrapper = _interopRequireDefault(require(\"./RowWrapper\"));\n\nvar _StyledRow = _interopRequireDefault(require(\"./StyledRow\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar ContentTypeRow = function ContentTypeRow(_ref) {\n  var index = _ref.index,\n      contentType = _ref.contentType,\n      permissionsLayout = _ref.permissionsLayout;\n\n  var _useState = (0, _react.useState)({\n    isOpen: false,\n    isMounted: false\n  }),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      modal = _useState2[0],\n      setModal = _useState2[1];\n\n  var _usePermissionsContex = (0, _hooks.usePermissionsContext)(),\n      collapsePath = _usePermissionsContex.collapsePath,\n      dispatch = _usePermissionsContex.dispatch,\n      contentTypesPermissions = _usePermissionsContex.contentTypesPermissions,\n      components = _usePermissionsContex.components,\n      isSuperAdmin = _usePermissionsContex.isSuperAdmin;\n\n  var isActive = collapsePath[0] === contentType.uid;\n  var existingActions = (0, _react.useMemo)(function () {\n    return (0, _utils2.getAllAttributesActions)(contentType.uid, contentTypesPermissions);\n  }, [contentType.uid, contentTypesPermissions]);\n  var contentTypeActions = (0, _react.useMemo)(function () {\n    var contentTypesActionObject = (0, _lodash.get)(contentTypesPermissions, [contentType.uid, 'contentTypeActions'], {});\n    return Object.keys(contentTypesActionObject).filter(function (action) {\n      return !!contentTypesActionObject[action];\n    });\n  }, [contentType, contentTypesPermissions]);\n  var conditions = (0, _react.useMemo)(function () {\n    return (0, _lodash.get)(contentTypesPermissions, [contentType.uid, 'conditions'], {});\n  }, [contentType, contentTypesPermissions]);\n  var actionsForConditions = (0, _react.useMemo)(function () {\n    return Array.from(new Set([].concat((0, _toConsumableArray2[\"default\"])(contentTypeActions), (0, _toConsumableArray2[\"default\"])(existingActions)))).map(function (action) {\n      return {\n        id: action,\n        displayName: action.split('.')[action.split('.').length - 1]\n      };\n    });\n  }, [contentTypeActions, existingActions]); // Number of all actions in the current content type.\n\n  var allCurrentActionsSize = (0, _react.useMemo)(function () {\n    return existingActions.length + contentTypeActions.length;\n  }, [contentTypeActions.length, existingActions.length]); // Attributes to display : Liste of attributes of in the content type without timestamps and id\n  // Used to display the first level of attributes.\n\n  var attributesToDisplay = (0, _react.useMemo)(function () {\n    return (0, _utils.getAttributesToDisplay)(contentType);\n  }, [contentType]); // All recursive attributes.\n  // Used to recursively set the global content type action\n\n  var attributes = (0, _react.useMemo)(function () {\n    return (0, _utils2.getAttributesByModel)(contentType, components);\n  }, [contentType, components]);\n  var contentTypesActions = (0, _react.useMemo)(function () {\n    return permissionsLayout.filter(function (layout) {\n      return layout.subjects.includes(contentType.uid);\n    });\n  }, [contentType, permissionsLayout]);\n  var allActionsSize = (0, _react.useMemo)(function () {\n    var staticContentTypeActions = contentTypesActions.filter(function (permission) {\n      return !(0, _utils2.isAttributeAction)(permission.action);\n    });\n    return attributes.length * _utils2.STATIC_ATTRIBUTE_ACTIONS.length + staticContentTypeActions.length;\n  }, [attributes, contentTypesActions]);\n  var hasContentTypeAction = (0, _react.useCallback)(function (action) {\n    return (0, _lodash.get)(contentTypesPermissions, [contentType.uid, 'contentTypeActions', action], false);\n  }, [contentTypesPermissions, contentType]);\n  var getAttributesPermissions = (0, _react.useCallback)(function (action) {\n    return (0, _utils2.getAttributePermissionsSizeByContentTypeAction)(contentTypesPermissions, contentType.uid, action);\n  }, [contentType, contentTypesPermissions]); // Check if an attribute have the passed action\n  // Used to set the someChecked props of an action checkbox\n\n  var hasSomeAttributeByAction = (0, _react.useCallback)(function (action) {\n    var attributesPermissionsCount = getAttributesPermissions(action);\n    return attributesPermissionsCount > 0 && attributesPermissionsCount < attributes.length;\n  }, [attributes, getAttributesPermissions]);\n  var hasAllAttributeAction = (0, _react.useCallback)(function (action) {\n    var attributesPermissionsCount = getAttributesPermissions(action);\n    return attributesPermissionsCount === attributes.length;\n  }, [attributes.length, getAttributesPermissions]);\n  var checkConditions = (0, _react.useCallback)(function (action) {\n    return (0, _lodash.get)(conditions, [action], []).length > 0;\n  }, [conditions]);\n  var subjectHasConditions = (0, _react.useMemo)(function () {\n    return Object.values(conditions).flat().length > 0;\n  }, [conditions]);\n\n  var handleToggleAttributes = function handleToggleAttributes() {\n    dispatch({\n      type: 'COLLAPSE_PATH',\n      index: 0,\n      value: contentType.uid\n    });\n  }; // Check/Uncheck all the actions for all\n  // attributes of the current content type\n\n\n  var handleAllContentTypeActions = function handleAllContentTypeActions(_ref2) {\n    var target = _ref2.target;\n    dispatch({\n      type: 'ALL_CONTENT_TYPE_PERMISSIONS_SELECT',\n      subject: contentType.uid,\n      attributes: (0, _utils2.getAttributesByModel)(contentType, components),\n      shouldEnable: target.value,\n      shouldSetAllContentTypes: true\n    });\n  };\n\n  var handleModalOpen = function handleModalOpen() {\n    setModal({\n      isMounted: true,\n      isOpen: true\n    });\n  };\n\n  var handleToggleModal = function handleToggleModal() {\n    setModal(function (prev) {\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        isOpen: !prev.isOpen\n      });\n    });\n  };\n\n  var handleClosed = function handleClosed() {\n    setModal(function (prev) {\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        isMounted: false\n      });\n    });\n  };\n\n  var handleModalSubmit = function handleModalSubmit(conditions) {\n    dispatch({\n      type: 'ON_CONTENT_TYPE_CONDITIONS_SELECT',\n      subject: contentType.uid,\n      conditions: conditions\n    });\n  };\n\n  var permissionsToDisplay = (0, _react.useMemo)(function () {\n    return permissionsLayout.filter(function (permission) {\n      return permission.subjects.includes(contentType.uid);\n    });\n  }, [contentType, permissionsLayout]);\n  var someChecked = (0, _react.useMemo)(function () {\n    return allCurrentActionsSize > 0 && allCurrentActionsSize < allActionsSize;\n  }, [allActionsSize, allCurrentActionsSize]);\n  return /*#__PURE__*/_react[\"default\"].createElement(_RowWrapper[\"default\"], {\n    withMargin: index % 2 !== 0\n  }, /*#__PURE__*/_react[\"default\"].createElement(_StyledRow[\"default\"], {\n    disabled: isSuperAdmin,\n    isActive: isActive,\n    isGrey: index % 2 === 0\n  }, /*#__PURE__*/_react[\"default\"].createElement(_core.Flex, {\n    style: {\n      flex: 1\n    }\n  }, /*#__PURE__*/_react[\"default\"].createElement(_core.Padded, {\n    left: true,\n    size: \"sm\"\n  }), /*#__PURE__*/_react[\"default\"].createElement(_PermissionName[\"default\"], {\n    disabled: true\n  }, /*#__PURE__*/_react[\"default\"].createElement(_core.Checkbox, {\n    onChange: handleAllContentTypeActions,\n    name: contentType.info.name,\n    disabled: isSuperAdmin,\n    someChecked: someChecked,\n    value: allCurrentActionsSize === allActionsSize\n  }), /*#__PURE__*/_react[\"default\"].createElement(_CollapseLabel[\"default\"], {\n    title: contentType.info.name,\n    alignItems: \"center\",\n    isCollapsable: true,\n    onClick: handleToggleAttributes\n  }, /*#__PURE__*/_react[\"default\"].createElement(_core.Text, {\n    color: \"grey\",\n    ellipsis: true,\n    fontSize: \"xs\",\n    fontWeight: \"bold\",\n    lineHeight: \"20px\",\n    textTransform: \"uppercase\"\n  }, contentType.info.name), /*#__PURE__*/_react[\"default\"].createElement(_Chevron[\"default\"], {\n    icon: isActive ? 'chevron-up' : 'chevron-down'\n  }))), /*#__PURE__*/_react[\"default\"].createElement(_PermissionWrapper[\"default\"], {\n    disabled: true\n  }, permissionsToDisplay.map(function (permissionLayout) {\n    var action = permissionLayout.action;\n    var someChecked = (0, _utils2.isAttributeAction)(action) ? hasSomeAttributeByAction(action) : null;\n    var value = (0, _utils2.isAttributeAction)(action) ? hasAllAttributeAction(action) : hasContentTypeAction(action);\n    return /*#__PURE__*/_react[\"default\"].createElement(_PermissionCheckbox[\"default\"], {\n      key: action,\n      hasConditions: checkConditions(action),\n      disabled: true,\n      value: value,\n      name: \"\".concat(contentType.info.name, \"-\").concat(action),\n      someChecked: someChecked\n    });\n  })), /*#__PURE__*/_react[\"default\"].createElement(_ConditionsButton[\"default\"], {\n    isRight: true,\n    hasConditions: subjectHasConditions,\n    onClick: handleModalOpen\n  }))), isActive && /*#__PURE__*/_react[\"default\"].createElement(_ContentTypesAttributes[\"default\"], {\n    withPadding: index % 2 !== 0,\n    contentType: contentType,\n    attributes: attributesToDisplay\n  }), modal.isMounted && /*#__PURE__*/_react[\"default\"].createElement(_ConditionsModal[\"default\"], {\n    actions: actionsForConditions,\n    initialConditions: conditions,\n    onToggle: handleToggleModal,\n    onSubmit: handleModalSubmit,\n    isOpen: modal.isOpen,\n    onClosed: handleClosed,\n    headerBreadCrumbs: [contentType.info.name, 'app.components.LeftMenuLinkContainer.settings']\n  }));\n};\n\nContentTypeRow.propTypes = {\n  contentType: _propTypes[\"default\"].object.isRequired,\n  index: _propTypes[\"default\"].number.isRequired,\n  permissionsLayout: _propTypes[\"default\"].array.isRequired\n};\nvar _default = ContentTypeRow;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["D:/webstorm_projects/redcat_backend/.cache/admin/src/components/Roles/Permissions/ContentTypes/ContentTypesRow/index.js"],"names":["ContentTypeRow","index","contentType","permissionsLayout","isOpen","isMounted","modal","setModal","collapsePath","dispatch","contentTypesPermissions","components","isSuperAdmin","isActive","uid","existingActions","contentTypeActions","contentTypesActionObject","Object","keys","filter","action","conditions","actionsForConditions","Array","from","Set","map","id","displayName","split","length","allCurrentActionsSize","attributesToDisplay","attributes","contentTypesActions","layout","subjects","includes","allActionsSize","staticContentTypeActions","permission","STATIC_ATTRIBUTE_ACTIONS","hasContentTypeAction","getAttributesPermissions","hasSomeAttributeByAction","attributesPermissionsCount","hasAllAttributeAction","checkConditions","subjectHasConditions","values","flat","handleToggleAttributes","type","value","handleAllContentTypeActions","target","subject","shouldEnable","shouldSetAllContentTypes","handleModalOpen","handleToggleModal","prev","handleClosed","handleModalSubmit","permissionsToDisplay","someChecked","flex","info","name","permissionLayout","propTypes","PropTypes","object","isRequired","number","array"],"mappings":"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","sourcesContent":["import React, { useMemo, useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { get } from 'lodash';\nimport { Checkbox, Flex, Text, Padded } from '@buffetjs/core';\n\nimport { getAttributesToDisplay } from '../../../../../utils';\nimport { usePermissionsContext } from '../../../../../hooks';\nimport ConditionsButton from '../../../ConditionsButton';\nimport ConditionsModal from '../../../ConditionsModal';\nimport {\n  getAllAttributesActions,\n  getAttributePermissionsSizeByContentTypeAction,\n  getAttributesByModel,\n  isAttributeAction,\n  STATIC_ATTRIBUTE_ACTIONS,\n} from '../../utils';\nimport Chevron from './Chevron';\nimport CollapseLabel from '../CollapseLabel';\nimport ContentTypesAttributes from './ContentTypesAttributes';\nimport PermissionCheckbox from '../PermissionCheckbox';\nimport PermissionName from './PermissionName';\nimport PermissionWrapper from './PermissionWrapper';\nimport RowWrapper from './RowWrapper';\nimport StyledRow from './StyledRow';\n\nconst ContentTypeRow = ({ index, contentType, permissionsLayout }) => {\n  const [modal, setModal] = useState({ isOpen: false, isMounted: false });\n  const {\n    collapsePath,\n    dispatch,\n    contentTypesPermissions,\n    components,\n    isSuperAdmin,\n  } = usePermissionsContext();\n  const isActive = collapsePath[0] === contentType.uid;\n  const existingActions = useMemo(\n    () => getAllAttributesActions(contentType.uid, contentTypesPermissions),\n    [contentType.uid, contentTypesPermissions]\n  );\n\n  const contentTypeActions = useMemo(() => {\n    const contentTypesActionObject = get(\n      contentTypesPermissions,\n      [contentType.uid, 'contentTypeActions'],\n      {}\n    );\n\n    return Object.keys(contentTypesActionObject).filter(\n      action => !!contentTypesActionObject[action]\n    );\n  }, [contentType, contentTypesPermissions]);\n\n  const conditions = useMemo(() => {\n    return get(contentTypesPermissions, [contentType.uid, 'conditions'], {});\n  }, [contentType, contentTypesPermissions]);\n\n  const actionsForConditions = useMemo(() => {\n    return Array.from(new Set([...contentTypeActions, ...existingActions])).map(action => ({\n      id: action,\n      displayName: action.split('.')[action.split('.').length - 1],\n    }));\n  }, [contentTypeActions, existingActions]);\n\n  // Number of all actions in the current content type.\n  const allCurrentActionsSize = useMemo(() => {\n    return existingActions.length + contentTypeActions.length;\n  }, [contentTypeActions.length, existingActions.length]);\n\n  // Attributes to display : Liste of attributes of in the content type without timestamps and id\n  // Used to display the first level of attributes.\n  const attributesToDisplay = useMemo(() => {\n    return getAttributesToDisplay(contentType);\n  }, [contentType]);\n\n  // All recursive attributes.\n  // Used to recursively set the global content type action\n  const attributes = useMemo(() => {\n    return getAttributesByModel(contentType, components);\n  }, [contentType, components]);\n\n  const contentTypesActions = useMemo(\n    () => permissionsLayout.filter(layout => layout.subjects.includes(contentType.uid)),\n    [contentType, permissionsLayout]\n  );\n\n  const allActionsSize = useMemo(() => {\n    const staticContentTypeActions = contentTypesActions.filter(\n      permission => !isAttributeAction(permission.action)\n    );\n\n    return attributes.length * STATIC_ATTRIBUTE_ACTIONS.length + staticContentTypeActions.length;\n  }, [attributes, contentTypesActions]);\n\n  const hasContentTypeAction = useCallback(\n    action => get(contentTypesPermissions, [contentType.uid, 'contentTypeActions', action], false),\n    [contentTypesPermissions, contentType]\n  );\n\n  const getAttributesPermissions = useCallback(\n    action => {\n      return getAttributePermissionsSizeByContentTypeAction(\n        contentTypesPermissions,\n        contentType.uid,\n        action\n      );\n    },\n    [contentType, contentTypesPermissions]\n  );\n\n  // Check if an attribute have the passed action\n  // Used to set the someChecked props of an action checkbox\n  const hasSomeAttributeByAction = useCallback(\n    action => {\n      const attributesPermissionsCount = getAttributesPermissions(action);\n\n      return attributesPermissionsCount > 0 && attributesPermissionsCount < attributes.length;\n    },\n    [attributes, getAttributesPermissions]\n  );\n\n  const hasAllAttributeAction = useCallback(\n    action => {\n      const attributesPermissionsCount = getAttributesPermissions(action);\n\n      return attributesPermissionsCount === attributes.length;\n    },\n    [attributes.length, getAttributesPermissions]\n  );\n\n  const checkConditions = useCallback(\n    action => {\n      return get(conditions, [action], []).length > 0;\n    },\n    [conditions]\n  );\n\n  const subjectHasConditions = useMemo(() => {\n    return Object.values(conditions).flat().length > 0;\n  }, [conditions]);\n\n  const handleToggleAttributes = () => {\n    dispatch({\n      type: 'COLLAPSE_PATH',\n      index: 0,\n      value: contentType.uid,\n    });\n  };\n\n  // Check/Uncheck all the actions for all\n  // attributes of the current content type\n  const handleAllContentTypeActions = ({ target }) => {\n    dispatch({\n      type: 'ALL_CONTENT_TYPE_PERMISSIONS_SELECT',\n      subject: contentType.uid,\n      attributes: getAttributesByModel(contentType, components),\n      shouldEnable: target.value,\n      shouldSetAllContentTypes: true,\n    });\n  };\n\n  const handleModalOpen = () => {\n    setModal({\n      isMounted: true,\n      isOpen: true,\n    });\n  };\n\n  const handleToggleModal = () => {\n    setModal(prev => ({\n      ...prev,\n      isOpen: !prev.isOpen,\n    }));\n  };\n\n  const handleClosed = () => {\n    setModal(prev => ({ ...prev, isMounted: false }));\n  };\n\n  const handleModalSubmit = conditions => {\n    dispatch({\n      type: 'ON_CONTENT_TYPE_CONDITIONS_SELECT',\n      subject: contentType.uid,\n      conditions,\n    });\n  };\n\n  const permissionsToDisplay = useMemo(() => {\n    return permissionsLayout.filter(permission => permission.subjects.includes(contentType.uid));\n  }, [contentType, permissionsLayout]);\n\n  const someChecked = useMemo(() => {\n    return allCurrentActionsSize > 0 && allCurrentActionsSize < allActionsSize;\n  }, [allActionsSize, allCurrentActionsSize]);\n\n  return (\n    <RowWrapper withMargin={index % 2 !== 0}>\n      <StyledRow disabled={isSuperAdmin} isActive={isActive} isGrey={index % 2 === 0}>\n        <Flex style={{ flex: 1 }}>\n          <Padded left size=\"sm\" />\n          <PermissionName disabled>\n            <Checkbox\n              onChange={handleAllContentTypeActions}\n              name={contentType.info.name}\n              disabled={isSuperAdmin}\n              someChecked={someChecked}\n              value={allCurrentActionsSize === allActionsSize}\n            />\n            <CollapseLabel\n              title={contentType.info.name}\n              alignItems=\"center\"\n              isCollapsable\n              onClick={handleToggleAttributes}\n            >\n              <Text\n                color=\"grey\"\n                ellipsis\n                fontSize=\"xs\"\n                fontWeight=\"bold\"\n                lineHeight=\"20px\"\n                textTransform=\"uppercase\"\n              >\n                {contentType.info.name}\n              </Text>\n              <Chevron icon={isActive ? 'chevron-up' : 'chevron-down'} />\n            </CollapseLabel>\n          </PermissionName>\n          <PermissionWrapper disabled>\n            {permissionsToDisplay.map(permissionLayout => {\n              const { action } = permissionLayout;\n              const someChecked = isAttributeAction(action)\n                ? hasSomeAttributeByAction(action)\n                : null;\n              const value = isAttributeAction(action)\n                ? hasAllAttributeAction(action)\n                : hasContentTypeAction(action);\n\n              return (\n                <PermissionCheckbox\n                  key={action}\n                  hasConditions={checkConditions(action)}\n                  disabled\n                  value={value}\n                  name={`${contentType.info.name}-${action}`}\n                  someChecked={someChecked}\n                />\n              );\n            })}\n          </PermissionWrapper>\n          <ConditionsButton\n            isRight\n            hasConditions={subjectHasConditions}\n            onClick={handleModalOpen}\n          />\n        </Flex>\n      </StyledRow>\n      {isActive && (\n        <ContentTypesAttributes\n          withPadding={index % 2 !== 0}\n          contentType={contentType}\n          attributes={attributesToDisplay}\n        />\n      )}\n      {modal.isMounted && (\n        <ConditionsModal\n          actions={actionsForConditions}\n          initialConditions={conditions}\n          onToggle={handleToggleModal}\n          onSubmit={handleModalSubmit}\n          isOpen={modal.isOpen}\n          onClosed={handleClosed}\n          headerBreadCrumbs={[\n            contentType.info.name,\n            'app.components.LeftMenuLinkContainer.settings',\n          ]}\n        />\n      )}\n    </RowWrapper>\n  );\n};\n\nContentTypeRow.propTypes = {\n  contentType: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired,\n  permissionsLayout: PropTypes.array.isRequired,\n};\n\nexport default ContentTypeRow;\n"]},"metadata":{},"sourceType":"script"}