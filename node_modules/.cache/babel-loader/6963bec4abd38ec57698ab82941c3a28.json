{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _core = require(\"@buffetjs/core\");\n\nvar _utils = require(\"../../../../../../utils\");\n\nvar _hooks = require(\"../../../../../../hooks\");\n\nvar _utils2 = require(\"../../../utils\");\n\nvar _AttributeRowWrapper = _interopRequireDefault(require(\"./AttributeRowWrapper\"));\n\nvar _Chevron = _interopRequireDefault(require(\"../Chevron\"));\n\nvar _CollapseLabel = _interopRequireDefault(require(\"../../CollapseLabel\"));\n\nvar _ComponentsAttributes = _interopRequireDefault(require(\"../ComponentsAttributes\"));\n\nvar _PermissionCheckbox = _interopRequireDefault(require(\"../../PermissionCheckbox\"));\n\nvar _PermissionName = _interopRequireDefault(require(\"../PermissionName\"));\n\nvar _PermissionWrapper = _interopRequireDefault(require(\"../PermissionWrapper\"));\n\nvar _Required = _interopRequireDefault(require(\"../Required\"));\n\nvar _useFillRequiredPermissions = _interopRequireDefault(require(\"../../useFillRequiredPermissions\"));\n\nvar AttributeRow = function AttributeRow(_ref) {\n  var attribute = _ref.attribute,\n      contentType = _ref.contentType;\n\n  var _usePermissionsContex = (0, _hooks.usePermissionsContext)(),\n      collapsePath = _usePermissionsContex.collapsePath,\n      components = _usePermissionsContex.components,\n      contentTypesPermissions = _usePermissionsContex.contentTypesPermissions,\n      dispatch = _usePermissionsContex.dispatch,\n      isSuperAdmin = _usePermissionsContex.isSuperAdmin;\n\n  var fillRequiredPermissions = (0, _useFillRequiredPermissions[\"default\"])(contentType);\n  var isCollapsable = attribute.type === 'component';\n  var isActive = collapsePath[1] === attribute.attributeName;\n  var attributeActions = (0, _lodash.get)(contentTypesPermissions, [contentType.uid, 'attributes', attribute.attributeName, 'actions'], []);\n  var recursivePermissions = (0, _react.useMemo)(function () {\n    return (0, _utils2.getRecursivePermissions)(contentType.uid, attribute.attributeName, contentTypesPermissions);\n  }, [contentType, contentTypesPermissions, attribute]);\n  var recursiveAttributes = (0, _react.useMemo)(function () {\n    var component = components.find(function (component) {\n      return component.uid === attribute.component;\n    });\n    return isCollapsable ? (0, _utils2.getAttributesByModel)(component, components, attribute.attributeName) : [attribute];\n  }, [isCollapsable, attribute, components]);\n  var hasAllActions = (0, _react.useMemo)(function () {\n    return recursivePermissions === _utils2.ATTRIBUTES_PERMISSIONS_ACTIONS.length * recursiveAttributes.length; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [contentTypesPermissions]);\n  var hasSomeActions = (0, _react.useMemo)(function () {\n    return recursivePermissions > 0 && recursivePermissions < _utils2.ATTRIBUTES_PERMISSIONS_ACTIONS.length * recursiveAttributes.length; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [contentTypesPermissions]);\n\n  var handleCheckAllAction = function handleCheckAllAction(_ref2) {\n    var value = _ref2.target.value;\n    fillRequiredPermissions();\n\n    if (isCollapsable) {\n      var attributes = recursiveAttributes;\n      dispatch({\n        type: 'ALL_CONTENT_TYPE_PERMISSIONS_SELECT',\n        subject: contentType.uid,\n        attributes: attributes,\n        shouldEnable: value,\n        shouldSetAllContentTypes: false,\n        shouldAddDeleteAction: true\n      });\n    } else {\n      dispatch({\n        type: 'ALL_ATTRIBUTE_ACTIONS_SELECT',\n        subject: contentType.uid,\n        attribute: attribute,\n        shouldEnable: value\n      });\n    }\n  };\n\n  var getRecursiveAttributesPermissions = (0, _react.useCallback)(function (action) {\n    return (0, _utils2.getNumberOfRecursivePermissionsByAction)(contentType.uid, action, isCollapsable ? \"\".concat(attribute.attributeName, \".\") : attribute.attributeName.substr(0, attribute.attributeName.lastIndexOf('.')), contentTypesPermissions);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [attribute, contentTypesPermissions]);\n  var checkPermission = (0, _react.useCallback)(function (action) {\n    return attributeActions.findIndex(function (permAction) {\n      return permAction === action;\n    }) !== -1;\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [contentTypesPermissions, attribute, contentType]);\n\n  var handleToggleAttributes = function handleToggleAttributes() {\n    if (isCollapsable) {\n      dispatch({\n        type: 'COLLAPSE_PATH',\n        index: 1,\n        value: attribute.attributeName\n      });\n    }\n  };\n\n  var attributesToDisplay = (0, _react.useMemo)(function () {\n    return (0, _utils.getAttributesToDisplay)(components.find(function (comp) {\n      return comp.uid === attribute.component;\n    })); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [attribute]);\n\n  var someChecked = function someChecked(action) {\n    return isCollapsable && getRecursiveAttributesPermissions(action) > 0 && getRecursiveAttributesPermissions(action) < recursiveAttributes.length;\n  };\n\n  var allRecursiveChecked = function allRecursiveChecked(action) {\n    return isCollapsable && getRecursiveAttributesPermissions(action) === recursiveAttributes.length;\n  };\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, /*#__PURE__*/_react[\"default\"].createElement(_AttributeRowWrapper[\"default\"], {\n    isActive: isActive,\n    isCollapsable: isCollapsable,\n    alignItems: \"center\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(_core.Flex, {\n    style: {\n      flex: 1\n    }\n  }, /*#__PURE__*/_react[\"default\"].createElement(_core.Padded, {\n    left: true,\n    size: \"sm\"\n  }), /*#__PURE__*/_react[\"default\"].createElement(_PermissionName[\"default\"], {\n    disabled: isSuperAdmin || attribute.required && !isCollapsable,\n    width: \"15rem\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(_core.Checkbox, {\n    disabled: isSuperAdmin || attribute.required && !isCollapsable,\n    name: attribute.attributeName,\n    onChange: handleCheckAllAction,\n    someChecked: hasSomeActions,\n    value: attribute.required || hasAllActions\n  }), /*#__PURE__*/_react[\"default\"].createElement(_CollapseLabel[\"default\"], {\n    alignItems: \"center\",\n    isCollapsable: isCollapsable,\n    onClick: handleToggleAttributes,\n    title: attribute.attributeName\n  }, /*#__PURE__*/_react[\"default\"].createElement(_core.Text, {\n    color: isActive ? 'mediumBlue' : 'grey',\n    ellipsis: true,\n    fontSize: \"xs\",\n    fontWeight: \"bold\",\n    lineHeight: \"20px\",\n    textTransform: \"uppercase\"\n  }, attribute.attributeName), attribute.required && /*#__PURE__*/_react[\"default\"].createElement(_Required[\"default\"], null, \"*\"), /*#__PURE__*/_react[\"default\"].createElement(_Chevron[\"default\"], {\n    icon: isActive ? 'caret-up' : 'caret-down'\n  }))), /*#__PURE__*/_react[\"default\"].createElement(_PermissionWrapper[\"default\"], {\n    disabled: true\n  }, _utils2.ATTRIBUTES_PERMISSIONS_ACTIONS.map(function (action) {\n    return /*#__PURE__*/_react[\"default\"].createElement(_PermissionCheckbox[\"default\"], {\n      key: action,\n      disabled: true,\n      value: attribute.required || allRecursiveChecked(\"\".concat(_utils2.CONTENT_MANAGER_PREFIX, \".\").concat(action)) || checkPermission(\"\".concat(_utils2.CONTENT_MANAGER_PREFIX, \".\").concat(action)),\n      name: \"\".concat(attribute.attributeName, \"-\").concat(action),\n      someChecked: someChecked(\"\".concat(_utils2.CONTENT_MANAGER_PREFIX, \".\").concat(action))\n    });\n  })))), isActive && /*#__PURE__*/_react[\"default\"].createElement(_ComponentsAttributes[\"default\"], {\n    attributes: attributesToDisplay\n  }));\n};\n\nAttributeRow.propTypes = {\n  attribute: _propTypes[\"default\"].object.isRequired,\n  contentType: _propTypes[\"default\"].object.isRequired\n};\nvar _default = AttributeRow;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["D:/webstorm_projects/redcat_backend/.cache/admin/src/components/Roles/Permissions/ContentTypes/ContentTypesRow/ContentTypesAttributes/AttributeRow.js"],"names":["AttributeRow","attribute","contentType","collapsePath","components","contentTypesPermissions","dispatch","isSuperAdmin","fillRequiredPermissions","isCollapsable","type","isActive","attributeName","attributeActions","uid","recursivePermissions","recursiveAttributes","component","find","hasAllActions","ATTRIBUTES_PERMISSIONS_ACTIONS","length","hasSomeActions","handleCheckAllAction","value","target","attributes","subject","shouldEnable","shouldSetAllContentTypes","shouldAddDeleteAction","getRecursiveAttributesPermissions","action","substr","lastIndexOf","checkPermission","findIndex","permAction","handleToggleAttributes","index","attributesToDisplay","comp","someChecked","allRecursiveChecked","flex","required","map","CONTENT_MANAGER_PREFIX","propTypes","PropTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { useMemo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { get } from 'lodash';\nimport { Flex, Text, Checkbox, Padded } from '@buffetjs/core';\n\nimport { getAttributesToDisplay } from '../../../../../../utils';\nimport { usePermissionsContext } from '../../../../../../hooks';\nimport {\n  ATTRIBUTES_PERMISSIONS_ACTIONS,\n  CONTENT_MANAGER_PREFIX,\n  getAttributesByModel,\n  getNumberOfRecursivePermissionsByAction,\n  getRecursivePermissions,\n} from '../../../utils';\nimport AttributeRowWrapper from './AttributeRowWrapper';\nimport Chevron from '../Chevron';\nimport CollapseLabel from '../../CollapseLabel';\nimport ComponentsAttributes from '../ComponentsAttributes';\nimport PermissionCheckbox from '../../PermissionCheckbox';\nimport PermissionName from '../PermissionName';\nimport PermissionWrapper from '../PermissionWrapper';\nimport Required from '../Required';\nimport useFillRequiredPermissions from '../../useFillRequiredPermissions';\n\nconst AttributeRow = ({ attribute, contentType }) => {\n  const {\n    collapsePath,\n    components,\n    contentTypesPermissions,\n    dispatch,\n    isSuperAdmin,\n  } = usePermissionsContext();\n  const fillRequiredPermissions = useFillRequiredPermissions(contentType);\n  const isCollapsable = attribute.type === 'component';\n  const isActive = collapsePath[1] === attribute.attributeName;\n  const attributeActions = get(\n    contentTypesPermissions,\n    [contentType.uid, 'attributes', attribute.attributeName, 'actions'],\n    []\n  );\n\n  const recursivePermissions = useMemo(() => {\n    return getRecursivePermissions(\n      contentType.uid,\n      attribute.attributeName,\n      contentTypesPermissions\n    );\n  }, [contentType, contentTypesPermissions, attribute]);\n\n  const recursiveAttributes = useMemo(() => {\n    const component = components.find(component => component.uid === attribute.component);\n\n    return isCollapsable\n      ? getAttributesByModel(component, components, attribute.attributeName)\n      : [attribute];\n  }, [isCollapsable, attribute, components]);\n\n  const hasAllActions = useMemo(() => {\n    return (\n      recursivePermissions === ATTRIBUTES_PERMISSIONS_ACTIONS.length * recursiveAttributes.length\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [contentTypesPermissions]);\n\n  const hasSomeActions = useMemo(() => {\n    return (\n      recursivePermissions > 0 &&\n      recursivePermissions < ATTRIBUTES_PERMISSIONS_ACTIONS.length * recursiveAttributes.length\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [contentTypesPermissions]);\n\n  const handleCheckAllAction = ({ target: { value } }) => {\n    fillRequiredPermissions();\n\n    if (isCollapsable) {\n      const attributes = recursiveAttributes;\n      dispatch({\n        type: 'ALL_CONTENT_TYPE_PERMISSIONS_SELECT',\n        subject: contentType.uid,\n        attributes,\n        shouldEnable: value,\n        shouldSetAllContentTypes: false,\n        shouldAddDeleteAction: true,\n      });\n    } else {\n      dispatch({\n        type: 'ALL_ATTRIBUTE_ACTIONS_SELECT',\n        subject: contentType.uid,\n        attribute,\n        shouldEnable: value,\n      });\n    }\n  };\n\n  const getRecursiveAttributesPermissions = useCallback(\n    action => {\n      return getNumberOfRecursivePermissionsByAction(\n        contentType.uid,\n        action,\n        isCollapsable\n          ? `${attribute.attributeName}.`\n          : attribute.attributeName.substr(0, attribute.attributeName.lastIndexOf('.')),\n        contentTypesPermissions\n      );\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [attribute, contentTypesPermissions]\n  );\n\n  const checkPermission = useCallback(\n    action => {\n      return attributeActions.findIndex(permAction => permAction === action) !== -1;\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [contentTypesPermissions, attribute, contentType]\n  );\n\n  const handleToggleAttributes = () => {\n    if (isCollapsable) {\n      dispatch({\n        type: 'COLLAPSE_PATH',\n        index: 1,\n        value: attribute.attributeName,\n      });\n    }\n  };\n\n  const attributesToDisplay = useMemo(() => {\n    return getAttributesToDisplay(components.find(comp => comp.uid === attribute.component));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [attribute]);\n\n  const someChecked = action => {\n    return (\n      isCollapsable &&\n      getRecursiveAttributesPermissions(action) > 0 &&\n      getRecursiveAttributesPermissions(action) < recursiveAttributes.length\n    );\n  };\n\n  const allRecursiveChecked = action => {\n    return (\n      isCollapsable && getRecursiveAttributesPermissions(action) === recursiveAttributes.length\n    );\n  };\n\n  return (\n    <>\n      <AttributeRowWrapper isActive={isActive} isCollapsable={isCollapsable} alignItems=\"center\">\n        <Flex style={{ flex: 1 }}>\n          <Padded left size=\"sm\" />\n          <PermissionName\n            disabled={isSuperAdmin || (attribute.required && !isCollapsable)}\n            width=\"15rem\"\n          >\n            <Checkbox\n              disabled={isSuperAdmin || (attribute.required && !isCollapsable)}\n              name={attribute.attributeName}\n              onChange={handleCheckAllAction}\n              someChecked={hasSomeActions}\n              value={attribute.required || hasAllActions}\n            />\n            <CollapseLabel\n              alignItems=\"center\"\n              isCollapsable={isCollapsable}\n              onClick={handleToggleAttributes}\n              title={attribute.attributeName}\n            >\n              <Text\n                color={isActive ? 'mediumBlue' : 'grey'}\n                ellipsis\n                fontSize=\"xs\"\n                fontWeight=\"bold\"\n                lineHeight=\"20px\"\n                textTransform=\"uppercase\"\n              >\n                {attribute.attributeName}\n              </Text>\n              {attribute.required && <Required>*</Required>}\n              <Chevron icon={isActive ? 'caret-up' : 'caret-down'} />\n            </CollapseLabel>\n          </PermissionName>\n          <PermissionWrapper disabled>\n            {ATTRIBUTES_PERMISSIONS_ACTIONS.map(action => (\n              <PermissionCheckbox\n                key={action}\n                disabled\n                value={\n                  attribute.required ||\n                  allRecursiveChecked(`${CONTENT_MANAGER_PREFIX}.${action}`) ||\n                  checkPermission(`${CONTENT_MANAGER_PREFIX}.${action}`)\n                }\n                name={`${attribute.attributeName}-${action}`}\n                someChecked={someChecked(`${CONTENT_MANAGER_PREFIX}.${action}`)}\n              />\n            ))}\n          </PermissionWrapper>\n        </Flex>\n      </AttributeRowWrapper>\n      {isActive && <ComponentsAttributes attributes={attributesToDisplay} />}\n    </>\n  );\n};\n\nAttributeRow.propTypes = {\n  attribute: PropTypes.object.isRequired,\n  contentType: PropTypes.object.isRequired,\n};\n\nexport default AttributeRow;\n"]},"metadata":{},"sourceType":"script"}