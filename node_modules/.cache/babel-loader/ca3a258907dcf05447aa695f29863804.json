{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _utils = require(\"../../../../utils\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar getAttributesByModel = function getAttributesByModel(contentType, components, attributeNamePrefix) {\n  var attributeName = attributeNamePrefix ? attributeNamePrefix.split('.') : [];\n\n  var recursiveAttribute = function recursiveAttribute(model, fromComponent) {\n    var attributes = (0, _utils.getAttributesToDisplay)(model).reduce(function (attributeAcc, currentAttribute) {\n      if (fromComponent) {\n        attributeName.push(currentAttribute.attributeName);\n      } else {\n        attributeName = [].concat((0, _toConsumableArray2[\"default\"])(attributeNamePrefix ? attributeNamePrefix.split('.') : []), [currentAttribute.attributeName]);\n      }\n\n      if (currentAttribute.type === 'component') {\n        var component = components.find(function (component) {\n          return component.uid === currentAttribute.component;\n        });\n\n        if (!attributeName[0]) {\n          attributeName.push(currentAttribute.attributeName);\n        }\n\n        var componentAttributes = [].concat((0, _toConsumableArray2[\"default\"])(recursiveAttribute(component, true)), (0, _toConsumableArray2[\"default\"])(attributeAcc));\n        attributeName = attributeName.slice(0, attributeName.length - 1);\n        return componentAttributes;\n      }\n\n      var attributeAccumulator = [].concat((0, _toConsumableArray2[\"default\"])(attributeAcc), [_objectSpread(_objectSpread({}, currentAttribute), {}, {\n        attributeName: attributeName.join('.'),\n        contentTypeUid: contentType.uid\n      })]);\n      attributeName = attributeName.slice(0, attributeName.length - 1);\n      return attributeAccumulator;\n    }, []);\n    return attributes;\n  };\n\n  var recursiveAttributes = recursiveAttribute(contentType, false);\n  return recursiveAttributes;\n};\n\nvar _default = getAttributesByModel;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["D:/webstorm_projects/redcat_backend/.cache/admin/src/components/Roles/Permissions/utils/getAttributesByModel.js"],"names":["getAttributesByModel","contentType","components","attributeNamePrefix","attributeName","split","recursiveAttribute","model","fromComponent","attributes","reduce","attributeAcc","currentAttribute","push","type","component","find","uid","componentAttributes","slice","length","attributeAccumulator","join","contentTypeUid","recursiveAttributes"],"mappings":";;;;;;;;;;;;;AAAA;;;;;;AAEA,IAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,WAAD,EAAcC,UAAd,EAA0BC,mBAA1B,EAAkD;AAC7E,MAAIC,aAAa,GAAGD,mBAAmB,GAAGA,mBAAmB,CAACE,KAApB,CAA0B,GAA1B,CAAH,GAAoC,EAA3E;;AACA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAQC,aAAR,EAA0B;AACnD,QAAMC,UAAU,GAAG,mCAAuBF,KAAvB,EAA8BG,MAA9B,CAAqC,UAACC,YAAD,EAAeC,gBAAf,EAAoC;AAC1F,UAAIJ,aAAJ,EAAmB;AACjBJ,QAAAA,aAAa,CAACS,IAAd,CAAmBD,gBAAgB,CAACR,aAApC;AACD,OAFD,MAEO;AACLA,QAAAA,aAAa,iDACPD,mBAAmB,GAAGA,mBAAmB,CAACE,KAApB,CAA0B,GAA1B,CAAH,GAAoC,EADhD,IAEXO,gBAAgB,CAACR,aAFN,EAAb;AAID;;AAED,UAAIQ,gBAAgB,CAACE,IAAjB,KAA0B,WAA9B,EAA2C;AACzC,YAAMC,SAAS,GAAGb,UAAU,CAACc,IAAX,CAChB,UAAAD,SAAS;AAAA,iBAAIA,SAAS,CAACE,GAAV,KAAkBL,gBAAgB,CAACG,SAAvC;AAAA,SADO,CAAlB;;AAIA,YAAI,CAACX,aAAa,CAAC,CAAD,CAAlB,EAAuB;AACrBA,UAAAA,aAAa,CAACS,IAAd,CAAmBD,gBAAgB,CAACR,aAApC;AACD;;AAED,YAAMc,mBAAmB,iDAAOZ,kBAAkB,CAACS,SAAD,EAAY,IAAZ,CAAzB,uCAA+CJ,YAA/C,EAAzB;AAEAP,QAAAA,aAAa,GAAGA,aAAa,CAACe,KAAd,CAAoB,CAApB,EAAuBf,aAAa,CAACgB,MAAd,GAAuB,CAA9C,CAAhB;AAEA,eAAOF,mBAAP;AACD;;AAED,UAAMG,oBAAoB,iDACrBV,YADqB,oCAGnBC,gBAHmB;AAItBR,QAAAA,aAAa,EAAEA,aAAa,CAACkB,IAAd,CAAmB,GAAnB,CAJO;AAKtBC,QAAAA,cAAc,EAAEtB,WAAW,CAACgB;AALN,UAA1B;AASAb,MAAAA,aAAa,GAAGA,aAAa,CAACe,KAAd,CAAoB,CAApB,EAAuBf,aAAa,CAACgB,MAAd,GAAuB,CAA9C,CAAhB;AAEA,aAAOC,oBAAP;AACD,KAtCkB,EAsChB,EAtCgB,CAAnB;AAwCA,WAAOZ,UAAP;AACD,GA1CD;;AA4CA,MAAMe,mBAAmB,GAAGlB,kBAAkB,CAACL,WAAD,EAAc,KAAd,CAA9C;AAEA,SAAOuB,mBAAP;AACD,CAjDD;;eAmDexB,oB","sourcesContent":["import { getAttributesToDisplay } from '../../../../utils';\n\nconst getAttributesByModel = (contentType, components, attributeNamePrefix) => {\n  let attributeName = attributeNamePrefix ? attributeNamePrefix.split('.') : [];\n  const recursiveAttribute = (model, fromComponent) => {\n    const attributes = getAttributesToDisplay(model).reduce((attributeAcc, currentAttribute) => {\n      if (fromComponent) {\n        attributeName.push(currentAttribute.attributeName);\n      } else {\n        attributeName = [\n          ...(attributeNamePrefix ? attributeNamePrefix.split('.') : []),\n          currentAttribute.attributeName,\n        ];\n      }\n\n      if (currentAttribute.type === 'component') {\n        const component = components.find(\n          component => component.uid === currentAttribute.component\n        );\n\n        if (!attributeName[0]) {\n          attributeName.push(currentAttribute.attributeName);\n        }\n\n        const componentAttributes = [...recursiveAttribute(component, true), ...attributeAcc];\n\n        attributeName = attributeName.slice(0, attributeName.length - 1);\n\n        return componentAttributes;\n      }\n\n      const attributeAccumulator = [\n        ...attributeAcc,\n        {\n          ...currentAttribute,\n          attributeName: attributeName.join('.'),\n          contentTypeUid: contentType.uid,\n        },\n      ];\n\n      attributeName = attributeName.slice(0, attributeName.length - 1);\n\n      return attributeAccumulator;\n    }, []);\n\n    return attributes;\n  };\n\n  const recursiveAttributes = recursiveAttribute(contentType, false);\n\n  return recursiveAttributes;\n};\n\nexport default getAttributesByModel;\n"]},"metadata":{},"sourceType":"script"}