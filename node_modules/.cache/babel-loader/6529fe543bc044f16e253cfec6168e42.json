{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _strapiHelperPlugin = require(\"strapi-helper-plugin\");\n\nvar _reactRouterDom = require(\"react-router-dom\");\n\nvar _lodash = require(\"lodash\");\n\nvar _permissions = _interopRequireDefault(require(\"../../../permissions\"));\n\nvar _EditPage = _interopRequireDefault(require(\"../EditPage\"));\n\nvar ProtectedEditPage = function ProtectedEditPage() {\n  var permissions = (0, _react.useMemo)(function () {\n    return {\n      read: _permissions[\"default\"].settings.users.read,\n      update: _permissions[\"default\"].settings.users.update\n    };\n  }, []);\n\n  var _useUserPermissions = (0, _strapiHelperPlugin.useUserPermissions)(permissions),\n      isLoading = _useUserPermissions.isLoading,\n      _useUserPermissions$a = _useUserPermissions.allowedActions,\n      canRead = _useUserPermissions$a.canRead,\n      canUpdate = _useUserPermissions$a.canUpdate;\n\n  var _useLocation = (0, _reactRouterDom.useLocation)(),\n      state = _useLocation.state;\n\n  var from = (0, _lodash.get)(state, 'from', '/');\n  (0, _react.useEffect)(function () {\n    if (!isLoading) {\n      if (!canRead && !canUpdate) {\n        strapi.notification.toggle({\n          type: 'info',\n          message: {\n            id: 'notification.permission.not-allowed-read'\n          }\n        });\n      }\n    }\n  }, [isLoading, canRead, canUpdate]);\n\n  if (isLoading) {\n    return /*#__PURE__*/_react[\"default\"].createElement(_strapiHelperPlugin.LoadingIndicatorPage, null);\n  }\n\n  if (!canRead && !canUpdate) {\n    return /*#__PURE__*/_react[\"default\"].createElement(_reactRouterDom.Redirect, {\n      to: from\n    });\n  }\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_EditPage[\"default\"], {\n    canUpdate: canUpdate\n  });\n};\n\nvar _default = ProtectedEditPage;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["D:/webstorm_projects/redcat_backend/.cache/admin/src/containers/Users/ProtectedEditPage/index.js"],"names":["ProtectedEditPage","permissions","read","adminPermissions","settings","users","update","isLoading","allowedActions","canRead","canUpdate","state","from","strapi","notification","toggle","type","message","id"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9B,MAAMC,WAAW,GAAG,oBAAQ,YAAM;AAChC,WAAO;AACLC,MAAAA,IAAI,EAAEC,wBAAiBC,QAAjB,CAA0BC,KAA1B,CAAgCH,IADjC;AAELI,MAAAA,MAAM,EAAEH,wBAAiBC,QAAjB,CAA0BC,KAA1B,CAAgCC;AAFnC,KAAP;AAID,GALmB,EAKjB,EALiB,CAApB;;AAD8B,4BAW1B,4CAAmBL,WAAnB,CAX0B;AAAA,MAS5BM,SAT4B,uBAS5BA,SAT4B;AAAA,kDAU5BC,cAV4B;AAAA,MAUVC,OAVU,yBAUVA,OAVU;AAAA,MAUDC,SAVC,yBAUDA,SAVC;;AAAA,qBAYZ,kCAZY;AAAA,MAYtBC,KAZsB,gBAYtBA,KAZsB;;AAa9B,MAAMC,IAAI,GAAG,iBAAID,KAAJ,EAAW,MAAX,EAAmB,GAAnB,CAAb;AAEA,wBAAU,YAAM;AACd,QAAI,CAACJ,SAAL,EAAgB;AACd,UAAI,CAACE,OAAD,IAAY,CAACC,SAAjB,EAA4B;AAC1BG,QAAAA,MAAM,CAACC,YAAP,CAAoBC,MAApB,CAA2B;AACzBC,UAAAA,IAAI,EAAE,MADmB;AAEzBC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,EAAE,EAAE;AAAN;AAFgB,SAA3B;AAID;AACF;AACF,GATD,EASG,CAACX,SAAD,EAAYE,OAAZ,EAAqBC,SAArB,CATH;;AAWA,MAAIH,SAAJ,EAAe;AACb,wBAAO,gCAAC,wCAAD,OAAP;AACD;;AAED,MAAI,CAACE,OAAD,IAAY,CAACC,SAAjB,EAA4B;AAC1B,wBAAO,gCAAC,wBAAD;AAAU,MAAA,EAAE,EAAEE;AAAd,MAAP;AACD;;AAED,sBAAO,gCAAC,oBAAD;AAAU,IAAA,SAAS,EAAEF;AAArB,IAAP;AACD,CAnCD;;eAqCeV,iB","sourcesContent":["import React, { useEffect, useMemo } from 'react';\nimport { useUserPermissions, LoadingIndicatorPage } from 'strapi-helper-plugin';\nimport { Redirect, useLocation } from 'react-router-dom';\nimport { get } from 'lodash';\nimport adminPermissions from '../../../permissions';\nimport EditPage from '../EditPage';\n\nconst ProtectedEditPage = () => {\n  const permissions = useMemo(() => {\n    return {\n      read: adminPermissions.settings.users.read,\n      update: adminPermissions.settings.users.update,\n    };\n  }, []);\n\n  const {\n    isLoading,\n    allowedActions: { canRead, canUpdate },\n  } = useUserPermissions(permissions);\n  const { state } = useLocation();\n  const from = get(state, 'from', '/');\n\n  useEffect(() => {\n    if (!isLoading) {\n      if (!canRead && !canUpdate) {\n        strapi.notification.toggle({\n          type: 'info',\n          message: { id: 'notification.permission.not-allowed-read' },\n        });\n      }\n    }\n  }, [isLoading, canRead, canUpdate]);\n\n  if (isLoading) {\n    return <LoadingIndicatorPage />;\n  }\n\n  if (!canRead && !canUpdate) {\n    return <Redirect to={from} />;\n  }\n\n  return <EditPage canUpdate={canUpdate} />;\n};\n\nexport default ProtectedEditPage;\n"]},"metadata":{},"sourceType":"script"}