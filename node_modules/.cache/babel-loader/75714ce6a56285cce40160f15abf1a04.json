{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _core = require(\"@buffetjs/core\");\n\nvar _reactIntl = require(\"react-intl\");\n\nvar _ConditionsSelect = _interopRequireDefault(require(\"../ConditionsSelect\"));\n\nvar _ActionRowWrapper = _interopRequireDefault(require(\"./ActionRowWrapper\"));\n\nvar ActionRow = function ActionRow(_ref) {\n  var value = _ref.value,\n      onChange = _ref.onChange,\n      isGrey = _ref.isGrey,\n      action = _ref.action;\n\n  var _useIntl = (0, _reactIntl.useIntl)(),\n      formatMessage = _useIntl.formatMessage;\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_ActionRowWrapper[\"default\"], {\n    isGrey: isGrey\n  }, /*#__PURE__*/_react[\"default\"].createElement(_core.Padded, {\n    style: {\n      width: 200\n    },\n    top: true,\n    left: true,\n    right: true,\n    bottom: true,\n    size: \"sm\"\n  }, /*#__PURE__*/_react[\"default\"].createElement(_core.Flex, null, /*#__PURE__*/_react[\"default\"].createElement(_core.Text, {\n    lineHeight: \"19px\",\n    color: \"grey\",\n    fontSize: \"xs\",\n    fontWeight: \"bold\",\n    textTransform: \"uppercase\"\n  }, formatMessage({\n    id: 'Settings.permissions.conditions.can'\n  }), \"\\xA0\"), /*#__PURE__*/_react[\"default\"].createElement(_core.Text, {\n    title: action.displayName,\n    lineHeight: \"19px\",\n    fontWeight: \"bold\",\n    fontSize: \"xs\",\n    textTransform: \"uppercase\",\n    color: \"mediumBlue\",\n    style: {\n      maxWidth: '60%'\n    },\n    ellipsis: true\n  }, action.displayName), /*#__PURE__*/_react[\"default\"].createElement(_core.Text, {\n    lineHeight: \"19px\",\n    color: \"grey\",\n    fontSize: \"xs\",\n    fontWeight: \"bold\",\n    textTransform: \"uppercase\"\n  }, \"\\xA0\", formatMessage({\n    id: 'Settings.permissions.conditions.when'\n  })))), /*#__PURE__*/_react[\"default\"].createElement(_ConditionsSelect[\"default\"], {\n    onChange: onChange,\n    value: value\n  }));\n};\n\nActionRow.defaultProps = {\n  value: []\n};\nActionRow.propTypes = {\n  action: _propTypes[\"default\"].object.isRequired,\n  isGrey: _propTypes[\"default\"].bool.isRequired,\n  value: _propTypes[\"default\"].array,\n  onChange: _propTypes[\"default\"].func.isRequired\n};\nvar _default = ActionRow;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["D:/webstorm_projects/redcat_backend/.cache/admin/src/components/Roles/ConditionsModal/ActionRow.js"],"names":["ActionRow","value","onChange","isGrey","action","formatMessage","width","id","displayName","maxWidth","defaultProps","propTypes","PropTypes","object","isRequired","bool","array","func"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAEA,IAAMA,SAAS,GAAG,SAAZA,SAAY,OAAyC;AAAA,MAAtCC,KAAsC,QAAtCA,KAAsC;AAAA,MAA/BC,QAA+B,QAA/BA,QAA+B;AAAA,MAArBC,MAAqB,QAArBA,MAAqB;AAAA,MAAbC,MAAa,QAAbA,MAAa;;AAAA,iBAC/B,yBAD+B;AAAA,MACjDC,aADiD,YACjDA,aADiD;;AAGzD,sBACE,gCAAC,4BAAD;AAAkB,IAAA,MAAM,EAAEF;AAA1B,kBACE,gCAAC,YAAD;AAAQ,IAAA,KAAK,EAAE;AAAEG,MAAAA,KAAK,EAAE;AAAT,KAAf;AAA+B,IAAA,GAAG,MAAlC;AAAmC,IAAA,IAAI,MAAvC;AAAwC,IAAA,KAAK,MAA7C;AAA8C,IAAA,MAAM,MAApD;AAAqD,IAAA,IAAI,EAAC;AAA1D,kBACE,gCAAC,UAAD,qBACE,gCAAC,UAAD;AACE,IAAA,UAAU,EAAC,MADb;AAEE,IAAA,KAAK,EAAC,MAFR;AAGE,IAAA,QAAQ,EAAC,IAHX;AAIE,IAAA,UAAU,EAAC,MAJb;AAKE,IAAA,aAAa,EAAC;AALhB,KAOGD,aAAa,CAAC;AACbE,IAAAA,EAAE,EAAE;AADS,GAAD,CAPhB,SADF,eAaE,gCAAC,UAAD;AACE,IAAA,KAAK,EAAEH,MAAM,CAACI,WADhB;AAEE,IAAA,UAAU,EAAC,MAFb;AAGE,IAAA,UAAU,EAAC,MAHb;AAIE,IAAA,QAAQ,EAAC,IAJX;AAKE,IAAA,aAAa,EAAC,WALhB;AAME,IAAA,KAAK,EAAC,YANR;AAOE,IAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAPT;AAQE,IAAA,QAAQ;AARV,KAUGL,MAAM,CAACI,WAVV,CAbF,eAyBE,gCAAC,UAAD;AACE,IAAA,UAAU,EAAC,MADb;AAEE,IAAA,KAAK,EAAC,MAFR;AAGE,IAAA,QAAQ,EAAC,IAHX;AAIE,IAAA,UAAU,EAAC,MAJb;AAKE,IAAA,aAAa,EAAC;AALhB,aAQGH,aAAa,CAAC;AACbE,IAAAA,EAAE,EAAE;AADS,GAAD,CARhB,CAzBF,CADF,CADF,eAyCE,gCAAC,4BAAD;AAAkB,IAAA,QAAQ,EAAEL,QAA5B;AAAsC,IAAA,KAAK,EAAED;AAA7C,IAzCF,CADF;AA6CD,CAhDD;;AAkDAD,SAAS,CAACU,YAAV,GAAyB;AACvBT,EAAAA,KAAK,EAAE;AADgB,CAAzB;AAGAD,SAAS,CAACW,SAAV,GAAsB;AACpBP,EAAAA,MAAM,EAAEQ,sBAAUC,MAAV,CAAiBC,UADL;AAEpBX,EAAAA,MAAM,EAAES,sBAAUG,IAAV,CAAeD,UAFH;AAGpBb,EAAAA,KAAK,EAAEW,sBAAUI,KAHG;AAIpBd,EAAAA,QAAQ,EAAEU,sBAAUK,IAAV,CAAeH;AAJL,CAAtB;eAMed,S","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, Padded, Flex } from '@buffetjs/core';\nimport { useIntl } from 'react-intl';\n\nimport ConditionsSelect from '../ConditionsSelect';\nimport ActionRowWrapper from './ActionRowWrapper';\n\nconst ActionRow = ({ value, onChange, isGrey, action }) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <ActionRowWrapper isGrey={isGrey}>\n      <Padded style={{ width: 200 }} top left right bottom size=\"sm\">\n        <Flex>\n          <Text\n            lineHeight=\"19px\"\n            color=\"grey\"\n            fontSize=\"xs\"\n            fontWeight=\"bold\"\n            textTransform=\"uppercase\"\n          >\n            {formatMessage({\n              id: 'Settings.permissions.conditions.can',\n            })}\n            &nbsp;\n          </Text>\n          <Text\n            title={action.displayName}\n            lineHeight=\"19px\"\n            fontWeight=\"bold\"\n            fontSize=\"xs\"\n            textTransform=\"uppercase\"\n            color=\"mediumBlue\"\n            style={{ maxWidth: '60%' }}\n            ellipsis\n          >\n            {action.displayName}\n          </Text>\n          <Text\n            lineHeight=\"19px\"\n            color=\"grey\"\n            fontSize=\"xs\"\n            fontWeight=\"bold\"\n            textTransform=\"uppercase\"\n          >\n            &nbsp;\n            {formatMessage({\n              id: 'Settings.permissions.conditions.when',\n            })}\n          </Text>\n        </Flex>\n      </Padded>\n      <ConditionsSelect onChange={onChange} value={value} />\n    </ActionRowWrapper>\n  );\n};\n\nActionRow.defaultProps = {\n  value: [],\n};\nActionRow.propTypes = {\n  action: PropTypes.object.isRequired,\n  isGrey: PropTypes.bool.isRequired,\n  value: PropTypes.array,\n  onChange: PropTypes.func.isRequired,\n};\nexport default ActionRow;\n"]},"metadata":{},"sourceType":"script"}