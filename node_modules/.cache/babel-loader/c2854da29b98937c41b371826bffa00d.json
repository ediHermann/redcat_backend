{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = require(\"react\");\n\nvar _reactRouterDom = require(\"react-router-dom\");\n\nvar _lodash = require(\"lodash\");\n\nvar _strapiHelperPlugin = require(\"strapi-helper-plugin\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _utils = require(\"../../utils\");\n\nvar _sharedReducers = require(\"../../sharedReducers\");\n\nvar _utils2 = require(\"./utils\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// This container is used to handle the CRUD\nvar SingleTypeFormWrapper = function SingleTypeFormWrapper(_ref) {\n  var allLayoutData = _ref.allLayoutData,\n      children = _ref.children,\n      from = _ref.from,\n      slug = _ref.slug;\n\n  var _useGlobalContext = (0, _strapiHelperPlugin.useGlobalContext)(),\n      emitEvent = _useGlobalContext.emitEvent;\n\n  var _useHistory = (0, _reactRouterDom.useHistory)(),\n      push = _useHistory.push;\n\n  var emitEventRef = (0, _react.useRef)(emitEvent);\n\n  var _useState = (0, _react.useState)(true),\n      _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n      isCreatingEntry = _useState2[0],\n      setIsCreatingEntry = _useState2[1];\n\n  var _useReducer = (0, _react.useReducer)(_sharedReducers.crudReducer, _sharedReducers.crudInitialState),\n      _useReducer2 = (0, _slicedToArray2[\"default\"])(_useReducer, 2),\n      _useReducer2$ = _useReducer2[0],\n      componentsDataStructure = _useReducer2$.componentsDataStructure,\n      contentTypeDataStructure = _useReducer2$.contentTypeDataStructure,\n      data = _useReducer2$.data,\n      isLoading = _useReducer2$.isLoading,\n      status = _useReducer2$.status,\n      dispatch = _useReducer2[1];\n\n  var cleanReceivedData = (0, _react.useCallback)(function (data) {\n    var cleaned = (0, _utils.removePasswordFieldsFromData)(data, allLayoutData.contentType, allLayoutData.components); // This is needed in order to add a unique id for the repeatable components, in order to make the reorder easier\n\n    return (0, _utils.formatComponentData)(cleaned, allLayoutData.contentType, allLayoutData.components);\n  }, [allLayoutData]);\n  (0, _react.useEffect)(function () {\n    var componentsDataStructure = Object.keys(allLayoutData.components).reduce(function (acc, current) {\n      var defaultComponentForm = (0, _utils.createDefaultForm)((0, _lodash.get)(allLayoutData, ['components', current, 'attributes'], {}), allLayoutData.components);\n      acc[current] = (0, _utils.formatComponentData)(defaultComponentForm, allLayoutData.components[current], allLayoutData.components);\n      return acc;\n    }, {});\n    var contentTypeDataStructure = (0, _utils.createDefaultForm)(allLayoutData.contentType.attributes, allLayoutData.components);\n    dispatch({\n      type: 'SET_DATA_STRUCTURES',\n      componentsDataStructure: componentsDataStructure,\n      contentTypeDataStructure: (0, _utils.formatComponentData)(contentTypeDataStructure, allLayoutData.contentType, allLayoutData.components)\n    });\n  }, [allLayoutData]); // Check if creation mode or editing mode\n\n  (0, _react.useEffect)(function () {\n    var abortController = new AbortController();\n    var signal = abortController.signal;\n\n    var fetchData = /*#__PURE__*/function () {\n      var _ref2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(signal) {\n        var _data, responseStatus;\n\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatch({\n                  type: 'GET_DATA'\n                });\n                setIsCreatingEntry(true);\n                _context.prev = 2;\n                _context.next = 5;\n                return (0, _strapiHelperPlugin.request)((0, _utils2.getRequestUrl)(slug), {\n                  method: 'GET',\n                  signal: signal\n                });\n\n              case 5:\n                _data = _context.sent;\n                dispatch({\n                  type: 'GET_DATA_SUCCEEDED',\n                  data: cleanReceivedData(_data)\n                });\n                setIsCreatingEntry(false);\n                _context.next = 17;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](2);\n\n                if (!(_context.t0.name === 'AbortError')) {\n                  _context.next = 14;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 14:\n                responseStatus = (0, _lodash.get)(_context.t0, 'response.status', null); // Creating a single type\n\n                if (responseStatus === 404) {\n                  dispatch({\n                    type: 'INIT_FORM'\n                  });\n                }\n\n                if (responseStatus === 403) {\n                  strapi.notification.info((0, _utils.getTrad)('permissions.not-allowed.update'));\n                  push(from);\n                }\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 10]]);\n      }));\n\n      return function fetchData(_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    fetchData(signal);\n    return function () {\n      return abortController.abort();\n    };\n  }, [cleanReceivedData, from, push, slug]);\n  var displayErrors = (0, _react.useCallback)(function (err) {\n    var errorPayload = err.response.payload;\n    console.error(errorPayload);\n    var errorMessage = (0, _lodash.get)(errorPayload, ['message'], 'Bad Request'); // TODO handle errors correctly when back-end ready\n\n    if (Array.isArray(errorMessage)) {\n      errorMessage = (0, _lodash.get)(errorMessage, ['0', 'messages', '0', 'id']);\n    }\n\n    if (typeof errorMessage === 'string') {\n      strapi.notification.error(errorMessage);\n    }\n  }, []);\n  var onDelete = (0, _react.useCallback)( /*#__PURE__*/function () {\n    var _ref3 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2(trackerProperty) {\n      var response;\n      return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              emitEventRef.current('willDeleteEntry', trackerProperty);\n              _context2.next = 4;\n              return (0, _strapiHelperPlugin.request)((0, _utils2.getRequestUrl)(\"\".concat(slug)), {\n                method: 'DELETE'\n              });\n\n            case 4:\n              response = _context2.sent;\n              strapi.notification.success((0, _utils.getTrad)('success.record.delete'));\n              emitEventRef.current('didDeleteEntry', trackerProperty);\n              return _context2.abrupt(\"return\", Promise.resolve(response));\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](0);\n              emitEventRef.current('didNotDeleteEntry', _objectSpread({\n                error: _context2.t0\n              }, trackerProperty));\n              return _context2.abrupt(\"return\", Promise.reject(_context2.t0));\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 10]]);\n    }));\n\n    return function (_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), [slug]);\n  var onDeleteSucceeded = (0, _react.useCallback)(function () {\n    setIsCreatingEntry(true);\n    dispatch({\n      type: 'INIT_FORM'\n    });\n  }, []);\n  var onPost = (0, _react.useCallback)( /*#__PURE__*/function () {\n    var _ref4 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(body, trackerProperty) {\n      var endPoint, response;\n      return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              endPoint = (0, _utils2.getRequestUrl)(slug);\n              _context3.prev = 1;\n              dispatch({\n                type: 'SET_STATUS',\n                status: 'submit-pending'\n              });\n              _context3.next = 5;\n              return (0, _strapiHelperPlugin.request)(endPoint, {\n                method: 'PUT',\n                body: body\n              });\n\n            case 5:\n              response = _context3.sent;\n              emitEventRef.current('didCreateEntry', trackerProperty);\n              strapi.notification.toggle({\n                type: 'success',\n                message: {\n                  id: (0, _utils.getTrad)('success.record.save')\n                }\n              });\n              dispatch({\n                type: 'SUBMIT_SUCCEEDED',\n                data: cleanReceivedData(response)\n              });\n              setIsCreatingEntry(false);\n              dispatch({\n                type: 'SET_STATUS',\n                status: 'resolved'\n              });\n              _context3.next = 18;\n              break;\n\n            case 13:\n              _context3.prev = 13;\n              _context3.t0 = _context3[\"catch\"](1);\n              emitEventRef.current('didNotCreateEntry', {\n                error: _context3.t0,\n                trackerProperty: trackerProperty\n              });\n              displayErrors(_context3.t0);\n              dispatch({\n                type: 'SET_STATUS',\n                status: 'resolved'\n              });\n\n            case 18:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 13]]);\n    }));\n\n    return function (_x3, _x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }(), [cleanReceivedData, displayErrors, slug]);\n  var onPublish = (0, _react.useCallback)( /*#__PURE__*/(0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4() {\n    var endPoint, _data2;\n\n    return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            emitEventRef.current('willPublishEntry');\n            endPoint = (0, _utils2.getRequestUrl)(\"\".concat(slug, \"/actions/publish\"));\n            dispatch({\n              type: 'SET_STATUS',\n              status: 'publish-pending'\n            });\n            _context4.next = 6;\n            return (0, _strapiHelperPlugin.request)(endPoint, {\n              method: 'POST'\n            });\n\n          case 6:\n            _data2 = _context4.sent;\n            emitEventRef.current('didPublishEntry');\n            strapi.notification.toggle({\n              type: 'success',\n              message: {\n                id: (0, _utils.getTrad)('success.record.publish')\n              }\n            });\n            dispatch({\n              type: 'SUBMIT_SUCCEEDED',\n              data: cleanReceivedData(_data2)\n            });\n            dispatch({\n              type: 'SET_STATUS',\n              status: 'resolved'\n            });\n            _context4.next = 17;\n            break;\n\n          case 13:\n            _context4.prev = 13;\n            _context4.t0 = _context4[\"catch\"](0);\n            displayErrors(_context4.t0);\n            dispatch({\n              type: 'SET_STATUS',\n              status: 'resolved'\n            });\n\n          case 17:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 13]]);\n  })), [cleanReceivedData, displayErrors, slug]);\n  var onPut = (0, _react.useCallback)( /*#__PURE__*/function () {\n    var _ref6 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee5(body, trackerProperty) {\n      var endPoint, response;\n      return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              endPoint = (0, _utils2.getRequestUrl)(\"\".concat(slug));\n              _context5.prev = 1;\n              emitEventRef.current('willEditEntry', trackerProperty);\n              dispatch({\n                type: 'SET_STATUS',\n                status: 'submit-pending'\n              });\n              _context5.next = 6;\n              return (0, _strapiHelperPlugin.request)(endPoint, {\n                method: 'PUT',\n                body: body\n              });\n\n            case 6:\n              response = _context5.sent;\n              strapi.notification.toggle({\n                type: 'success',\n                message: {\n                  id: (0, _utils.getTrad)('success.record.save')\n                }\n              });\n              emitEventRef.current('didEditEntry', {\n                trackerProperty: trackerProperty\n              });\n              dispatch({\n                type: 'SUBMIT_SUCCEEDED',\n                data: cleanReceivedData(response)\n              });\n              dispatch({\n                type: 'SET_STATUS',\n                status: 'resolved'\n              });\n              _context5.next = 18;\n              break;\n\n            case 13:\n              _context5.prev = 13;\n              _context5.t0 = _context5[\"catch\"](1);\n              displayErrors(_context5.t0);\n              emitEventRef.current('didNotEditEntry', {\n                error: _context5.t0,\n                trackerProperty: trackerProperty\n              });\n              dispatch({\n                type: 'SET_STATUS',\n                status: 'resolved'\n              });\n\n            case 18:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[1, 13]]);\n    }));\n\n    return function (_x5, _x6) {\n      return _ref6.apply(this, arguments);\n    };\n  }(), [cleanReceivedData, displayErrors, slug]); // The publish and unpublish method could be refactored but let's leave the duplication for now\n\n  var onUnpublish = (0, _react.useCallback)( /*#__PURE__*/(0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee6() {\n    var endPoint, response;\n    return _regenerator[\"default\"].wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            endPoint = (0, _utils2.getRequestUrl)(\"\".concat(slug, \"/actions/unpublish\"));\n            dispatch({\n              type: 'SET_STATUS',\n              status: 'unpublish-pending'\n            });\n            _context6.prev = 2;\n            emitEventRef.current('willUnpublishEntry');\n            _context6.next = 6;\n            return (0, _strapiHelperPlugin.request)(endPoint, {\n              method: 'POST'\n            });\n\n          case 6:\n            response = _context6.sent;\n            emitEventRef.current('didUnpublishEntry');\n            strapi.notification.success((0, _utils.getTrad)('success.record.unpublish'));\n            dispatch({\n              type: 'SUBMIT_SUCCEEDED',\n              data: cleanReceivedData(response)\n            });\n            dispatch({\n              type: 'SET_STATUS',\n              status: 'resolved'\n            });\n            _context6.next = 17;\n            break;\n\n          case 13:\n            _context6.prev = 13;\n            _context6.t0 = _context6[\"catch\"](2);\n            dispatch({\n              type: 'SET_STATUS',\n              status: 'resolved'\n            });\n            displayErrors(_context6.t0);\n\n          case 17:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[2, 13]]);\n  })), [cleanReceivedData, displayErrors, slug]);\n  return children({\n    componentsDataStructure: componentsDataStructure,\n    contentTypeDataStructure: contentTypeDataStructure,\n    data: data,\n    isCreatingEntry: isCreatingEntry,\n    isLoadingForData: isLoading,\n    onDelete: onDelete,\n    onDeleteSucceeded: onDeleteSucceeded,\n    onPost: onPost,\n    onPublish: onPublish,\n    onPut: onPut,\n    onUnpublish: onUnpublish,\n    status: status\n  });\n};\n\nSingleTypeFormWrapper.defaultProps = {\n  from: '/'\n};\nSingleTypeFormWrapper.propTypes = {\n  allLayoutData: _propTypes[\"default\"].shape({\n    components: _propTypes[\"default\"].object.isRequired,\n    contentType: _propTypes[\"default\"].object.isRequired\n  }).isRequired,\n  children: _propTypes[\"default\"].func.isRequired,\n  from: _propTypes[\"default\"].string,\n  slug: _propTypes[\"default\"].string.isRequired\n};\n\nvar _default = /*#__PURE__*/(0, _react.memo)(SingleTypeFormWrapper);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["D:/webstorm_projects/redcat_backend/.cache/plugins/strapi-plugin-content-manager/admin/src/containers/SingleTypeFormWrapper/index.js"],"names":["SingleTypeFormWrapper","allLayoutData","children","from","slug","emitEvent","push","emitEventRef","isCreatingEntry","setIsCreatingEntry","crudReducer","crudInitialState","componentsDataStructure","contentTypeDataStructure","data","isLoading","status","dispatch","cleanReceivedData","cleaned","contentType","components","Object","keys","reduce","acc","current","defaultComponentForm","attributes","type","abortController","AbortController","signal","fetchData","method","name","responseStatus","strapi","notification","info","abort","displayErrors","err","errorPayload","response","payload","console","error","errorMessage","Array","isArray","onDelete","trackerProperty","success","Promise","resolve","reject","onDeleteSucceeded","onPost","body","endPoint","toggle","message","id","onPublish","onPut","onUnpublish","isLoadingForData","defaultProps","propTypes","PropTypes","shape","object","isRequired","func","string"],"mappings":"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","sourcesContent":["import { memo, useCallback, useEffect, useRef, useReducer, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { get } from 'lodash';\nimport { request, useGlobalContext } from 'strapi-helper-plugin';\nimport PropTypes from 'prop-types';\nimport {\n  createDefaultForm,\n  formatComponentData,\n  getTrad,\n  removePasswordFieldsFromData,\n} from '../../utils';\nimport { crudInitialState, crudReducer } from '../../sharedReducers';\nimport { getRequestUrl } from './utils';\n\n// This container is used to handle the CRUD\nconst SingleTypeFormWrapper = ({ allLayoutData, children, from, slug }) => {\n  const { emitEvent } = useGlobalContext();\n  const { push } = useHistory();\n  const emitEventRef = useRef(emitEvent);\n  const [isCreatingEntry, setIsCreatingEntry] = useState(true);\n\n  const [\n    { componentsDataStructure, contentTypeDataStructure, data, isLoading, status },\n    dispatch,\n  ] = useReducer(crudReducer, crudInitialState);\n\n  const cleanReceivedData = useCallback(\n    data => {\n      const cleaned = removePasswordFieldsFromData(\n        data,\n        allLayoutData.contentType,\n        allLayoutData.components\n      );\n\n      // This is needed in order to add a unique id for the repeatable components, in order to make the reorder easier\n      return formatComponentData(cleaned, allLayoutData.contentType, allLayoutData.components);\n    },\n    [allLayoutData]\n  );\n\n  useEffect(() => {\n    const componentsDataStructure = Object.keys(allLayoutData.components).reduce((acc, current) => {\n      const defaultComponentForm = createDefaultForm(\n        get(allLayoutData, ['components', current, 'attributes'], {}),\n        allLayoutData.components\n      );\n\n      acc[current] = formatComponentData(\n        defaultComponentForm,\n        allLayoutData.components[current],\n        allLayoutData.components\n      );\n\n      return acc;\n    }, {});\n\n    const contentTypeDataStructure = createDefaultForm(\n      allLayoutData.contentType.attributes,\n      allLayoutData.components\n    );\n\n    dispatch({\n      type: 'SET_DATA_STRUCTURES',\n      componentsDataStructure,\n      contentTypeDataStructure: formatComponentData(\n        contentTypeDataStructure,\n        allLayoutData.contentType,\n        allLayoutData.components\n      ),\n    });\n  }, [allLayoutData]);\n\n  // Check if creation mode or editing mode\n  useEffect(() => {\n    const abortController = new AbortController();\n    const { signal } = abortController;\n\n    const fetchData = async signal => {\n      dispatch({ type: 'GET_DATA' });\n\n      setIsCreatingEntry(true);\n\n      try {\n        const data = await request(getRequestUrl(slug), { method: 'GET', signal });\n\n        dispatch({\n          type: 'GET_DATA_SUCCEEDED',\n          data: cleanReceivedData(data),\n        });\n        setIsCreatingEntry(false);\n      } catch (err) {\n        if (err.name === 'AbortError') {\n          return;\n        }\n\n        const responseStatus = get(err, 'response.status', null);\n\n        // Creating a single type\n        if (responseStatus === 404) {\n          dispatch({ type: 'INIT_FORM' });\n        }\n\n        if (responseStatus === 403) {\n          strapi.notification.info(getTrad('permissions.not-allowed.update'));\n\n          push(from);\n        }\n      }\n    };\n\n    fetchData(signal);\n\n    return () => abortController.abort();\n  }, [cleanReceivedData, from, push, slug]);\n\n  const displayErrors = useCallback(err => {\n    const errorPayload = err.response.payload;\n    console.error(errorPayload);\n\n    let errorMessage = get(errorPayload, ['message'], 'Bad Request');\n\n    // TODO handle errors correctly when back-end ready\n    if (Array.isArray(errorMessage)) {\n      errorMessage = get(errorMessage, ['0', 'messages', '0', 'id']);\n    }\n\n    if (typeof errorMessage === 'string') {\n      strapi.notification.error(errorMessage);\n    }\n  }, []);\n\n  const onDelete = useCallback(\n    async trackerProperty => {\n      try {\n        emitEventRef.current('willDeleteEntry', trackerProperty);\n\n        const response = await request(getRequestUrl(`${slug}`), {\n          method: 'DELETE',\n        });\n\n        strapi.notification.success(getTrad('success.record.delete'));\n\n        emitEventRef.current('didDeleteEntry', trackerProperty);\n\n        return Promise.resolve(response);\n      } catch (err) {\n        emitEventRef.current('didNotDeleteEntry', { error: err, ...trackerProperty });\n\n        return Promise.reject(err);\n      }\n    },\n    [slug]\n  );\n\n  const onDeleteSucceeded = useCallback(() => {\n    setIsCreatingEntry(true);\n\n    dispatch({ type: 'INIT_FORM' });\n  }, []);\n\n  const onPost = useCallback(\n    async (body, trackerProperty) => {\n      const endPoint = getRequestUrl(slug);\n\n      try {\n        dispatch({ type: 'SET_STATUS', status: 'submit-pending' });\n\n        const response = await request(endPoint, { method: 'PUT', body });\n\n        emitEventRef.current('didCreateEntry', trackerProperty);\n        strapi.notification.toggle({\n          type: 'success',\n          message: { id: getTrad('success.record.save') },\n        });\n\n        dispatch({ type: 'SUBMIT_SUCCEEDED', data: cleanReceivedData(response) });\n        setIsCreatingEntry(false);\n        dispatch({ type: 'SET_STATUS', status: 'resolved' });\n      } catch (err) {\n        emitEventRef.current('didNotCreateEntry', { error: err, trackerProperty });\n\n        displayErrors(err);\n        dispatch({ type: 'SET_STATUS', status: 'resolved' });\n      }\n    },\n    [cleanReceivedData, displayErrors, slug]\n  );\n  const onPublish = useCallback(async () => {\n    try {\n      emitEventRef.current('willPublishEntry');\n      const endPoint = getRequestUrl(`${slug}/actions/publish`);\n\n      dispatch({ type: 'SET_STATUS', status: 'publish-pending' });\n\n      const data = await request(endPoint, { method: 'POST' });\n\n      emitEventRef.current('didPublishEntry');\n      strapi.notification.toggle({\n        type: 'success',\n        message: { id: getTrad('success.record.publish') },\n      });\n\n      dispatch({ type: 'SUBMIT_SUCCEEDED', data: cleanReceivedData(data) });\n      dispatch({ type: 'SET_STATUS', status: 'resolved' });\n    } catch (err) {\n      displayErrors(err);\n      dispatch({ type: 'SET_STATUS', status: 'resolved' });\n    }\n  }, [cleanReceivedData, displayErrors, slug]);\n\n  const onPut = useCallback(\n    async (body, trackerProperty) => {\n      const endPoint = getRequestUrl(`${slug}`);\n\n      try {\n        emitEventRef.current('willEditEntry', trackerProperty);\n\n        dispatch({ type: 'SET_STATUS', status: 'submit-pending' });\n\n        const response = await request(endPoint, { method: 'PUT', body });\n\n        strapi.notification.toggle({\n          type: 'success',\n          message: { id: getTrad('success.record.save') },\n        });\n\n        emitEventRef.current('didEditEntry', { trackerProperty });\n\n        dispatch({ type: 'SUBMIT_SUCCEEDED', data: cleanReceivedData(response) });\n        dispatch({ type: 'SET_STATUS', status: 'resolved' });\n      } catch (err) {\n        displayErrors(err);\n\n        emitEventRef.current('didNotEditEntry', { error: err, trackerProperty });\n        dispatch({ type: 'SET_STATUS', status: 'resolved' });\n      }\n    },\n    [cleanReceivedData, displayErrors, slug]\n  );\n\n  // The publish and unpublish method could be refactored but let's leave the duplication for now\n  const onUnpublish = useCallback(async () => {\n    const endPoint = getRequestUrl(`${slug}/actions/unpublish`);\n    dispatch({ type: 'SET_STATUS', status: 'unpublish-pending' });\n\n    try {\n      emitEventRef.current('willUnpublishEntry');\n\n      const response = await request(endPoint, { method: 'POST' });\n\n      emitEventRef.current('didUnpublishEntry');\n      strapi.notification.success(getTrad('success.record.unpublish'));\n\n      dispatch({ type: 'SUBMIT_SUCCEEDED', data: cleanReceivedData(response) });\n      dispatch({ type: 'SET_STATUS', status: 'resolved' });\n    } catch (err) {\n      dispatch({ type: 'SET_STATUS', status: 'resolved' });\n      displayErrors(err);\n    }\n  }, [cleanReceivedData, displayErrors, slug]);\n\n  return children({\n    componentsDataStructure,\n    contentTypeDataStructure,\n    data,\n    isCreatingEntry,\n    isLoadingForData: isLoading,\n    onDelete,\n    onDeleteSucceeded,\n    onPost,\n    onPublish,\n    onPut,\n    onUnpublish,\n    status,\n  });\n};\n\nSingleTypeFormWrapper.defaultProps = {\n  from: '/',\n};\n\nSingleTypeFormWrapper.propTypes = {\n  allLayoutData: PropTypes.shape({\n    components: PropTypes.object.isRequired,\n    contentType: PropTypes.object.isRequired,\n  }).isRequired,\n  children: PropTypes.func.isRequired,\n  from: PropTypes.string,\n  slug: PropTypes.string.isRequired,\n};\n\nexport default memo(SingleTypeFormWrapper);\n"]},"metadata":{},"sourceType":"script"}