{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _strapiHelperPlugin = require(\"strapi-helper-plugin\");\n\nvar _hooks = require(\"../../../hooks\");\n\nvar Header = function Header(_ref) {\n  var type = _ref.fieldSchema.type,\n      _ref$metadatas = _ref.metadatas,\n      label = _ref$metadatas.label,\n      sortable = _ref$metadatas.sortable,\n      mainField = _ref$metadatas.mainField,\n      name = _ref.name;\n\n  var _useListView = (0, _hooks.useListView)(),\n      _sort = _useListView._sort,\n      firstSortableHeader = _useListView.firstSortableHeader,\n      setQuery = _useListView.setQuery;\n\n  var _useGlobalContext = (0, _strapiHelperPlugin.useGlobalContext)(),\n      emitEvent = _useGlobalContext.emitEvent;\n\n  var _sort$split = _sort.split(':'),\n      _sort$split2 = (0, _slicedToArray2[\"default\"])(_sort$split, 2),\n      sortBy = _sort$split2[0],\n      sortOrder = _sort$split2[1];\n\n  var sortField = name;\n  var useRelation = false;\n\n  if (type === 'relation') {\n    useRelation = true;\n    sortField = \"\".concat(name, \".\").concat(mainField.name);\n  }\n\n  var handleClick = function handleClick() {\n    if (sortable) {\n      emitEvent('didSortEntries', {\n        useRelation: useRelation\n      });\n      var isCurrentSort = sortField === sortBy;\n      var nextOrder = isCurrentSort && sortOrder === 'ASC' ? 'DESC' : 'ASC';\n      var value = \"\".concat(sortField, \":\").concat(nextOrder);\n\n      if (isCurrentSort && sortOrder === 'DESC') {\n        value = \"\".concat(firstSortableHeader, \":ASC\");\n      }\n\n      setQuery({\n        _sort: value\n      });\n    }\n  };\n\n  return /*#__PURE__*/_react[\"default\"].createElement(\"th\", {\n    onClick: handleClick\n  }, /*#__PURE__*/_react[\"default\"].createElement(\"span\", {\n    className: sortable ? 'sortable' : ''\n  }, label, sortBy === sortField && /*#__PURE__*/_react[\"default\"].createElement(_strapiHelperPlugin.Carret, {\n    fill: \"#212529\",\n    isUp: sortOrder === 'ASC' && 'isAsc'\n  })));\n};\n\nHeader.propTypes = {\n  fieldSchema: _propTypes[\"default\"].shape({\n    type: _propTypes[\"default\"].string.isRequired\n  }).isRequired,\n  metadatas: _propTypes[\"default\"].shape({\n    label: _propTypes[\"default\"].string.isRequired,\n    sortable: _propTypes[\"default\"].bool.isRequired,\n    mainField: _propTypes[\"default\"].object\n  }).isRequired,\n  name: _propTypes[\"default\"].string.isRequired\n};\n\nvar _default = /*#__PURE__*/(0, _react.memo)(Header);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["D:/webstorm_projects/redcat_backend/.cache/plugins/strapi-plugin-content-manager/admin/src/components/CustomTable/Headers/Header.js"],"names":["Header","type","fieldSchema","metadatas","label","sortable","mainField","name","_sort","firstSortableHeader","setQuery","emitEvent","split","sortBy","sortOrder","sortField","useRelation","handleClick","isCurrentSort","nextOrder","value","propTypes","PropTypes","shape","string","isRequired","bool","object"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,IAAMA,MAAM,GAAG,SAATA,MAAS,OAAgF;AAAA,MAA9DC,IAA8D,QAA7EC,WAA6E,CAA9DD,IAA8D;AAAA,4BAAtDE,SAAsD;AAAA,MAAzCC,KAAyC,kBAAzCA,KAAyC;AAAA,MAAlCC,QAAkC,kBAAlCA,QAAkC;AAAA,MAAxBC,SAAwB,kBAAxBA,SAAwB;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,qBAC5C,yBAD4C;AAAA,MACrFC,KADqF,gBACrFA,KADqF;AAAA,MAC9EC,mBAD8E,gBAC9EA,mBAD8E;AAAA,MACzDC,QADyD,gBACzDA,QADyD;;AAAA,0BAEvE,2CAFuE;AAAA,MAErFC,SAFqF,qBAErFA,SAFqF;;AAAA,oBAGjEH,KAAK,CAACI,KAAN,CAAY,GAAZ,CAHiE;AAAA;AAAA,MAGtFC,MAHsF;AAAA,MAG9EC,SAH8E;;AAK7F,MAAIC,SAAS,GAAGR,IAAhB;AACA,MAAIS,WAAW,GAAG,KAAlB;;AAEA,MAAIf,IAAI,KAAK,UAAb,EAAyB;AACvBe,IAAAA,WAAW,GAAG,IAAd;AACAD,IAAAA,SAAS,aAAMR,IAAN,cAAcD,SAAS,CAACC,IAAxB,CAAT;AACD;;AAED,MAAMU,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,QAAIZ,QAAJ,EAAc;AACZM,MAAAA,SAAS,CAAC,gBAAD,EAAmB;AAAEK,QAAAA,WAAW,EAAXA;AAAF,OAAnB,CAAT;AAEA,UAAME,aAAa,GAAGH,SAAS,KAAKF,MAApC;AACA,UAAMM,SAAS,GAAGD,aAAa,IAAIJ,SAAS,KAAK,KAA/B,GAAuC,MAAvC,GAAgD,KAAlE;AACA,UAAIM,KAAK,aAAML,SAAN,cAAmBI,SAAnB,CAAT;;AAEA,UAAID,aAAa,IAAIJ,SAAS,KAAK,MAAnC,EAA2C;AACzCM,QAAAA,KAAK,aAAMX,mBAAN,SAAL;AACD;;AAEDC,MAAAA,QAAQ,CAAC;AACPF,QAAAA,KAAK,EAAEY;AADA,OAAD,CAAR;AAGD;AACF,GAhBD;;AAkBA,sBACE;AAAI,IAAA,OAAO,EAAEH;AAAb,kBACE;AAAM,IAAA,SAAS,EAAEZ,QAAQ,GAAG,UAAH,GAAgB;AAAzC,KACGD,KADH,EAEGS,MAAM,KAAKE,SAAX,iBAAwB,gCAAC,0BAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,IAAI,EAAED,SAAS,KAAK,KAAd,IAAuB;AAApD,IAF3B,CADF,CADF;AAQD,CAvCD;;AAyCAd,MAAM,CAACqB,SAAP,GAAmB;AACjBnB,EAAAA,WAAW,EAAEoB,sBAAUC,KAAV,CAAgB;AAC3BtB,IAAAA,IAAI,EAAEqB,sBAAUE,MAAV,CAAiBC;AADI,GAAhB,EAEVA,UAHc;AAIjBtB,EAAAA,SAAS,EAAEmB,sBAAUC,KAAV,CAAgB;AACzBnB,IAAAA,KAAK,EAAEkB,sBAAUE,MAAV,CAAiBC,UADC;AAEzBpB,IAAAA,QAAQ,EAAEiB,sBAAUI,IAAV,CAAeD,UAFA;AAGzBnB,IAAAA,SAAS,EAAEgB,sBAAUK;AAHI,GAAhB,EAIRF,UARc;AASjBlB,EAAAA,IAAI,EAAEe,sBAAUE,MAAV,CAAiBC;AATN,CAAnB;;4BAYe,iBAAKzB,MAAL,C","sourcesContent":["import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Carret, useGlobalContext } from 'strapi-helper-plugin';\nimport { useListView } from '../../../hooks';\n\nconst Header = ({ fieldSchema: { type }, metadatas: { label, sortable, mainField }, name }) => {\n  const { _sort, firstSortableHeader, setQuery } = useListView();\n  const { emitEvent } = useGlobalContext();\n  const [sortBy, sortOrder] = _sort.split(':');\n\n  let sortField = name;\n  let useRelation = false;\n\n  if (type === 'relation') {\n    useRelation = true;\n    sortField = `${name}.${mainField.name}`;\n  }\n\n  const handleClick = () => {\n    if (sortable) {\n      emitEvent('didSortEntries', { useRelation });\n\n      const isCurrentSort = sortField === sortBy;\n      const nextOrder = isCurrentSort && sortOrder === 'ASC' ? 'DESC' : 'ASC';\n      let value = `${sortField}:${nextOrder}`;\n\n      if (isCurrentSort && sortOrder === 'DESC') {\n        value = `${firstSortableHeader}:ASC`;\n      }\n\n      setQuery({\n        _sort: value,\n      });\n    }\n  };\n\n  return (\n    <th onClick={handleClick}>\n      <span className={sortable ? 'sortable' : ''}>\n        {label}\n        {sortBy === sortField && <Carret fill=\"#212529\" isUp={sortOrder === 'ASC' && 'isAsc'} />}\n      </span>\n    </th>\n  );\n};\n\nHeader.propTypes = {\n  fieldSchema: PropTypes.shape({\n    type: PropTypes.string.isRequired,\n  }).isRequired,\n  metadatas: PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    sortable: PropTypes.bool.isRequired,\n    mainField: PropTypes.object,\n  }).isRequired,\n  name: PropTypes.string.isRequired,\n};\n\nexport default memo(Header);\n"]},"metadata":{},"sourceType":"script"}