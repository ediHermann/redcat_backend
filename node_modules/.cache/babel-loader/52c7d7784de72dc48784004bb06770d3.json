{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PluginDispatcher = PluginDispatcher;\nexports[\"default\"] = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactRouterDom = require(\"react-router-dom\");\n\nvar _lodash = require(\"lodash\");\n\nvar _strapiHelperPlugin = require(\"strapi-helper-plugin\");\n\nvar _PageTitle = _interopRequireDefault(require(\"../../components/PageTitle\"));\n\nvar _config = require(\"../../config\");\n\nvar _ErrorBoundary = _interopRequireDefault(require(\"../ErrorBoundary\"));\n\n/**\n *\n * PluginDispatcher\n *\n */\nfunction PluginDispatcher(props) {\n  var plugins = props.global.plugins,\n      pluginId = props.match.params.pluginId;\n  var pluginToRender = (0, _lodash.get)(plugins, pluginId, null);\n\n  if (!pluginToRender) {\n    return /*#__PURE__*/_react[\"default\"].createElement(_reactRouterDom.Redirect, {\n      to: \"/404\"\n    });\n  }\n\n  var blockerComponent = pluginToRender.blockerComponent,\n      blockerComponentProps = pluginToRender.blockerComponentProps,\n      mainComponent = pluginToRender.mainComponent,\n      name = pluginToRender.name,\n      preventComponentRendering = pluginToRender.preventComponentRendering;\n  var PluginEntryComponent = preventComponentRendering ? _strapiHelperPlugin.BlockerComponent : mainComponent; // Change the plugin's blockerComponent if the plugin uses a custom one.\n\n  if (preventComponentRendering && blockerComponent) {\n    PluginEntryComponent = blockerComponent;\n  }\n\n  return /*#__PURE__*/_react[\"default\"].createElement(\"div\", null, /*#__PURE__*/_react[\"default\"].createElement(_PageTitle[\"default\"], {\n    title: \"Strapi - \".concat(name)\n  }), /*#__PURE__*/_react[\"default\"].createElement(_ErrorBoundary[\"default\"], null, /*#__PURE__*/_react[\"default\"].createElement(PluginEntryComponent, (0, _extends2[\"default\"])({}, props, blockerComponentProps, {\n    assets: {\n      loginLogo: _config.LOGIN_LOGO\n    }\n  }))));\n}\n\nPluginDispatcher.defaultProps = {};\nPluginDispatcher.propTypes = {\n  global: _propTypes[\"default\"].object.isRequired,\n  match: _propTypes[\"default\"].shape({\n    params: _propTypes[\"default\"].shape({\n      pluginId: _propTypes[\"default\"].string\n    })\n  }).isRequired\n};\n\nvar _default = /*#__PURE__*/(0, _react.memo)(PluginDispatcher);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["D:/webstorm_projects/redcat_backend/.cache/admin/src/containers/PluginDispatcher/index.js"],"names":["PluginDispatcher","props","plugins","global","pluginId","match","params","pluginToRender","blockerComponent","blockerComponentProps","mainComponent","name","preventComponentRendering","PluginEntryComponent","BlockerComponent","loginLogo","LOGIN_LOGO","defaultProps","propTypes","PropTypes","object","isRequired","shape","string"],"mappings":";;;;;;;;;;;;;;AAMA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAEA;;AACA;;AAfA;AACA;AACA;AACA;AACA;AAaO,SAASA,gBAAT,CAA0BC,KAA1B,EAAiC;AAAA,MAE1BC,OAF0B,GAMlCD,KANkC,CAEpCE,MAFoC,CAE1BD,OAF0B;AAAA,MAIxBE,QAJwB,GAMlCH,KANkC,CAGpCI,KAHoC,CAIlCC,MAJkC,CAIxBF,QAJwB;AAQtC,MAAMG,cAAc,GAAG,iBAAIL,OAAJ,EAAaE,QAAb,EAAuB,IAAvB,CAAvB;;AAEA,MAAI,CAACG,cAAL,EAAqB;AACnB,wBAAO,gCAAC,wBAAD;AAAU,MAAA,EAAE,EAAC;AAAb,MAAP;AACD;;AAZqC,MAepCC,gBAfoC,GAoBlCD,cApBkC,CAepCC,gBAfoC;AAAA,MAgBpCC,qBAhBoC,GAoBlCF,cApBkC,CAgBpCE,qBAhBoC;AAAA,MAiBpCC,aAjBoC,GAoBlCH,cApBkC,CAiBpCG,aAjBoC;AAAA,MAkBpCC,IAlBoC,GAoBlCJ,cApBkC,CAkBpCI,IAlBoC;AAAA,MAmBpCC,yBAnBoC,GAoBlCL,cApBkC,CAmBpCK,yBAnBoC;AAqBtC,MAAIC,oBAAoB,GAAGD,yBAAyB,GAAGE,oCAAH,GAAsBJ,aAA1E,CArBsC,CAuBtC;;AACA,MAAIE,yBAAyB,IAAIJ,gBAAjC,EAAmD;AACjDK,IAAAA,oBAAoB,GAAGL,gBAAvB;AACD;;AAED,sBACE,0DACE,gCAAC,qBAAD;AAAW,IAAA,KAAK,qBAAcG,IAAd;AAAhB,IADF,eAEE,gCAAC,yBAAD,qBACE,gCAAC,oBAAD,gCACMV,KADN,EAEMQ,qBAFN;AAGE,IAAA,MAAM,EAAE;AAAEM,MAAAA,SAAS,EAAEC;AAAb;AAHV,KADF,CAFF,CADF;AAYD;;AAEDhB,gBAAgB,CAACiB,YAAjB,GAAgC,EAAhC;AAEAjB,gBAAgB,CAACkB,SAAjB,GAA6B;AAC3Bf,EAAAA,MAAM,EAAEgB,sBAAUC,MAAV,CAAiBC,UADE;AAE3BhB,EAAAA,KAAK,EAAEc,sBAAUG,KAAV,CAAgB;AACrBhB,IAAAA,MAAM,EAAEa,sBAAUG,KAAV,CAAgB;AACtBlB,MAAAA,QAAQ,EAAEe,sBAAUI;AADE,KAAhB;AADa,GAAhB,EAIJF;AANwB,CAA7B;;4BASe,iBAAKrB,gBAAL,C","sourcesContent":["/**\n *\n * PluginDispatcher\n *\n */\n\nimport React, { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { get } from 'lodash';\n\nimport { BlockerComponent } from 'strapi-helper-plugin';\nimport PageTitle from '../../components/PageTitle';\n\nimport { LOGIN_LOGO } from '../../config';\nimport ErrorBoundary from '../ErrorBoundary';\n\nexport function PluginDispatcher(props) {\n  const {\n    global: { plugins },\n    match: {\n      params: { pluginId },\n    },\n  } = props;\n\n  const pluginToRender = get(plugins, pluginId, null);\n\n  if (!pluginToRender) {\n    return <Redirect to=\"/404\" />;\n  }\n\n  const {\n    blockerComponent,\n    blockerComponentProps,\n    mainComponent,\n    name,\n    preventComponentRendering,\n  } = pluginToRender;\n  let PluginEntryComponent = preventComponentRendering ? BlockerComponent : mainComponent;\n\n  // Change the plugin's blockerComponent if the plugin uses a custom one.\n  if (preventComponentRendering && blockerComponent) {\n    PluginEntryComponent = blockerComponent;\n  }\n\n  return (\n    <div>\n      <PageTitle title={`Strapi - ${name}`} />\n      <ErrorBoundary>\n        <PluginEntryComponent\n          {...props}\n          {...blockerComponentProps}\n          assets={{ loginLogo: LOGIN_LOGO }}\n        />\n      </ErrorBoundary>\n    </div>\n  );\n}\n\nPluginDispatcher.defaultProps = {};\n\nPluginDispatcher.propTypes = {\n  global: PropTypes.object.isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      pluginId: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default memo(PluginDispatcher);\n"]},"metadata":{},"sourceType":"script"}