{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initialState = exports[\"default\"] = void 0;\n\nvar _immutable = require(\"immutable\");\n\nvar _pluralize = _interopRequireDefault(require(\"pluralize\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _makeUnique = _interopRequireDefault(require(\"../../utils/makeUnique\"));\n\nvar _createUid = require(\"./utils/createUid\");\n\nvar _relations = require(\"./utils/relations\");\n\nvar initialState = (0, _immutable.fromJS)({\n  formErrors: {},\n  modifiedData: {},\n  initialData: {},\n  componentToCreate: {},\n  isCreatingComponentWhileAddingAField: false\n});\nexports.initialState = initialState;\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case 'ADD_COMPONENTS_TO_DYNAMIC_ZONE':\n      {\n        var name = action.name,\n            components = action.components,\n            shouldAddComponents = action.shouldAddComponents;\n        return state.updateIn(['modifiedData', name], function (list) {\n          var updatedList = list;\n\n          if (shouldAddComponents) {\n            updatedList = list.concat(components);\n          } else {\n            updatedList = list.filter(function (comp) {\n              return components.indexOf(comp) === -1;\n            });\n          }\n\n          return (0, _immutable.List)((0, _makeUnique[\"default\"])(updatedList.toJS()));\n        });\n      }\n\n    case 'ON_CHANGE':\n      return state.update('modifiedData', function (obj) {\n        var selectedContentTypeFriendlyName = action.selectedContentTypeFriendlyName,\n            keys = action.keys,\n            value = action.value,\n            oneThatIsCreatingARelationWithAnother = action.oneThatIsCreatingARelationWithAnother;\n        var hasDefaultValue = Boolean(obj.getIn(['default'])); // There is no need to remove the default key if the default value isn't defined\n\n        if (hasDefaultValue && keys.length === 1 && keys.includes('type')) {\n          var previousType = obj.getIn(['type']);\n\n          if (previousType && ['date', 'datetime', 'time'].includes(previousType)) {\n            return obj.updateIn(keys, function () {\n              return value;\n            }).remove('default');\n          }\n        }\n\n        if (keys.length === 1 && keys.includes('nature')) {\n          return obj.update('nature', function () {\n            return value;\n          }).update('dominant', function () {\n            if (value === 'manyToMany') {\n              return true;\n            }\n\n            return null;\n          }).update('name', function (oldValue) {\n            return (0, _pluralize[\"default\"])((0, _lodash.snakeCase)(oldValue), (0, _relations.shouldPluralizeName)(value));\n          }).update('targetAttribute', function (oldValue) {\n            if (['oneWay', 'manyWay'].includes(value)) {\n              return '-';\n            }\n\n            return (0, _pluralize[\"default\"])(oldValue === '-' ? (0, _lodash.snakeCase)(oneThatIsCreatingARelationWithAnother) : oldValue, (0, _relations.shouldPluralizeTargetAttribute)(value));\n          }).update('targetColumnName', function (oldValue) {\n            if (['oneWay', 'manyWay'].includes(value)) {\n              return null;\n            }\n\n            return oldValue;\n          });\n        }\n\n        if (keys.length === 1 && keys.includes('target')) {\n          var targetContentTypeAllowedRelations = action.targetContentTypeAllowedRelations;\n          var didChangeNatureBecauseOfRestrictedRelation = false;\n          return obj.update('target', function () {\n            return value;\n          }).update('nature', function (currentNature) {\n            if (targetContentTypeAllowedRelations === null) {\n              return currentNature;\n            }\n\n            if (!targetContentTypeAllowedRelations.includes(currentNature)) {\n              didChangeNatureBecauseOfRestrictedRelation = true;\n              return targetContentTypeAllowedRelations[0];\n            }\n\n            return currentNature;\n          }).update('name', function () {\n            if (didChangeNatureBecauseOfRestrictedRelation) {\n              return (0, _pluralize[\"default\"])((0, _lodash.snakeCase)(selectedContentTypeFriendlyName), (0, _relations.shouldPluralizeName)(targetContentTypeAllowedRelations[0]));\n            }\n\n            return (0, _pluralize[\"default\"])((0, _lodash.snakeCase)(selectedContentTypeFriendlyName), (0, _relations.shouldPluralizeName)(obj.get('nature')));\n          }).update('targetAttribute', function () {\n            if (['oneWay', 'manyWay'].includes(obj.get('nature'))) {\n              return '-';\n            }\n\n            if (didChangeNatureBecauseOfRestrictedRelation && ['oneWay', 'manyWay'].includes(targetContentTypeAllowedRelations[0])) {\n              return '-';\n            }\n\n            return (0, _pluralize[\"default\"])((0, _lodash.snakeCase)(oneThatIsCreatingARelationWithAnother), (0, _relations.shouldPluralizeTargetAttribute)(obj.get('nature')));\n          });\n        }\n\n        return obj.updateIn(keys, function () {\n          return value;\n        });\n      });\n\n    case 'ON_CHANGE_ALLOWED_TYPE':\n      {\n        if (action.name === 'all') {\n          return state.updateIn(['modifiedData', 'allowedTypes'], function () {\n            if (action.value) {\n              return (0, _immutable.fromJS)(['images', 'videos', 'files']);\n            }\n\n            return null;\n          });\n        }\n\n        return state.updateIn(['modifiedData', 'allowedTypes'], function (currentList) {\n          var list = currentList || (0, _immutable.fromJS)([]);\n\n          if (list.includes(action.name)) {\n            list = list.filter(function (v) {\n              return v !== action.name;\n            });\n\n            if (list.size === 0) {\n              return null;\n            }\n\n            return list;\n          }\n\n          return list.push(action.name);\n        });\n      }\n\n    case 'RESET_PROPS':\n      return initialState;\n\n    case 'RESET_PROPS_AND_SET_FORM_FOR_ADDING_AN_EXISTING_COMPO':\n      {\n        // This is run when the user doesn't want to create a new component\n        return initialState.update('modifiedData', function () {\n          return (0, _immutable.fromJS)({\n            type: 'component',\n            repeatable: true\n          });\n        });\n      }\n\n    case 'RESET_PROPS_AND_SAVE_CURRENT_DATA':\n      {\n        // This is run when the user has created a new component\n        var componentToCreate = state.getIn(['modifiedData', 'componentToCreate']);\n        var modifiedData = (0, _immutable.fromJS)({\n          name: componentToCreate.get('name'),\n          type: 'component',\n          repeatable: false,\n          component: (0, _createUid.createComponentUid)(componentToCreate.get('name'), componentToCreate.get('category'))\n        });\n        return initialState.update('componentToCreate', function () {\n          return componentToCreate;\n        }).update('modifiedData', function () {\n          return modifiedData;\n        }).update('isCreatingComponentWhileAddingAField', function () {\n          return state.getIn(['modifiedData', 'createComponent']);\n        });\n      }\n\n    case 'RESET_PROPS_AND_SET_THE_FORM_FOR_ADDING_A_COMPO_TO_A_DZ':\n      {\n        var createdDZ = state.get('modifiedData');\n        var dataToSet = createdDZ.set('createComponent', true).set('componentToCreate', (0, _immutable.fromJS)({\n          type: 'component'\n        }));\n        return initialState.update('modifiedData', function () {\n          return dataToSet;\n        });\n      }\n\n    case 'SET_DATA_TO_EDIT':\n      {\n        return state.updateIn(['modifiedData'], function () {\n          return (0, _immutable.fromJS)(action.data);\n        }).updateIn(['initialData'], function () {\n          return (0, _immutable.fromJS)(action.data);\n        });\n      }\n\n    case 'SET_ATTRIBUTE_DATA_SCHEMA':\n      {\n        var attributeType = action.attributeType,\n            isEditing = action.isEditing,\n            modifiedDataToSetForEditing = action.modifiedDataToSetForEditing,\n            nameToSetForRelation = action.nameToSetForRelation,\n            targetUid = action.targetUid,\n            step = action.step;\n\n        if (isEditing) {\n          return state.update('modifiedData', function () {\n            return (0, _immutable.fromJS)(modifiedDataToSetForEditing);\n          }).update('initialData', function () {\n            return (0, _immutable.fromJS)(modifiedDataToSetForEditing);\n          });\n        }\n\n        var _dataToSet;\n\n        if (attributeType === 'component') {\n          if (step === '1') {\n            _dataToSet = {\n              type: 'component',\n              createComponent: true,\n              componentToCreate: {\n                type: 'component'\n              }\n            };\n          } else {\n            _dataToSet = {\n              type: 'component',\n              repeatable: true\n            };\n          }\n        } else if (attributeType === 'dynamiczone') {\n          _dataToSet = {\n            type: 'dynamiczone',\n            components: []\n          };\n        } else if (attributeType === 'text') {\n          _dataToSet = {\n            type: 'string'\n          };\n        } else if (attributeType === 'number' || attributeType === 'date') {\n          _dataToSet = {};\n        } else if (attributeType === 'media') {\n          _dataToSet = {\n            allowedTypes: ['images', 'files', 'videos'],\n            type: 'media',\n            multiple: true\n          };\n        } else if (attributeType === 'enumeration') {\n          _dataToSet = {\n            type: 'enumeration',\n            \"enum\": []\n          };\n        } else if (attributeType === 'relation') {\n          _dataToSet = {\n            name: (0, _lodash.snakeCase)(nameToSetForRelation),\n            nature: 'oneWay',\n            targetAttribute: '-',\n            target: targetUid,\n            unique: false,\n            dominant: null,\n            columnName: null,\n            targetColumnName: null\n          };\n        } else {\n          _dataToSet = {\n            type: attributeType,\n            \"default\": null\n          };\n        }\n\n        return state.update('modifiedData', function () {\n          return (0, _immutable.fromJS)(_dataToSet);\n        });\n      }\n\n    case 'SET_DYNAMIC_ZONE_DATA_SCHEMA':\n      {\n        return state.update('modifiedData', function () {\n          return (0, _immutable.fromJS)(action.attributeToEdit);\n        }).update('initialData', function () {\n          return (0, _immutable.fromJS)(action.attributeToEdit);\n        });\n      }\n\n    case 'SET_ERRORS':\n      return state.update('formErrors', function () {\n        return (0, _immutable.fromJS)(action.errors);\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar _default = reducer;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["D:/webstorm_projects/redcat_backend/.cache/plugins/strapi-plugin-content-type-builder/admin/src/containers/FormModal/reducer.js"],"names":["initialState","formErrors","modifiedData","initialData","componentToCreate","isCreatingComponentWhileAddingAField","reducer","state","action","type","name","components","shouldAddComponents","updateIn","list","updatedList","concat","filter","comp","indexOf","toJS","update","obj","selectedContentTypeFriendlyName","keys","value","oneThatIsCreatingARelationWithAnother","hasDefaultValue","Boolean","getIn","length","includes","previousType","remove","oldValue","targetContentTypeAllowedRelations","didChangeNatureBecauseOfRestrictedRelation","currentNature","get","currentList","v","size","push","repeatable","component","createdDZ","dataToSet","set","data","attributeType","isEditing","modifiedDataToSetForEditing","nameToSetForRelation","targetUid","step","createComponent","allowedTypes","multiple","nature","targetAttribute","target","unique","dominant","columnName","targetColumnName","attributeToEdit","errors"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,YAAY,GAAG,uBAAO;AAC1BC,EAAAA,UAAU,EAAE,EADc;AAE1BC,EAAAA,YAAY,EAAE,EAFY;AAG1BC,EAAAA,WAAW,EAAE,EAHa;AAI1BC,EAAAA,iBAAiB,EAAE,EAJO;AAK1BC,EAAAA,oCAAoC,EAAE;AALZ,CAAP,CAArB;;;AAQA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,gCAAL;AAAuC;AAAA,YAC7BC,IAD6B,GACaF,MADb,CAC7BE,IAD6B;AAAA,YACvBC,UADuB,GACaH,MADb,CACvBG,UADuB;AAAA,YACXC,mBADW,GACaJ,MADb,CACXI,mBADW;AAGrC,eAAOL,KAAK,CAACM,QAAN,CAAe,CAAC,cAAD,EAAiBH,IAAjB,CAAf,EAAuC,UAAAI,IAAI,EAAI;AACpD,cAAIC,WAAW,GAAGD,IAAlB;;AAEA,cAAIF,mBAAJ,EAAyB;AACvBG,YAAAA,WAAW,GAAGD,IAAI,CAACE,MAAL,CAAYL,UAAZ,CAAd;AACD,WAFD,MAEO;AACLI,YAAAA,WAAW,GAAGD,IAAI,CAACG,MAAL,CAAY,UAAAC,IAAI,EAAI;AAChC,qBAAOP,UAAU,CAACQ,OAAX,CAAmBD,IAAnB,MAA6B,CAAC,CAArC;AACD,aAFa,CAAd;AAGD;;AAED,iBAAO,qBAAK,4BAAWH,WAAW,CAACK,IAAZ,EAAX,CAAL,CAAP;AACD,SAZM,CAAP;AAaD;;AACD,SAAK,WAAL;AACE,aAAOb,KAAK,CAACc,MAAN,CAAa,cAAb,EAA6B,UAAAC,GAAG,EAAI;AAAA,YAEvCC,+BAFuC,GAMrCf,MANqC,CAEvCe,+BAFuC;AAAA,YAGvCC,IAHuC,GAMrChB,MANqC,CAGvCgB,IAHuC;AAAA,YAIvCC,KAJuC,GAMrCjB,MANqC,CAIvCiB,KAJuC;AAAA,YAKvCC,qCALuC,GAMrClB,MANqC,CAKvCkB,qCALuC;AAOzC,YAAMC,eAAe,GAAGC,OAAO,CAACN,GAAG,CAACO,KAAJ,CAAU,CAAC,SAAD,CAAV,CAAD,CAA/B,CAPyC,CASzC;;AACA,YAAIF,eAAe,IAAIH,IAAI,CAACM,MAAL,KAAgB,CAAnC,IAAwCN,IAAI,CAACO,QAAL,CAAc,MAAd,CAA5C,EAAmE;AACjE,cAAMC,YAAY,GAAGV,GAAG,CAACO,KAAJ,CAAU,CAAC,MAAD,CAAV,CAArB;;AAEA,cAAIG,YAAY,IAAI,CAAC,MAAD,EAAS,UAAT,EAAqB,MAArB,EAA6BD,QAA7B,CAAsCC,YAAtC,CAApB,EAAyE;AACvE,mBAAOV,GAAG,CAACT,QAAJ,CAAaW,IAAb,EAAmB;AAAA,qBAAMC,KAAN;AAAA,aAAnB,EAAgCQ,MAAhC,CAAuC,SAAvC,CAAP;AACD;AACF;;AAED,YAAIT,IAAI,CAACM,MAAL,KAAgB,CAAhB,IAAqBN,IAAI,CAACO,QAAL,CAAc,QAAd,CAAzB,EAAkD;AAChD,iBAAOT,GAAG,CACPD,MADI,CACG,QADH,EACa;AAAA,mBAAMI,KAAN;AAAA,WADb,EAEJJ,MAFI,CAEG,UAFH,EAEe,YAAM;AACxB,gBAAII,KAAK,KAAK,YAAd,EAA4B;AAC1B,qBAAO,IAAP;AACD;;AAED,mBAAO,IAAP;AACD,WARI,EASJJ,MATI,CASG,MATH,EASW,UAAAa,QAAQ,EAAI;AAC1B,mBAAO,2BAAU,uBAAUA,QAAV,CAAV,EAA+B,oCAAoBT,KAApB,CAA/B,CAAP;AACD,WAXI,EAYJJ,MAZI,CAYG,iBAZH,EAYsB,UAAAa,QAAQ,EAAI;AACrC,gBAAI,CAAC,QAAD,EAAW,SAAX,EAAsBH,QAAtB,CAA+BN,KAA/B,CAAJ,EAA2C;AACzC,qBAAO,GAAP;AACD;;AAED,mBAAO,2BACLS,QAAQ,KAAK,GAAb,GAAmB,uBAAUR,qCAAV,CAAnB,GAAsEQ,QADjE,EAEL,+CAA+BT,KAA/B,CAFK,CAAP;AAID,WArBI,EAsBJJ,MAtBI,CAsBG,kBAtBH,EAsBuB,UAAAa,QAAQ,EAAI;AACtC,gBAAI,CAAC,QAAD,EAAW,SAAX,EAAsBH,QAAtB,CAA+BN,KAA/B,CAAJ,EAA2C;AACzC,qBAAO,IAAP;AACD;;AAED,mBAAOS,QAAP;AACD,WA5BI,CAAP;AA6BD;;AAED,YAAIV,IAAI,CAACM,MAAL,KAAgB,CAAhB,IAAqBN,IAAI,CAACO,QAAL,CAAc,QAAd,CAAzB,EAAkD;AAAA,cACxCI,iCADwC,GACF3B,MADE,CACxC2B,iCADwC;AAEhD,cAAIC,0CAA0C,GAAG,KAAjD;AAEA,iBAAOd,GAAG,CACPD,MADI,CACG,QADH,EACa;AAAA,mBAAMI,KAAN;AAAA,WADb,EAEJJ,MAFI,CAEG,QAFH,EAEa,UAAAgB,aAAa,EAAI;AACjC,gBAAIF,iCAAiC,KAAK,IAA1C,EAAgD;AAC9C,qBAAOE,aAAP;AACD;;AAED,gBAAI,CAACF,iCAAiC,CAACJ,QAAlC,CAA2CM,aAA3C,CAAL,EAAgE;AAC9DD,cAAAA,0CAA0C,GAAG,IAA7C;AAEA,qBAAOD,iCAAiC,CAAC,CAAD,CAAxC;AACD;;AAED,mBAAOE,aAAP;AACD,WAdI,EAeJhB,MAfI,CAeG,MAfH,EAeW,YAAM;AACpB,gBAAIe,0CAAJ,EAAgD;AAC9C,qBAAO,2BACL,uBAAUb,+BAAV,CADK,EAEL,oCAAoBY,iCAAiC,CAAC,CAAD,CAArD,CAFK,CAAP;AAID;;AAED,mBAAO,2BACL,uBAAUZ,+BAAV,CADK,EAGL,oCAAoBD,GAAG,CAACgB,GAAJ,CAAQ,QAAR,CAApB,CAHK,CAAP;AAKD,WA5BI,EA6BJjB,MA7BI,CA6BG,iBA7BH,EA6BsB,YAAM;AAC/B,gBAAI,CAAC,QAAD,EAAW,SAAX,EAAsBU,QAAtB,CAA+BT,GAAG,CAACgB,GAAJ,CAAQ,QAAR,CAA/B,CAAJ,EAAuD;AACrD,qBAAO,GAAP;AACD;;AAED,gBACEF,0CAA0C,IAC1C,CAAC,QAAD,EAAW,SAAX,EAAsBL,QAAtB,CAA+BI,iCAAiC,CAAC,CAAD,CAAhE,CAFF,EAGE;AACA,qBAAO,GAAP;AACD;;AAED,mBAAO,2BACL,uBAAUT,qCAAV,CADK,EAEL,+CAA+BJ,GAAG,CAACgB,GAAJ,CAAQ,QAAR,CAA/B,CAFK,CAAP;AAID,WA7CI,CAAP;AA8CD;;AAED,eAAOhB,GAAG,CAACT,QAAJ,CAAaW,IAAb,EAAmB;AAAA,iBAAMC,KAAN;AAAA,SAAnB,CAAP;AACD,OAvGM,CAAP;;AAwGF,SAAK,wBAAL;AAA+B;AAC7B,YAAIjB,MAAM,CAACE,IAAP,KAAgB,KAApB,EAA2B;AACzB,iBAAOH,KAAK,CAACM,QAAN,CAAe,CAAC,cAAD,EAAiB,cAAjB,CAAf,EAAiD,YAAM;AAC5D,gBAAIL,MAAM,CAACiB,KAAX,EAAkB;AAChB,qBAAO,uBAAO,CAAC,QAAD,EAAW,QAAX,EAAqB,OAArB,CAAP,CAAP;AACD;;AAED,mBAAO,IAAP;AACD,WANM,CAAP;AAOD;;AAED,eAAOlB,KAAK,CAACM,QAAN,CAAe,CAAC,cAAD,EAAiB,cAAjB,CAAf,EAAiD,UAAA0B,WAAW,EAAI;AACrE,cAAIzB,IAAI,GAAGyB,WAAW,IAAI,uBAAO,EAAP,CAA1B;;AAEA,cAAIzB,IAAI,CAACiB,QAAL,CAAcvB,MAAM,CAACE,IAArB,CAAJ,EAAgC;AAC9BI,YAAAA,IAAI,GAAGA,IAAI,CAACG,MAAL,CAAY,UAAAuB,CAAC;AAAA,qBAAIA,CAAC,KAAKhC,MAAM,CAACE,IAAjB;AAAA,aAAb,CAAP;;AAEA,gBAAII,IAAI,CAAC2B,IAAL,KAAc,CAAlB,EAAqB;AACnB,qBAAO,IAAP;AACD;;AAED,mBAAO3B,IAAP;AACD;;AAED,iBAAOA,IAAI,CAAC4B,IAAL,CAAUlC,MAAM,CAACE,IAAjB,CAAP;AACD,SAdM,CAAP;AAeD;;AACD,SAAK,aAAL;AACE,aAAOV,YAAP;;AACF,SAAK,uDAAL;AAA8D;AAC5D;AACA,eAAOA,YAAY,CAACqB,MAAb,CAAoB,cAApB,EAAoC;AAAA,iBACzC,uBAAO;AAAEZ,YAAAA,IAAI,EAAE,WAAR;AAAqBkC,YAAAA,UAAU,EAAE;AAAjC,WAAP,CADyC;AAAA,SAApC,CAAP;AAGD;;AACD,SAAK,mCAAL;AAA0C;AACxC;AACA,YAAMvC,iBAAiB,GAAGG,KAAK,CAACsB,KAAN,CAAY,CAAC,cAAD,EAAiB,mBAAjB,CAAZ,CAA1B;AACA,YAAM3B,YAAY,GAAG,uBAAO;AAC1BQ,UAAAA,IAAI,EAAEN,iBAAiB,CAACkC,GAAlB,CAAsB,MAAtB,CADoB;AAE1B7B,UAAAA,IAAI,EAAE,WAFoB;AAG1BkC,UAAAA,UAAU,EAAE,KAHc;AAI1BC,UAAAA,SAAS,EAAE,mCACTxC,iBAAiB,CAACkC,GAAlB,CAAsB,MAAtB,CADS,EAETlC,iBAAiB,CAACkC,GAAlB,CAAsB,UAAtB,CAFS;AAJe,SAAP,CAArB;AAUA,eAAOtC,YAAY,CAChBqB,MADI,CACG,mBADH,EACwB;AAAA,iBAAMjB,iBAAN;AAAA,SADxB,EAEJiB,MAFI,CAEG,cAFH,EAEmB;AAAA,iBAAMnB,YAAN;AAAA,SAFnB,EAGJmB,MAHI,CAGG,sCAHH,EAG2C;AAAA,iBAC9Cd,KAAK,CAACsB,KAAN,CAAY,CAAC,cAAD,EAAiB,iBAAjB,CAAZ,CAD8C;AAAA,SAH3C,CAAP;AAMD;;AACD,SAAK,yDAAL;AAAgE;AAC9D,YAAMgB,SAAS,GAAGtC,KAAK,CAAC+B,GAAN,CAAU,cAAV,CAAlB;AACA,YAAMQ,SAAS,GAAGD,SAAS,CACxBE,GADe,CACX,iBADW,EACQ,IADR,EAEfA,GAFe,CAEX,mBAFW,EAEU,uBAAO;AAAEtC,UAAAA,IAAI,EAAE;AAAR,SAAP,CAFV,CAAlB;AAIA,eAAOT,YAAY,CAACqB,MAAb,CAAoB,cAApB,EAAoC;AAAA,iBAAMyB,SAAN;AAAA,SAApC,CAAP;AACD;;AACD,SAAK,kBAAL;AAAyB;AACvB,eAAOvC,KAAK,CACTM,QADI,CACK,CAAC,cAAD,CADL,EACuB;AAAA,iBAAM,uBAAOL,MAAM,CAACwC,IAAd,CAAN;AAAA,SADvB,EAEJnC,QAFI,CAEK,CAAC,aAAD,CAFL,EAEsB;AAAA,iBAAM,uBAAOL,MAAM,CAACwC,IAAd,CAAN;AAAA,SAFtB,CAAP;AAGD;;AACD,SAAK,2BAAL;AAAkC;AAAA,YAE9BC,aAF8B,GAQ5BzC,MAR4B,CAE9ByC,aAF8B;AAAA,YAG9BC,SAH8B,GAQ5B1C,MAR4B,CAG9B0C,SAH8B;AAAA,YAI9BC,2BAJ8B,GAQ5B3C,MAR4B,CAI9B2C,2BAJ8B;AAAA,YAK9BC,oBAL8B,GAQ5B5C,MAR4B,CAK9B4C,oBAL8B;AAAA,YAM9BC,SAN8B,GAQ5B7C,MAR4B,CAM9B6C,SAN8B;AAAA,YAO9BC,IAP8B,GAQ5B9C,MAR4B,CAO9B8C,IAP8B;;AAUhC,YAAIJ,SAAJ,EAAe;AACb,iBAAO3C,KAAK,CACTc,MADI,CACG,cADH,EACmB;AAAA,mBAAM,uBAAO8B,2BAAP,CAAN;AAAA,WADnB,EAEJ9B,MAFI,CAEG,aAFH,EAEkB;AAAA,mBAAM,uBAAO8B,2BAAP,CAAN;AAAA,WAFlB,CAAP;AAGD;;AAED,YAAIL,UAAJ;;AAEA,YAAIG,aAAa,KAAK,WAAtB,EAAmC;AACjC,cAAIK,IAAI,KAAK,GAAb,EAAkB;AAChBR,YAAAA,UAAS,GAAG;AACVrC,cAAAA,IAAI,EAAE,WADI;AAEV8C,cAAAA,eAAe,EAAE,IAFP;AAGVnD,cAAAA,iBAAiB,EAAE;AAAEK,gBAAAA,IAAI,EAAE;AAAR;AAHT,aAAZ;AAKD,WAND,MAMO;AACLqC,YAAAA,UAAS,GAAG;AACVrC,cAAAA,IAAI,EAAE,WADI;AAEVkC,cAAAA,UAAU,EAAE;AAFF,aAAZ;AAID;AACF,SAbD,MAaO,IAAIM,aAAa,KAAK,aAAtB,EAAqC;AAC1CH,UAAAA,UAAS,GAAG;AACVrC,YAAAA,IAAI,EAAE,aADI;AAEVE,YAAAA,UAAU,EAAE;AAFF,WAAZ;AAID,SALM,MAKA,IAAIsC,aAAa,KAAK,MAAtB,EAA8B;AACnCH,UAAAA,UAAS,GAAG;AAAErC,YAAAA,IAAI,EAAE;AAAR,WAAZ;AACD,SAFM,MAEA,IAAIwC,aAAa,KAAK,QAAlB,IAA8BA,aAAa,KAAK,MAApD,EAA4D;AACjEH,UAAAA,UAAS,GAAG,EAAZ;AACD,SAFM,MAEA,IAAIG,aAAa,KAAK,OAAtB,EAA+B;AACpCH,UAAAA,UAAS,GAAG;AACVU,YAAAA,YAAY,EAAE,CAAC,QAAD,EAAW,OAAX,EAAoB,QAApB,CADJ;AAEV/C,YAAAA,IAAI,EAAE,OAFI;AAGVgD,YAAAA,QAAQ,EAAE;AAHA,WAAZ;AAKD,SANM,MAMA,IAAIR,aAAa,KAAK,aAAtB,EAAqC;AAC1CH,UAAAA,UAAS,GAAG;AAAErC,YAAAA,IAAI,EAAE,aAAR;AAAuB,oBAAM;AAA7B,WAAZ;AACD,SAFM,MAEA,IAAIwC,aAAa,KAAK,UAAtB,EAAkC;AACvCH,UAAAA,UAAS,GAAG;AACVpC,YAAAA,IAAI,EAAE,uBAAU0C,oBAAV,CADI;AAEVM,YAAAA,MAAM,EAAE,QAFE;AAGVC,YAAAA,eAAe,EAAE,GAHP;AAIVC,YAAAA,MAAM,EAAEP,SAJE;AAKVQ,YAAAA,MAAM,EAAE,KALE;AAMVC,YAAAA,QAAQ,EAAE,IANA;AAOVC,YAAAA,UAAU,EAAE,IAPF;AAQVC,YAAAA,gBAAgB,EAAE;AARR,WAAZ;AAUD,SAXM,MAWA;AACLlB,UAAAA,UAAS,GAAG;AAAErC,YAAAA,IAAI,EAAEwC,aAAR;AAAuB,uBAAS;AAAhC,WAAZ;AACD;;AAED,eAAO1C,KAAK,CAACc,MAAN,CAAa,cAAb,EAA6B;AAAA,iBAAM,uBAAOyB,UAAP,CAAN;AAAA,SAA7B,CAAP;AACD;;AACD,SAAK,8BAAL;AAAqC;AACnC,eAAOvC,KAAK,CACTc,MADI,CACG,cADH,EACmB;AAAA,iBAAM,uBAAOb,MAAM,CAACyD,eAAd,CAAN;AAAA,SADnB,EAEJ5C,MAFI,CAEG,aAFH,EAEkB;AAAA,iBAAM,uBAAOb,MAAM,CAACyD,eAAd,CAAN;AAAA,SAFlB,CAAP;AAGD;;AAED,SAAK,YAAL;AACE,aAAO1D,KAAK,CAACc,MAAN,CAAa,YAAb,EAA2B;AAAA,eAAM,uBAAOb,MAAM,CAAC0D,MAAd,CAAN;AAAA,OAA3B,CAAP;;AACF;AACE,aAAO3D,KAAP;AAzQJ;AA2QD,CA5QD;;eA8QeD,O","sourcesContent":["import { fromJS, List } from 'immutable';\nimport pluralize from 'pluralize';\nimport { snakeCase } from 'lodash';\nimport makeUnique from '../../utils/makeUnique';\nimport { createComponentUid } from './utils/createUid';\nimport { shouldPluralizeName, shouldPluralizeTargetAttribute } from './utils/relations';\n\nconst initialState = fromJS({\n  formErrors: {},\n  modifiedData: {},\n  initialData: {},\n  componentToCreate: {},\n  isCreatingComponentWhileAddingAField: false,\n});\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_COMPONENTS_TO_DYNAMIC_ZONE': {\n      const { name, components, shouldAddComponents } = action;\n\n      return state.updateIn(['modifiedData', name], list => {\n        let updatedList = list;\n\n        if (shouldAddComponents) {\n          updatedList = list.concat(components);\n        } else {\n          updatedList = list.filter(comp => {\n            return components.indexOf(comp) === -1;\n          });\n        }\n\n        return List(makeUnique(updatedList.toJS()));\n      });\n    }\n    case 'ON_CHANGE':\n      return state.update('modifiedData', obj => {\n        const {\n          selectedContentTypeFriendlyName,\n          keys,\n          value,\n          oneThatIsCreatingARelationWithAnother,\n        } = action;\n        const hasDefaultValue = Boolean(obj.getIn(['default']));\n\n        // There is no need to remove the default key if the default value isn't defined\n        if (hasDefaultValue && keys.length === 1 && keys.includes('type')) {\n          const previousType = obj.getIn(['type']);\n\n          if (previousType && ['date', 'datetime', 'time'].includes(previousType)) {\n            return obj.updateIn(keys, () => value).remove('default');\n          }\n        }\n\n        if (keys.length === 1 && keys.includes('nature')) {\n          return obj\n            .update('nature', () => value)\n            .update('dominant', () => {\n              if (value === 'manyToMany') {\n                return true;\n              }\n\n              return null;\n            })\n            .update('name', oldValue => {\n              return pluralize(snakeCase(oldValue), shouldPluralizeName(value));\n            })\n            .update('targetAttribute', oldValue => {\n              if (['oneWay', 'manyWay'].includes(value)) {\n                return '-';\n              }\n\n              return pluralize(\n                oldValue === '-' ? snakeCase(oneThatIsCreatingARelationWithAnother) : oldValue,\n                shouldPluralizeTargetAttribute(value)\n              );\n            })\n            .update('targetColumnName', oldValue => {\n              if (['oneWay', 'manyWay'].includes(value)) {\n                return null;\n              }\n\n              return oldValue;\n            });\n        }\n\n        if (keys.length === 1 && keys.includes('target')) {\n          const { targetContentTypeAllowedRelations } = action;\n          let didChangeNatureBecauseOfRestrictedRelation = false;\n\n          return obj\n            .update('target', () => value)\n            .update('nature', currentNature => {\n              if (targetContentTypeAllowedRelations === null) {\n                return currentNature;\n              }\n\n              if (!targetContentTypeAllowedRelations.includes(currentNature)) {\n                didChangeNatureBecauseOfRestrictedRelation = true;\n\n                return targetContentTypeAllowedRelations[0];\n              }\n\n              return currentNature;\n            })\n            .update('name', () => {\n              if (didChangeNatureBecauseOfRestrictedRelation) {\n                return pluralize(\n                  snakeCase(selectedContentTypeFriendlyName),\n                  shouldPluralizeName(targetContentTypeAllowedRelations[0])\n                );\n              }\n\n              return pluralize(\n                snakeCase(selectedContentTypeFriendlyName),\n\n                shouldPluralizeName(obj.get('nature'))\n              );\n            })\n            .update('targetAttribute', () => {\n              if (['oneWay', 'manyWay'].includes(obj.get('nature'))) {\n                return '-';\n              }\n\n              if (\n                didChangeNatureBecauseOfRestrictedRelation &&\n                ['oneWay', 'manyWay'].includes(targetContentTypeAllowedRelations[0])\n              ) {\n                return '-';\n              }\n\n              return pluralize(\n                snakeCase(oneThatIsCreatingARelationWithAnother),\n                shouldPluralizeTargetAttribute(obj.get('nature'))\n              );\n            });\n        }\n\n        return obj.updateIn(keys, () => value);\n      });\n    case 'ON_CHANGE_ALLOWED_TYPE': {\n      if (action.name === 'all') {\n        return state.updateIn(['modifiedData', 'allowedTypes'], () => {\n          if (action.value) {\n            return fromJS(['images', 'videos', 'files']);\n          }\n\n          return null;\n        });\n      }\n\n      return state.updateIn(['modifiedData', 'allowedTypes'], currentList => {\n        let list = currentList || fromJS([]);\n\n        if (list.includes(action.name)) {\n          list = list.filter(v => v !== action.name);\n\n          if (list.size === 0) {\n            return null;\n          }\n\n          return list;\n        }\n\n        return list.push(action.name);\n      });\n    }\n    case 'RESET_PROPS':\n      return initialState;\n    case 'RESET_PROPS_AND_SET_FORM_FOR_ADDING_AN_EXISTING_COMPO': {\n      // This is run when the user doesn't want to create a new component\n      return initialState.update('modifiedData', () =>\n        fromJS({ type: 'component', repeatable: true })\n      );\n    }\n    case 'RESET_PROPS_AND_SAVE_CURRENT_DATA': {\n      // This is run when the user has created a new component\n      const componentToCreate = state.getIn(['modifiedData', 'componentToCreate']);\n      const modifiedData = fromJS({\n        name: componentToCreate.get('name'),\n        type: 'component',\n        repeatable: false,\n        component: createComponentUid(\n          componentToCreate.get('name'),\n          componentToCreate.get('category')\n        ),\n      });\n\n      return initialState\n        .update('componentToCreate', () => componentToCreate)\n        .update('modifiedData', () => modifiedData)\n        .update('isCreatingComponentWhileAddingAField', () =>\n          state.getIn(['modifiedData', 'createComponent'])\n        );\n    }\n    case 'RESET_PROPS_AND_SET_THE_FORM_FOR_ADDING_A_COMPO_TO_A_DZ': {\n      const createdDZ = state.get('modifiedData');\n      const dataToSet = createdDZ\n        .set('createComponent', true)\n        .set('componentToCreate', fromJS({ type: 'component' }));\n\n      return initialState.update('modifiedData', () => dataToSet);\n    }\n    case 'SET_DATA_TO_EDIT': {\n      return state\n        .updateIn(['modifiedData'], () => fromJS(action.data))\n        .updateIn(['initialData'], () => fromJS(action.data));\n    }\n    case 'SET_ATTRIBUTE_DATA_SCHEMA': {\n      const {\n        attributeType,\n        isEditing,\n        modifiedDataToSetForEditing,\n        nameToSetForRelation,\n        targetUid,\n        step,\n      } = action;\n\n      if (isEditing) {\n        return state\n          .update('modifiedData', () => fromJS(modifiedDataToSetForEditing))\n          .update('initialData', () => fromJS(modifiedDataToSetForEditing));\n      }\n\n      let dataToSet;\n\n      if (attributeType === 'component') {\n        if (step === '1') {\n          dataToSet = {\n            type: 'component',\n            createComponent: true,\n            componentToCreate: { type: 'component' },\n          };\n        } else {\n          dataToSet = {\n            type: 'component',\n            repeatable: true,\n          };\n        }\n      } else if (attributeType === 'dynamiczone') {\n        dataToSet = {\n          type: 'dynamiczone',\n          components: [],\n        };\n      } else if (attributeType === 'text') {\n        dataToSet = { type: 'string' };\n      } else if (attributeType === 'number' || attributeType === 'date') {\n        dataToSet = {};\n      } else if (attributeType === 'media') {\n        dataToSet = {\n          allowedTypes: ['images', 'files', 'videos'],\n          type: 'media',\n          multiple: true,\n        };\n      } else if (attributeType === 'enumeration') {\n        dataToSet = { type: 'enumeration', enum: [] };\n      } else if (attributeType === 'relation') {\n        dataToSet = {\n          name: snakeCase(nameToSetForRelation),\n          nature: 'oneWay',\n          targetAttribute: '-',\n          target: targetUid,\n          unique: false,\n          dominant: null,\n          columnName: null,\n          targetColumnName: null,\n        };\n      } else {\n        dataToSet = { type: attributeType, default: null };\n      }\n\n      return state.update('modifiedData', () => fromJS(dataToSet));\n    }\n    case 'SET_DYNAMIC_ZONE_DATA_SCHEMA': {\n      return state\n        .update('modifiedData', () => fromJS(action.attributeToEdit))\n        .update('initialData', () => fromJS(action.attributeToEdit));\n    }\n\n    case 'SET_ERRORS':\n      return state.update('formErrors', () => fromJS(action.errors));\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\nexport { initialState };\n"]},"metadata":{},"sourceType":"script"}