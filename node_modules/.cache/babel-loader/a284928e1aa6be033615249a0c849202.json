{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _getAttributeInfos = require(\"./getAttributeInfos\");\n\nvar defaultFields = ['created_by', 'updated_by', 'published_at', 'id', '_id'];\n\nvar removeFieldsFromClonedData = function removeFieldsFromClonedData(data, contentTypeSchema, componentSchema) {\n  var fields = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultFields;\n\n  var recursiveCleanData = function recursiveCleanData(data, schema) {\n    return Object.keys(data).reduce(function (acc, current) {\n      var attrType = (0, _getAttributeInfos.getType)(schema, current);\n      var value = (0, _lodash.get)(data, current);\n      var component = (0, _getAttributeInfos.getOtherInfos)(schema, [current, 'component']);\n      var isRepeatable = (0, _getAttributeInfos.getOtherInfos)(schema, [current, 'repeatable']);\n      var timestamps = (0, _lodash.get)(schema, ['options', 'timestamps']);\n\n      if (!Array.isArray(timestamps)) {\n        timestamps = [];\n      }\n\n      if ([].concat((0, _toConsumableArray2[\"default\"])(fields), (0, _toConsumableArray2[\"default\"])(timestamps)).indexOf(current) !== -1) {\n        delete acc[current];\n        return acc;\n      }\n\n      if (!value) {\n        return acc;\n      }\n\n      if (attrType === 'dynamiczone') {\n        acc[current] = value.map(function (componentValue) {\n          var subCleanedData = recursiveCleanData(componentValue, componentSchema[componentValue.__component]);\n          return subCleanedData;\n        });\n        return acc;\n      }\n\n      if (attrType === 'component') {\n        if (isRepeatable) {\n          acc[current] = value.map(function (compoData) {\n            var subCleanedData = recursiveCleanData(compoData, componentSchema[component]);\n            return subCleanedData;\n          });\n        } else {\n          acc[current] = recursiveCleanData(value, componentSchema[component]);\n        }\n\n        return acc;\n      }\n\n      return acc;\n    }, Object.assign({}, data));\n  };\n\n  return recursiveCleanData(data, contentTypeSchema);\n};\n\nvar _default = removeFieldsFromClonedData;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["D:/webstorm_projects/redcat_backend/.cache/plugins/strapi-plugin-content-manager/admin/src/utils/removeFieldsFromClonedData.js"],"names":["defaultFields","removeFieldsFromClonedData","data","contentTypeSchema","componentSchema","fields","recursiveCleanData","schema","Object","keys","reduce","acc","current","attrType","value","component","isRepeatable","timestamps","Array","isArray","indexOf","map","componentValue","subCleanedData","__component","compoData","assign"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,aAAa,GAAG,CAAC,YAAD,EAAe,YAAf,EAA6B,cAA7B,EAA6C,IAA7C,EAAmD,KAAnD,CAAtB;;AAEA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CACjCC,IADiC,EAEjCC,iBAFiC,EAGjCC,eAHiC,EAK9B;AAAA,MADHC,MACG,uEADML,aACN;;AACH,MAAMM,kBAAkB,GAAG,SAArBA,kBAAqB,CAACJ,IAAD,EAAOK,MAAP,EAAkB;AAC3C,WAAOC,MAAM,CAACC,IAAP,CAAYP,IAAZ,EAAkBQ,MAAlB,CAAyB,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAChD,UAAMC,QAAQ,GAAG,gCAAQN,MAAR,EAAgBK,OAAhB,CAAjB;AACA,UAAME,KAAK,GAAG,iBAAIZ,IAAJ,EAAUU,OAAV,CAAd;AACA,UAAMG,SAAS,GAAG,sCAAcR,MAAd,EAAsB,CAACK,OAAD,EAAU,WAAV,CAAtB,CAAlB;AACA,UAAMI,YAAY,GAAG,sCAAcT,MAAd,EAAsB,CAACK,OAAD,EAAU,YAAV,CAAtB,CAArB;AACA,UAAIK,UAAU,GAAG,iBAAIV,MAAJ,EAAY,CAAC,SAAD,EAAY,YAAZ,CAAZ,CAAjB;;AAEA,UAAI,CAACW,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAL,EAAgC;AAC9BA,QAAAA,UAAU,GAAG,EAAb;AACD;;AAED,UAAI,8CAAIZ,MAAJ,uCAAeY,UAAf,GAA2BG,OAA3B,CAAmCR,OAAnC,MAAgD,CAAC,CAArD,EAAwD;AACtD,eAAOD,GAAG,CAACC,OAAD,CAAV;AAEA,eAAOD,GAAP;AACD;;AAED,UAAI,CAACG,KAAL,EAAY;AACV,eAAOH,GAAP;AACD;;AAED,UAAIE,QAAQ,KAAK,aAAjB,EAAgC;AAC9BF,QAAAA,GAAG,CAACC,OAAD,CAAH,GAAeE,KAAK,CAACO,GAAN,CAAU,UAAAC,cAAc,EAAI;AACzC,cAAMC,cAAc,GAAGjB,kBAAkB,CACvCgB,cADuC,EAEvClB,eAAe,CAACkB,cAAc,CAACE,WAAhB,CAFwB,CAAzC;AAKA,iBAAOD,cAAP;AACD,SAPc,CAAf;AASA,eAAOZ,GAAP;AACD;;AAED,UAAIE,QAAQ,KAAK,WAAjB,EAA8B;AAC5B,YAAIG,YAAJ,EAAkB;AAChBL,UAAAA,GAAG,CAACC,OAAD,CAAH,GAAeE,KAAK,CAACO,GAAN,CAAU,UAAAI,SAAS,EAAI;AACpC,gBAAMF,cAAc,GAAGjB,kBAAkB,CAACmB,SAAD,EAAYrB,eAAe,CAACW,SAAD,CAA3B,CAAzC;AAEA,mBAAOQ,cAAP;AACD,WAJc,CAAf;AAKD,SAND,MAMO;AACLZ,UAAAA,GAAG,CAACC,OAAD,CAAH,GAAeN,kBAAkB,CAACQ,KAAD,EAAQV,eAAe,CAACW,SAAD,CAAvB,CAAjC;AACD;;AAED,eAAOJ,GAAP;AACD;;AAED,aAAOA,GAAP;AACD,KAjDM,EAiDJH,MAAM,CAACkB,MAAP,CAAc,EAAd,EAAkBxB,IAAlB,CAjDI,CAAP;AAkDD,GAnDD;;AAqDA,SAAOI,kBAAkB,CAACJ,IAAD,EAAOC,iBAAP,CAAzB;AACD,CA5DD;;eA8DeF,0B","sourcesContent":["import { get } from 'lodash';\nimport { getType, getOtherInfos } from './getAttributeInfos';\n\nconst defaultFields = ['created_by', 'updated_by', 'published_at', 'id', '_id'];\n\nconst removeFieldsFromClonedData = (\n  data,\n  contentTypeSchema,\n  componentSchema,\n  fields = defaultFields\n) => {\n  const recursiveCleanData = (data, schema) => {\n    return Object.keys(data).reduce((acc, current) => {\n      const attrType = getType(schema, current);\n      const value = get(data, current);\n      const component = getOtherInfos(schema, [current, 'component']);\n      const isRepeatable = getOtherInfos(schema, [current, 'repeatable']);\n      let timestamps = get(schema, ['options', 'timestamps']);\n\n      if (!Array.isArray(timestamps)) {\n        timestamps = [];\n      }\n\n      if ([...fields, ...timestamps].indexOf(current) !== -1) {\n        delete acc[current];\n\n        return acc;\n      }\n\n      if (!value) {\n        return acc;\n      }\n\n      if (attrType === 'dynamiczone') {\n        acc[current] = value.map(componentValue => {\n          const subCleanedData = recursiveCleanData(\n            componentValue,\n            componentSchema[componentValue.__component]\n          );\n\n          return subCleanedData;\n        });\n\n        return acc;\n      }\n\n      if (attrType === 'component') {\n        if (isRepeatable) {\n          acc[current] = value.map(compoData => {\n            const subCleanedData = recursiveCleanData(compoData, componentSchema[component]);\n\n            return subCleanedData;\n          });\n        } else {\n          acc[current] = recursiveCleanData(value, componentSchema[component]);\n        }\n\n        return acc;\n      }\n\n      return acc;\n    }, Object.assign({}, data));\n  };\n\n  return recursiveCleanData(data, contentTypeSchema);\n};\n\nexport default removeFieldsFromClonedData;\n"]},"metadata":{},"sourceType":"script"}