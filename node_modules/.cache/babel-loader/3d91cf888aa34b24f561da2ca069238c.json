{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDisplayedModels = exports.generateRelationQueryInfosForComponents = exports.generateRelationQueryInfos = exports.formatListLayoutWithMetas = exports.formatLayoutWithMetas = exports.formatEditRelationsLayoutWithMetas = exports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _utils = require(\"../../../utils\");\n\nvar _pluginId = _interopRequireDefault(require(\"../../../pluginId\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// editRelations is an array of strings...\nvar formatEditRelationsLayoutWithMetas = function formatEditRelationsLayoutWithMetas(contentTypeConfiguration, models) {\n  var formatted = contentTypeConfiguration.layouts.editRelations.reduce(function (acc, current) {\n    var fieldSchema = (0, _lodash.get)(contentTypeConfiguration, ['attributes', current], {});\n    var metadatas = (0, _lodash.get)(contentTypeConfiguration, ['metadatas', current, 'edit'], {});\n    var size = 6;\n    var queryInfos = generateRelationQueryInfos(contentTypeConfiguration, current, models);\n    acc.push({\n      name: current,\n      size: size,\n      fieldSchema: fieldSchema,\n      metadatas: metadatas,\n      queryInfos: queryInfos\n    });\n    return acc;\n  }, []);\n  return formatted;\n};\n\nexports.formatEditRelationsLayoutWithMetas = formatEditRelationsLayoutWithMetas;\n\nvar formatLayouts = function formatLayouts(initialData, models) {\n  var data = createMetasSchema(initialData, models);\n  var formattedCTEditLayout = formatLayoutWithMetas(data.contentType, null, models);\n  var ctUid = data.contentType.uid;\n  var formattedEditRelationsLayout = formatEditRelationsLayoutWithMetas(data.contentType, models);\n  var formattedListLayout = formatListLayoutWithMetas(data.contentType, models);\n  (0, _lodash.set)(data, ['contentType', 'layouts', 'edit'], formattedCTEditLayout);\n  (0, _lodash.set)(data, ['contentType', 'layouts', 'editRelations'], formattedEditRelationsLayout);\n  (0, _lodash.set)(data, ['contentType', 'layouts', 'list'], formattedListLayout);\n  Object.keys(data.components).forEach(function (compoUID) {\n    var formattedCompoEditLayout = formatLayoutWithMetas(data.components[compoUID], ctUid, models);\n    (0, _lodash.set)(data, ['components', compoUID, 'layouts', 'edit'], formattedCompoEditLayout);\n  });\n  return data;\n};\n\nvar createMetasSchema = function createMetasSchema(initialData, models) {\n  var data = (0, _utils.mergeMetasWithSchema)((0, _lodash.cloneDeep)(initialData), models, 'contentType');\n  var components = data.components,\n      contentType = data.contentType;\n\n  var getRelationModel = function getRelationModel(targetModel) {\n    return models.find(function (model) {\n      return model.uid === targetModel;\n    });\n  };\n\n  var formatMetadatas = function formatMetadatas(targetSchema) {\n    return Object.keys(targetSchema.metadatas).reduce(function (acc, current) {\n      var schema = (0, _lodash.get)(targetSchema, ['attributes', current], {});\n      var metadatas = targetSchema.metadatas[current];\n\n      if (schema.type === 'relation') {\n        var relationModel = getRelationModel(schema.targetModel);\n        var mainFieldName = metadatas.edit.mainField;\n        var mainField = {\n          name: mainFieldName,\n          schema: (0, _lodash.get)(relationModel, ['attributes', mainFieldName])\n        };\n        metadatas = {\n          list: _objectSpread(_objectSpread({}, metadatas.list), {}, {\n            mainField: mainField\n          }),\n          edit: _objectSpread(_objectSpread({}, metadatas.edit), {}, {\n            mainField: mainField\n          })\n        };\n      }\n\n      acc[current] = metadatas;\n      return acc;\n    }, {});\n  };\n\n  (0, _lodash.set)(data, ['contentType', 'metadatas'], formatMetadatas(contentType));\n  Object.keys(components).forEach(function (compoUID) {\n    var currentCompo = components[compoUID];\n    var updatedMetas = formatMetadatas(currentCompo);\n    (0, _lodash.set)(data, ['components', compoUID, 'metadatas'], updatedMetas);\n  });\n  return data;\n};\n\nvar formatLayoutWithMetas = function formatLayoutWithMetas(contentTypeConfiguration, ctUid, models) {\n  var formatted = contentTypeConfiguration.layouts.edit.reduce(function (acc, current) {\n    var row = current.map(function (attribute) {\n      var fieldSchema = (0, _lodash.get)(contentTypeConfiguration, ['attributes', attribute.name], {});\n\n      var data = _objectSpread(_objectSpread({}, attribute), {}, {\n        fieldSchema: fieldSchema,\n        metadatas: (0, _lodash.get)(contentTypeConfiguration, ['metadatas', attribute.name, 'edit'], {})\n      });\n\n      if (fieldSchema.type === 'relation') {\n        var queryInfos = ctUid ? generateRelationQueryInfosForComponents(contentTypeConfiguration, attribute.name, ctUid, models) : generateRelationQueryInfos(contentTypeConfiguration, attribute.name, models);\n        (0, _lodash.set)(data, 'queryInfos', queryInfos);\n      }\n\n      return data;\n    });\n    acc.push(row);\n    return acc;\n  }, []);\n  return formatted;\n};\n\nexports.formatLayoutWithMetas = formatLayoutWithMetas;\n\nvar formatListLayoutWithMetas = function formatListLayoutWithMetas(contentTypeConfiguration) {\n  var formatted = contentTypeConfiguration.layouts.list.reduce(function (acc, current) {\n    var fieldSchema = (0, _lodash.get)(contentTypeConfiguration, ['attributes', current], {});\n    var metadatas = (0, _lodash.get)(contentTypeConfiguration, ['metadatas', current, 'list'], {});\n    var type = fieldSchema.type;\n\n    if (type === 'relation') {\n      var queryInfos = {\n        endPoint: \"collection-types/\".concat(contentTypeConfiguration.uid),\n        defaultParams: {}\n      };\n      acc.push({\n        key: \"__\".concat(current, \"_key__\"),\n        name: current,\n        fieldSchema: fieldSchema,\n        metadatas: metadatas,\n        queryInfos: queryInfos\n      });\n      return acc;\n    }\n\n    acc.push({\n      key: \"__\".concat(current, \"_key__\"),\n      name: current,\n      fieldSchema: fieldSchema,\n      metadatas: metadatas\n    });\n    return acc;\n  }, []);\n  return formatted;\n};\n\nexports.formatListLayoutWithMetas = formatListLayoutWithMetas;\n\nvar generateRelationQueryInfos = function generateRelationQueryInfos(contentTypeConfiguration, fieldName, models) {\n  var uid = contentTypeConfiguration.uid;\n  var endPoint = \"/\".concat(_pluginId[\"default\"], \"/relations/\").concat(uid, \"/\").concat(fieldName);\n  var mainField = (0, _lodash.get)(contentTypeConfiguration, ['metadatas', fieldName, 'edit', 'mainField', 'name'], '');\n  var targetModel = (0, _lodash.get)(contentTypeConfiguration, ['attributes', fieldName, 'targetModel'], '');\n  var shouldDisplayRelationLink = getDisplayedModels(models).indexOf(targetModel) !== -1;\n  var queryInfos = {\n    endPoint: endPoint,\n    containsKey: \"\".concat(mainField, \"_contains\"),\n    defaultParams: {},\n    shouldDisplayRelationLink: shouldDisplayRelationLink\n  };\n  return queryInfos;\n};\n\nexports.generateRelationQueryInfos = generateRelationQueryInfos;\n\nvar generateRelationQueryInfosForComponents = function generateRelationQueryInfosForComponents(contentTypeConfiguration, fieldName, ctUid, models) {\n  var endPoint = \"/\".concat(_pluginId[\"default\"], \"/relations/\").concat(ctUid, \"/\").concat(fieldName);\n  var mainField = (0, _lodash.get)(contentTypeConfiguration, ['metadatas', fieldName, 'edit', 'mainField', 'name'], '');\n  var targetModel = (0, _lodash.get)(contentTypeConfiguration, ['attributes', fieldName, 'targetModel'], '');\n  var shouldDisplayRelationLink = getDisplayedModels(models).indexOf(targetModel) !== -1;\n  var queryInfos = {\n    endPoint: endPoint,\n    containsKey: \"\".concat(mainField, \"_contains\"),\n    defaultParams: {\n      _component: contentTypeConfiguration.uid\n    },\n    shouldDisplayRelationLink: shouldDisplayRelationLink\n  };\n  return queryInfos;\n};\n\nexports.generateRelationQueryInfosForComponents = generateRelationQueryInfosForComponents;\n\nvar getDisplayedModels = function getDisplayedModels(models) {\n  return models.filter(function (model) {\n    return model.isDisplayed;\n  }).map(function (_ref) {\n    var uid = _ref.uid;\n    return uid;\n  });\n};\n\nexports.getDisplayedModels = getDisplayedModels;\nvar _default = formatLayouts;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["D:/webstorm_projects/redcat_backend/.cache/plugins/strapi-plugin-content-manager/admin/src/hooks/useFetchContentTypeLayout/utils/formatLayouts.js"],"names":["formatEditRelationsLayoutWithMetas","contentTypeConfiguration","models","formatted","layouts","editRelations","reduce","acc","current","fieldSchema","metadatas","size","queryInfos","generateRelationQueryInfos","push","name","formatLayouts","initialData","data","createMetasSchema","formattedCTEditLayout","formatLayoutWithMetas","contentType","ctUid","uid","formattedEditRelationsLayout","formattedListLayout","formatListLayoutWithMetas","Object","keys","components","forEach","compoUID","formattedCompoEditLayout","getRelationModel","targetModel","find","model","formatMetadatas","targetSchema","schema","type","relationModel","mainFieldName","edit","mainField","list","currentCompo","updatedMetas","row","map","attribute","generateRelationQueryInfosForComponents","endPoint","defaultParams","key","fieldName","pluginId","shouldDisplayRelationLink","getDisplayedModels","indexOf","containsKey","_component","filter","isDisplayed"],"mappings":"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","sourcesContent":["import { cloneDeep, get, set } from 'lodash';\nimport { mergeMetasWithSchema } from '../../../utils';\nimport pluginId from '../../../pluginId';\n\n// editRelations is an array of strings...\nconst formatEditRelationsLayoutWithMetas = (contentTypeConfiguration, models) => {\n  const formatted = contentTypeConfiguration.layouts.editRelations.reduce((acc, current) => {\n    const fieldSchema = get(contentTypeConfiguration, ['attributes', current], {});\n    const metadatas = get(contentTypeConfiguration, ['metadatas', current, 'edit'], {});\n    const size = 6;\n\n    const queryInfos = generateRelationQueryInfos(contentTypeConfiguration, current, models);\n\n    acc.push({\n      name: current,\n      size,\n      fieldSchema,\n      metadatas,\n      queryInfos,\n    });\n\n    return acc;\n  }, []);\n\n  return formatted;\n};\n\nconst formatLayouts = (initialData, models) => {\n  const data = createMetasSchema(initialData, models);\n\n  const formattedCTEditLayout = formatLayoutWithMetas(data.contentType, null, models);\n  const ctUid = data.contentType.uid;\n  const formattedEditRelationsLayout = formatEditRelationsLayoutWithMetas(data.contentType, models);\n  const formattedListLayout = formatListLayoutWithMetas(data.contentType, models);\n\n  set(data, ['contentType', 'layouts', 'edit'], formattedCTEditLayout);\n  set(data, ['contentType', 'layouts', 'editRelations'], formattedEditRelationsLayout);\n  set(data, ['contentType', 'layouts', 'list'], formattedListLayout);\n\n  Object.keys(data.components).forEach(compoUID => {\n    const formattedCompoEditLayout = formatLayoutWithMetas(\n      data.components[compoUID],\n      ctUid,\n      models\n    );\n\n    set(data, ['components', compoUID, 'layouts', 'edit'], formattedCompoEditLayout);\n  });\n\n  return data;\n};\n\nconst createMetasSchema = (initialData, models) => {\n  const data = mergeMetasWithSchema(cloneDeep(initialData), models, 'contentType');\n  const { components, contentType } = data;\n  const getRelationModel = targetModel => models.find(model => model.uid === targetModel);\n\n  const formatMetadatas = targetSchema => {\n    return Object.keys(targetSchema.metadatas).reduce((acc, current) => {\n      const schema = get(targetSchema, ['attributes', current], {});\n      let metadatas = targetSchema.metadatas[current];\n\n      if (schema.type === 'relation') {\n        const relationModel = getRelationModel(schema.targetModel);\n        const mainFieldName = metadatas.edit.mainField;\n        const mainField = {\n          name: mainFieldName,\n          schema: get(relationModel, ['attributes', mainFieldName]),\n        };\n\n        metadatas = {\n          list: {\n            ...metadatas.list,\n            mainField,\n          },\n          edit: {\n            ...metadatas.edit,\n            mainField,\n          },\n        };\n      }\n\n      acc[current] = metadatas;\n\n      return acc;\n    }, {});\n  };\n\n  set(data, ['contentType', 'metadatas'], formatMetadatas(contentType));\n\n  Object.keys(components).forEach(compoUID => {\n    const currentCompo = components[compoUID];\n    const updatedMetas = formatMetadatas(currentCompo);\n\n    set(data, ['components', compoUID, 'metadatas'], updatedMetas);\n  });\n\n  return data;\n};\n\nconst formatLayoutWithMetas = (contentTypeConfiguration, ctUid, models) => {\n  const formatted = contentTypeConfiguration.layouts.edit.reduce((acc, current) => {\n    const row = current.map(attribute => {\n      const fieldSchema = get(contentTypeConfiguration, ['attributes', attribute.name], {});\n\n      const data = {\n        ...attribute,\n        fieldSchema,\n        metadatas: get(contentTypeConfiguration, ['metadatas', attribute.name, 'edit'], {}),\n      };\n\n      if (fieldSchema.type === 'relation') {\n        const queryInfos = ctUid\n          ? generateRelationQueryInfosForComponents(\n              contentTypeConfiguration,\n              attribute.name,\n              ctUid,\n              models\n            )\n          : generateRelationQueryInfos(contentTypeConfiguration, attribute.name, models);\n\n        set(data, 'queryInfos', queryInfos);\n      }\n\n      return data;\n    });\n\n    acc.push(row);\n\n    return acc;\n  }, []);\n\n  return formatted;\n};\n\nconst formatListLayoutWithMetas = contentTypeConfiguration => {\n  const formatted = contentTypeConfiguration.layouts.list.reduce((acc, current) => {\n    const fieldSchema = get(contentTypeConfiguration, ['attributes', current], {});\n    const metadatas = get(contentTypeConfiguration, ['metadatas', current, 'list'], {});\n\n    const type = fieldSchema.type;\n\n    if (type === 'relation') {\n      const queryInfos = {\n        endPoint: `collection-types/${contentTypeConfiguration.uid}`,\n        defaultParams: {},\n      };\n\n      acc.push({ key: `__${current}_key__`, name: current, fieldSchema, metadatas, queryInfos });\n\n      return acc;\n    }\n\n    acc.push({ key: `__${current}_key__`, name: current, fieldSchema, metadatas });\n\n    return acc;\n  }, []);\n\n  return formatted;\n};\n\nconst generateRelationQueryInfos = (contentTypeConfiguration, fieldName, models) => {\n  const uid = contentTypeConfiguration.uid;\n  const endPoint = `/${pluginId}/relations/${uid}/${fieldName}`;\n  const mainField = get(\n    contentTypeConfiguration,\n    ['metadatas', fieldName, 'edit', 'mainField', 'name'],\n    ''\n  );\n  const targetModel = get(contentTypeConfiguration, ['attributes', fieldName, 'targetModel'], '');\n  const shouldDisplayRelationLink = getDisplayedModels(models).indexOf(targetModel) !== -1;\n\n  const queryInfos = {\n    endPoint,\n    containsKey: `${mainField}_contains`,\n    defaultParams: {},\n    shouldDisplayRelationLink,\n  };\n\n  return queryInfos;\n};\n\nconst generateRelationQueryInfosForComponents = (\n  contentTypeConfiguration,\n  fieldName,\n  ctUid,\n  models\n) => {\n  const endPoint = `/${pluginId}/relations/${ctUid}/${fieldName}`;\n  const mainField = get(\n    contentTypeConfiguration,\n    ['metadatas', fieldName, 'edit', 'mainField', 'name'],\n    ''\n  );\n  const targetModel = get(contentTypeConfiguration, ['attributes', fieldName, 'targetModel'], '');\n  const shouldDisplayRelationLink = getDisplayedModels(models).indexOf(targetModel) !== -1;\n\n  const queryInfos = {\n    endPoint,\n    containsKey: `${mainField}_contains`,\n    defaultParams: {\n      _component: contentTypeConfiguration.uid,\n    },\n    shouldDisplayRelationLink,\n  };\n\n  return queryInfos;\n};\n\nconst getDisplayedModels = models =>\n  models.filter(model => model.isDisplayed).map(({ uid }) => uid);\n\nexport default formatLayouts;\nexport {\n  formatEditRelationsLayoutWithMetas,\n  formatLayoutWithMetas,\n  formatListLayoutWithMetas,\n  generateRelationQueryInfos,\n  generateRelationQueryInfosForComponents,\n  getDisplayedModels,\n};\n"]},"metadata":{},"sourceType":"script"}